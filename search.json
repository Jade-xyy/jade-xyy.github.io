[{"title":"DNS常见问题","url":"/2025/08/14/faqDns/","tags":["dns"],"categories":["FAQ"]},{"title":"鬼灭日语篇","url":"/2025/08/12/theJapOfTheDemonSlayer/","content":"# 鬼灭日语篇\n> っつ 小写：读音短暂停顿，罗马音双写后边的辅音；大写：cu(tu)\n> 下文括号备注拼写时的罗马音\n\n## 水之呼吸 - みずのこきゅう - mi zu no ko kiu(ki yu u)\n- 壹之型 水面斩\n    - いちのかた - みなもぎり\n    - i qi(ti) no ka ta - mi na mo gi li\n- 贰之型 水车\n    - にのかた - みずぐるま\n    - ni no ka ta - mi zu gu lu ma\n- 叁之型 流流舞\n    - さんのかた - りゅうりゅうまい\n    - sa n no ka ta - liu(li yu u) liu(li yu u) ma i\n- 肆之型 打潮\n    - よんのかた - うちしお\n    - yo n no ka ta - u qi(ti) xi(si/shi) o\n- 伍之型 干天之慈雨\n    - ごのかた - かんてんのじう\n    - go no ka ta - ka n te n no ji(zi) u\n- 陆之型 扭转旋涡\n    - ろくのかた - ねじれうず\n    - lo ku no ka ta - ne ji(zi) le u zu\n- 柒之型 水滴波纹刺•曲\n    - しちのかた - しずくはもんづき\n    - xi(si/shi) qi(ti) no ka ta - xi(si/shi) zu ku mo n zu(du) ki\n- 捌之型 泷壶\n    - はちのかた - たきつぼ\n    - ha qi(ti) no ka ta - ta ki cu(tu) bo\n- 玖之型 水流飞沫•乱\n    - きゅうのかた - すいりゅうしぶき\n    - kiu(ki yu u) no ka ta - si(su) i liu(li yu u) xi(si/shi) bu ki\n- 拾之型 生生流转\n    - じゅうのかた - せいせいるてん\n    - jiu(zi yu u) no ka ta - se i se i lu te n\n- 拾壹之型 凪（zhǐ 指变得风平浪静；日本和字，据《日本汉字的汉语读音规范（草案）》：凡可视为形声或会意兼形声的，取声旁读音，故在汉语普通话中，可读“zhǐ”）\n    - じゅういちのかた - なぎ\n    - jiu(zi yu u) i qi(ti) no ka ta - na gi\n\n## 雷之呼吸 - かみなりのこきゅう - ka mi na li no ko kiu(ki yu u)\n- 壹之型 霹雳一闪\n    - いちのかた - へきれきいっせん\n    - i qi(ti) no ka ta - he ki le ki i ~ sse n\n- 壹之型 霹雳一闪六连\n\n- 壹之型 霹雳一闪八连\n\n- 壹之型 霹雳一闪神速\n\n- 贰之型 稻魂\n\n- 叁之型 聚蚊成雷\n\n- 肆之型 远雷\n\n- 伍之型 热界雷\n\n- 陆之型 电轰雷轰\n\n- 柒之型 火雷神\n\n## 兽之呼吸\n- 壹之牙 穿击刺射\n-\n- 贰之牙 利刃对劈\n-\n- 叁之牙 獠牙撕扯\n-\n- 肆之牙 碎刃霏霏\n-\n- 伍之牙 狂牙绽裂\n-\n- 陆之牙 乱桩刺咬\n-\n- 柒之型 空间感知\n-\n- 捌之型 爆裂猛进\n-\n- 玖之型 伸蜿蜒绽裂\n-\n- 拾之型 圆转旋牙\n\n\n\n## 恋之呼吸\n\n- 壹之型 初恋的战栗\n- \n- 贰之型 懊恼梭巡之恋\n- \n- 叁之型 恋猫时雨\n- \n- 肆之型 未知\n- \n- 伍之型 摇摆不定的恋情·乱爪\n- \n- 陆之型 猫足恋风\n\n\n## 风之呼吸\n- 壹之型 尘旋风 削斩\n-\n- 贰之型 爪爪 柯户风\n-\n- 叁之型 晴岚风树\n-\n- 肆之型 升上沙尘岚\n-\n- 伍之型 寒秋落山风\n-\n- 陆之型 黑风烟岚\n-\n- 柒之型 劲风 天狗风\n-\n- 捌之型 初烈风斩\n-\n- 玖之型 韦駄天台风\n\n\n\n## 花之呼吸\n\n- 壹之型 未知\n- \n- 贰之型 未知\n- \n- 叁之型 御影梅\n- \n- 肆之型 红花衣\n- \n- 伍之型 无果芍药\n- \n- 陆之型 涡桃\n- \n- 终之型 彼岸朱眼\n\n\n\n## 虫之呼吸 むしのこきゅう\n- 蝶之舞 戏弄\n- \n- 蜂牙之舞 真曳\n- \n- 蜻蛉之舞 复眼六角\n- \n- 蜈蚣之舞 百足蛇腹\n\n\n\n## 音之呼吸 \n- 壹之型 轰\n- \n- 贰之型 未知\n- \n- 叁之型 未知\n- \n- 肆之型 响斩无间\n- \n- 伍之型 鸣弦叠奏\n\n\n\n\n## 蛇之呼吸\n- 壹之型 未知\n- \n- 贰之型 狭头之毒牙\n- \n- 叁之型 未知\n- \n- 肆之型 未知\n- \n- 伍之型 蜿蜿长蛇\n- \n- 陆之型 未知\n- \n- 柒之形 委蛇斩\n\n\n\n## 岩之呼吸\n- 壹之型 蛇纹岩·双极\n-\n- 贰之型 天面碎\n-\n- 叁之型 岩躯之肤\n-\n- 肆之型 流纹岩·速征\n-\n- 伍之型 瓦轮刑部\n\n\n## 霞之呼吸\n- 壹之型 垂天远霞\n-\n- 贰之型 八重霞\n-\n- 叁之型 霞散的飞沫\n-\n- 肆之型 平流斩\n-\n- 伍之型 霞云之海\n-\n- 陆之型 月之霞消\n-\n- 柒之型 胧\n\n\n## 炎之呼吸 \n- 壹之型 不知火\n- しらぬい\n- 贰之型 炎天升腾\n- \n- 叁之型 未知\n- のぼりえんてん\n- 肆之型 盛炎之涡卷\n- せいえんのうねり\n- 伍之型 炎虎\n- えんこ\n- 陆之型 未知\n-\n- 柒之型 未知\n-\n- 捌之型 未知\n-\n- 玖之型 炼狱\n- れんごく\n\n\n\n\n## 日之呼吸\n- 壹之型 飞轮阳炎\n-\n- 贰之型 辉辉恩光\n-\n- 叁之型 碧罗天\n-\n- 肆之型 火车\n-\n- 伍之型 烈日红镜\n-\n- 陆之型 炎舞\n-\n- 柒之型 幻日红\n-\n- 捌之型 圆舞\n-\n- 玖之型 斜阳转身\n-\n- 拾之型 灼骨阳炎\n-\n- 拾壹之型 日晕之龙-头舞\n-\n- 拾贰之型 阳华突\n-\n- 拾叁之型 烈日艳阳\n\n\n\n## 月之呼吸\n\n- 壹之型 暗月·宵之宫\n-\n- 贰之型 珠华之弄月\n-\n- 叁之型 厌忌月·销\n-\n- 肆之型 未知\n-\n- 伍之型 月魄灾涡\n-\n- 陆之型 常夜孤月·无间\n-\n- 柒之型 厄镜·映月\n-\n- 捌之型 月龙轮尾\n-\n- 玖之型 坠月·连面\n-\n- 拾之型 穿面斩·叶隙残月\n-\n- 十壹之型 未知\n-\n- 十贰之型 未知\n-\n- 十叁之型 未知\n-\n- 十肆之型 凶变·天满纤月\n-\n- 十伍之型 未知\n-\n- 十陆之型 月虹·碎月","tags":["language"],"categories":["study","notes"]},{"title":"K8s问题集","url":"/2025/08/08/k8sComplexProblems/","content":"# K8s问题集\n## 常见pod状态报错描述\n| 状态 | 描述 |\n| :--- | :--- |\n| CrashLoopBackOff | 容器启动后异常退出，kubelet正在将它重启 |\n| InvalidImageName | 无法解析镜像名称 |\n| Pending | 资源不足，集群内node不满足该pod请求的cpu、memory、gpu等，或有标签不匹配、节点亲和性、pod亲和性等问题 |\n| OOMKilled | pod使用内存超限制，增加内存limit或优化pod的内存使用 |\n| Unknown | api-server和kubelet无法通信，检查组件、网络是否正常 |\n| Failed | pod启动失败 |\n| Evicted | pod被驱逐出node |\n|  |  |\n| ImageInspectError | 无法校验镜像 |\n| ErrImageNeverPull | 策略禁止拉取镜像 |\n| ImagePullBackOff | 正在重试拉取 |\n| RegistryUnavailable | 连接不到镜像中心 |\n| ErrImagePull | 通用的拉取镜像出错 |\n| CreateContainerConfigError | 不能创建kubelet使用的容器配置 |\n| CreateContainerError | 创建容器失败 |\n| m.internalLifecycle.PreStartContainer | 执行hook报错 |\n| RunContainerError | 启动容器失败 |\n| PostStartHookError | 执行hook报错 |\n| ContainersNotInitialized | 容器没有初始化完毕 |\n| ContainersNotRead | 容器没有准备完毕 |\n| ContainerCreating | 容器创建中 |\n| PodInitializing | pod初始化中 |\n| DockerDaemonNotReady | docker还没有完全启动 |\n| NetworkPluginNotReady | 网络插件还没有完全启动 |\n\n## 日志报错解析\n#### 架构错误\npod报错\nexec /docker-entrypoint.sh: exec format error\n镜像架构与节点架构不符，arch检查节点架构是x86还是arm","tags":["k8s"],"categories":["study","notes"]},{"title":"日语五十音","url":"/2025/05/15/gojuon/","content":"手写记录\n![](gojuon/gojuon1.jpg)\n![](gojuon/gojuon2.jpg)\n","tags":["language"],"categories":["study","notes"]},{"title":"VALORANT术语","url":"/2025/05/14/valorantTerm/","content":"## 特工（英文/港服/国服）\n#### 决斗（一般指最先与敌人产生交火并击杀） - Duelist ['dju:əlist]\n__Phoenix__ ['fiːnɪks]（菲尼克斯 / 不死鸟）\n__Jett__ （捷提 / 捷风）\n__Raze__ [reɪz]（芮兹 / 雷兹）\n__Neon__ ['niːɒn]（霓虹）\n__Reyna__ （蕾娜 / 芮娜）\n__Yoru__ （夜戮 / 夜露）\n__Iso__ （壹决）\n__Waylay__ [weɪ'leɪ]（幻棱）\n#### 先锋（力量集中在减益敌人） - Initiator [ɪ'nɪʃɪetɚ]\n__Sova__ （苏法 / 猎枭）\n__Breach__ [briːtʃ]（叛奇 / 铁臂）\n__Fade__ [feɪd]（菲德 / 黑梦）\n__Kay/O__ （K.O）\n__Skye__ （斯凯）\n__‌Gekko‌__ （盖可）\n__Tejo__ （钛狐）\n#### 烟位/控场（切割敌方视野控制区域） - Controller\n__Brimstone__ ['brɪmst(ə)n; -stəʊn]（布史东 / 炼狱）\n__Viper__ ['vaɪpə]（薇蝮 / 蝰蛇）\n__Omen__ ['əʊmən]（欧门 / 幽影）\n__Astra__ [ˈæstrə]（亚星卓 / 星礈）\n__Harbor__ ['hɑrbɚ]（哈珀 / 海神）\n__Clove__ [klov]（暮蝶）\n#### 哨卫（能力集中在防守上，防止绕后） - Sentinel ['sentɪn(ə)l]\n__Sage__ [seɪdʒ]（圣祈 / 贤者）\n__Cypher__ [ˈsaɪfɚ]（瑟符 / 零）\n__Killjoy__ ['kɪldʒɔɪ]（恺宙 / 奇乐）\n__Chamber__ [ˈtʃeɪmbər]（钱博尔 / 尚勃勒）\n__Deadlock__ ['dedlɒk]（死锁 / 钢锁）\n__Vyse__ （维斯）\n\n## 武器\n#### 佩枪\n__Classic__ ['klæsɪk]（制式 / 标配）\n__Shorty__ （短管 / 短炮）\n__Frenzy / CZ__ ['frenzɪ]（狂弑 / 狂怒）\n__Ghost / USP__ （鬼魅）\n__Sheriff / Deagle__ ['ʃɛrɪf]（神射 / 正义）\n#### 冲锋枪\n__Stinger__ ['stɪŋɚ]（刺针 / 蜂刺）\n__Spectre__ [ˈspektər]（恶灵 / 骇灵）\n#### 霰弹枪\n__Bucky__ （重炮 / 雄鹿）\n__Judge__ [dʒʌdʒ]（判官）\n#### 步枪\n__Bulldog__ ['bʊl'dɔg]（斗牛犬 / 獠犬）\n__Guardian__ ['ɡɑrdɪən]（捍卫者 / 戍卫）\n__Phantom__ 'fæntəm]（幻象 / 幻影）M4\n__Vandal__ ['vændl]（暴徒 / 狂徒）AK\n#### 狙击步枪\n__Operator__ （间谍 / 飞将）\n__Outlaw__ ['aʊtlɔː]（逃犯 / 莽侠）\n__Marshal__ ['mɑrʃəl]（警长 / 冥驹）\n#### 机关枪\n__Ares__ （战神）\n__Odin__ （奥丁）\n\n## 地图\n__Ascent__ [ə'sɛnt]（意境空岛 / 亚海悬城）\n__Haven__ ['hevn]（遗落境地 / 隐世修所）\n__Fracture__ ['fræktʃɚ]（天漠之峡 / 裂变峡谷）\n__Bind__ （劫境之地 / 源工重镇）\n__Split__ [splɪt]（双塔迷城 / 霓虹町）\n__Pearl__ [pɝl]（深海遗珠 / 深海明珠）\n__Lotus__ ['lotəs]（莲花古城 / 莲华古城）\n__Breeze__ [briːz]（热带乐园 / 微风岛屿）\n__Icebox__ ['aɪsbɑks]（极地寒港 / 森寒冬港）\n\n## 段位\n__Iron__ ['aɪən]（黑铁）\n__Bronze__ [brɒnz]（青铜）\n__Silver__ ['sɪlvɚ]（白银）\n__Gold__ [gəʊld]（黄金）\n__Platinum__ ['plætnəm]（铂金）\n__Diamond__ ['daɪəmənd]（钻石）\n__Ascendant__ [ə'send(ə)nt]（超凡）\n__Immortal__ [ɪ'mɔːt(ə)l]（神话）\n__Radiant__ ['redɪənt]（辐能）\n\n## 对局内术语\n__bait / baiting__ [beɪt]（诱饵 / 送头拿信息）\n__buy time / delay__ （拖时间）\n__camp__ （蹲点）\n__careful op / they got op__ （小心对面架狙）\n__corner__ （拐角）\n__crossfire__ （一起架，交叉开火，让对手无法同事对两个方向做出反应）\n__cut noise__ （静步）\n__don't peek__ （残局不要试探性开枪）\n__double peek__ （双拉）\n__eco__ （存钱）\n__entry__ ['entrɪ]（进点）\n__the entry__ （第一个进点的人）\n__fake defuse / plant__ （引诱对手暴露信息）\n__flank__ （打团的绕后/防绕后）\n__lurker__ [ˈlɜːrkər]（独狼）\n__lurk__ [lɜːk]（单摸）\n__glass cannon__ [ɡlæs]['kænən]（脆皮输出，大狙无甲、步枪无甲）\n__heal__ [hiːl]（治疗）\n__hold__ （架枪）\n__jiggle peek / shoulder peek__ ['dʒɪɡl]（快速瞥一眼拿信息）\n__line up__ （道具点位，通过道具拖延拆包）\n__low / 1hp / 1shot__ （大残）\n__one tap / tag__ （一枪爆头）\n__peek shot__ （贴墙卡视野射击或闪出来一枪秒）\n__perfire__ （提前枪）\n__play for picks__ （运营，慢打给压力）\n__play for time__ （拖时间，不刻意对枪）\n__play the bomb__ （装包后围着包打）\n__post plant__ （世界包）\n__safe plan__ （安全包）\n__rehit__ （二次进攻）\n__retake__ （回防/重夺据点）\n__rotate__ （转点）\n__rush__ （快打）\n__trade / trade kill__ （卖人头）\n__ult / ultimate__ （终极技能）\n__wallbanging__ （穿墙）\n__forcebuy__ （强起/全装）\n__full save__ （不要买任何装备）\n__save__ （保枪）\n__spike__ （炸药包）\n__defuse__ （拆包）\n__tap__ （假拆）\n__off spike__ （假拆、没拆）\n__planting / plant__ （下包）\n__spike down__ （掉包）\n\n## 报点\n__heaven__ （高台或高地）\n__hell__ （洼地或高台下）\n__spawn [ attacker / defender ]__ [spɔːn][əˈtækər][dɪ'fendə(r)]（出生点 / t匪/ct警）\n__A/B main__ （A大 B大）\n__A/B short__ （A小 B小）\n__site__ （包点）\n__top/bottom site__ （包点上下方）\n__front/back site__ （包点前后）\n__default__ （默认下包位）\n__dice__ （正方体箱子）\n__generator / gene / gen__ [dʒiːn]（发电机）\n__window__ （窗口）\n__mid__ （中路）\n__top mid__ （中远）\n__bottom mid__ （中路近点）\n__stairs__ [sterz]（楼梯）\n__orb__ [ɔrb]（技能点位置）\n__close__ （right/left）__ （右/左）近点\n__cubbu / pocket__ （小角落）\n__cat / catwalk__ （一条很长的直径）\n__sewer__ （下水道/地势较低）\n__link__ （连接处）一般是 A to B / B to C / B to A等\n__nest__ （被包裹起来的较高空间）\n__pillar__ ['pɪlɚ]（柱子）\n","tags":["valorant"],"categories":["game"]},{"title":"VALORANT分数规则、经济规则","url":"/2025/04/18/valorantRules/","content":"## 分数规则\n#### 名词解释及算法\n> KDA：\nK kill 杀人\nD death 死亡\nA assist 助攻\n\n> ‌人数互换（Trade）‌：体现玩家在交换过程中的效率，即用自己或队友的牺牲换取对手的减员‌\n\n- __KDA__ = ( K + A ) / D\n- __KAST__ = ( 击杀 + 助攻 + 存活 + 人数互换 ) / 总回合数 * 100%\n- __ACS（平均战斗评分）__ = [（ 每回合伤害 ×1 ） + （ 击杀数 × 位次系数 ） + （ 连杀数 ×50 ） + （ 非伤害助攻 ×25 ）] ÷ 回合总数\n    - 每造成1点伤害得1分\n    - 根据剩余敌人的数量，击杀得分不同，敌方人数越多时的首个击杀加分越多，随着敌方人数减少逐步递减（150/130/110/90/70）\n    - 连续击败额外加分，小局每多击杀1人多+50分\n    - (伤害输出高、在关键时机击杀敌人，对Rating提升有帮助)\n    - 辅助队友的非伤害性助攻，包括奶妈治疗、闪光、混烟或者易伤等，会获得25分的加分，这些细节表现也会反映在Rating中\n\n> __Rating（技术得分）__  受KDA、平均战斗评分、其他因素等影响（玩家使用道具的效果、角色的治疗量以及每个回合所提供的回合贡献等因素也会影响Rating）\n\n---\n\n## 经济规则\n__击杀__ ：个人+ K x 200\n__下包__ ：全员+ 300 （拆包只加点数）\n__回合胜利__ ：全员+ 3000\n__回合失败__ ：全员+ 1900\n__回合连败2__ ：全员+ 2400 （连败多给500激励）\n__回合连败3__ ：全员+ 2900 （连败多给500激励，封顶2次也就是1000）\n\n> 保枪惩罚机制包含以下两种，【 经济 = K x 200 + 900 】，比死了少1000\n- `进攻` + `不下包` + `保枪`\n- `防守` + `包炸` + `保枪`\n如果死了，【 经济 = K x 200 + 保底1900 】\n_一般只在有2900及以上大枪才保枪，抵消惩罚经济_\n\n#### Eco(economy)即经济局：\n不买装备或者只起少量装备来攒钱，保证自己下一回合可以和对方打长枪局的做法\n例如之前提到的，手枪局失利方在第二回合不买装备，来保证自己第三回合能使用全甲长枪\n#### 强起局\n指在经济劣势的情况下，强行购买装备，以劣势装备和对方优势装备对拼的对局\n\n#### 半甲和全甲的性价比\n幻象：全甲15m开外能抗一枪头，半甲直接无；15m内半甲和全甲都是四枪身子，15m外全甲能多抗一枪\n暴徒：全甲与半甲没有区别\n间谍：全甲与半甲没有区别\n神射：全甲30m外能抗一枪头，其他没有区别\n除了在面对幻象和神射的中远距离时，半甲与全甲的区别不大","tags":["valorant"],"categories":["game"]},{"title":"ETCD备份恢复","url":"/2025/04/14/etcdBackupRestore/","content":"![](etcdBackupRestore/etcd_title.png)\n## 备份\n1. 创建测试pod\n```bash\nkubectl run test --image=nginx:1.7.9 --labels=\"app=test\"\nkubectl run test --image=nginx:1.7.9 --labels=\"app=test\" -n kube-system\n```\n2. 在etcd集群的每个节点上建立备份存放目录\n```bash\nmkdir -p /data/backup/etcd/backup_$(date +%Y%m%d)\n```\n__使用kubeadm创建的k8s集群，etcd是使用容器运行的，因此备份和还原数据库需要将容器中的etcdctl命令拷贝到操作节点系统下的/usr/bin/目录下__\n```bash\ndocker cp $(docker ps  |  grep -v etcd-mirror | grep -w etcd | awk '{print $1}'):/usr/local/bin/etcdctl /usr/bin/\n```\n\n3. 备份ETCDCTL_API为3的etcd数据到步骤2建立的备份目录下（替换ip为主机ip）\n   只需要备份一个master节点数据就可以了，数据备份后打包传到其他etcd节点上\n```bash\n# 备份\nETCDCTL_API=3 etcdctl snapshot save /data/backup/etcd/backup_$(date +%Y%m%d)/snap-$(date +%Y%m%d).db --endpoints 11.0.1.9:2379 --cert=\"/etc/kubernetes/pki/etcd/server.crt\" --key=\"/etc/kubernetes/pki/etcd/server.key\" --cacert=\"/etc/kubernetes/pki/etcd/ca.crt\"\n\n# 传到其他etcd节点上\nscp /data/backup/etcd/backup_$(date +%Y%m%d)/snap-$(date +%Y%m%d).db root@11.0.1.6:/data/backup/etcd/backup_$(date +%Y%m%d)/\nscp /data/backup/etcd/backup_$(date +%Y%m%d)/snap-$(date +%Y%m%d).db root@11.0.1.7:/data/backup/etcd/backup_$(date +%Y%m%d)/\n```\n\n__定时备份脚本__\n```bash\n[root@master ~]# vim /data/backup/etcd/etcd_backup.sh\n#!/usr/bin/bash\n \ndate;\nCERT=\"/etc/kubernetes/pki/etcd/server.crt\"\nEKY=\"/etc/kubernetes/pki/etcd/server.key\"\nCACERT=\"/etc/kubernetes/pki/etcd/ca.crt\"\n# 注意替换为主机IP\nENDPOINTS=\"11.0.1.9:2379\"\n \nETCDCTL_API=3 /usr/bin/etcdctl \\\n--cacert=\"${CACERT}\" --cert=\"${CERT}\" --key=\"${EKY}\" \\\n--endpoints=${ENDPOINTS} \\\nsnapshot save /data/backup/etcd/backup_`date +%Y%m%d`/snap-`date +%Y%m%d`.db\n \n# 备份保留7天\n# -mtime -1表示，mtime在1天之内的文件，单位是天\n# 而-mtime +10表示mtime在10天以上的文件\n# 还有用法：-mmin -10，表示mtime在10分钟内的文件\n# 有时候也可以不加+或-，比如-mtime 10，这表示正好为10天，此用法比较少\nfind /data/backup/etcd/ -name \"*.db\" -mtime +7 -exec rm -f {} \\;\n \n# 同步到其他两个etcd节点\n/bin/rsync -avpgolr --delete /data/backup/etcd/backup_`date +%Y%m%d`/ root@11.0.1.6:/data/backup/etcd/backup_`date +%Y%m%d`/\n/bin/rsync -avpgolr --delete /data/backup/etcd/backup_`date +%Y%m%d`/ root@11.0.1.7:/data/backup/etcd/backup_`date +%Y%m%d`/\n```\n```bash\n[root@master ~]# chmod 755 /data/backup/etcd/etcd_backup.sh\n[root@master ~]# crontab -l\n#etcd集群数据备份 每天凌晨5点执行备份\n0 5 * * * /bin/bash -x /data/backup/etcd/etcd_backup.sh > /dev/null 2>&1\n```\n\n## 恢复\n1. 模拟删除测试pod\n```bash\nkubectl delete pod test\nkubectl delete pod test -n kube-system\n```\n2. 停掉etcd集群全部节点的kube-apiserver和etcd，防止再有数据写入etcd。\n   _（由于kube-apiserver和etcd属于静态pod，是由kubelet创建，所以需要将/etc/kubernetes/manifests/下的yaml文件移除，让其不可用）_\n```bash\nmv /etc/kubernetes/manifests /etc/kubernetes/manifests.bak\n```\n3. 查看etcd、api是否up，等待全部停止\n```bash\ndocker ps |grep -E \"apiserver|etcd\"\n```\n4.  重命名manifests目录后，无法再获取到pods了\n    可以发现manifests目录的重要性，因此建议对此目录也进行定期备份\n```bash\nkubectl get pods -A\n```\n5. 移除etcd服务实例的数据目录，在etcd集群的全部节点执行\n```bash\nmv /var/lib/etcd /var/lib/etcd.bak\n```\n6. 恢复etcd数据，etcd集群用同一份snapshot恢复，在etcd集群的全部节点依次执行\n```bash\n## 单集群演示\nETCDCTL_API=3 etcdctl snapshot restore /data/backup/etcd/backup_20220913/snap-20220913.db --data-dir=/var/lib/etcd --endpoints 11.0.1.9:2379 --cert=\"/etc/kubernetes/pki/etcd/server.crt\" --key=\"/etc/kubernetes/pki/etcd/server.key\" --cacert=\"/etc/kubernetes/pki/etcd/ca.crt\"   \n\n## 多集群\n# 在master1执行\nETCDCTL_API=3 etcdctl snapshot restore /data/backup/etcd/backup_20220913/snap-20220913.db \\\n    --endpoints=11.0.1.9:2379 \\\n    --name=master1 \\\n    --cert=/etc/kubernetes/pki/etcd/server.crt \\\n    --key=/etc/kubernetes/pki/etcd/server.key \\\n    --cacert=/etc/kubernetes/pki/etcd/ca.crt \\\n    --initial-advertise-peer-urls=https://11.0.1.9:2380 \\\n    --initial-cluster-token=etcd-cluster-0 \\\n    --initial-cluster=master1=https://11.0.1.9:2380,master2=https://11.0.1.6:2380,master3=https://11.0.1.7:2380 \\\n    --data-dir=/var/lib/etcd\n # 在master2执行\n ETCDCTL_API=3 etcdctl snapshot restore /data/backup/etcd/backup_20220909/snap-202209091110.db \\\n    --endpoints=11.0.1.6:2379 \\\n    --name=master2 \\\n    --cert=/etc/kubernetes/pki/etcd/server.crt \\\n    --key=/etc/kubernetes/pki/etcd/server.key \\\n    --cacert=/etc/kubernetes/pki/etcd/ca.crt \\\n    --initial-advertise-peer-urls=https://11.0.1.7:2380 \\\n    --initial-cluster-token=etcd-cluster-0 \\\n    --initial-cluster=master1=https://11.0.1.9:2380,master2=https://11.0.1.6:2380,master3=https://11.0.1.7:2380 \\\n    --data-dir=/var/lib/etcd\n # 在master3执行\n  ETCDCTL_API=3 etcdctl snapshot restore /data/backup/etcd/backup_20220913/snap-20220913.db \\\n    --endpoints=11.0.1.7:2379 \\\n    --name=master2 \\\n    --cert=/etc/kubernetes/pki/etcd/server.crt \\\n    --key=/etc/kubernetes/pki/etcd/server.key \\\n    --cacert=/etc/kubernetes/pki/etcd/ca.crt \\\n    --initial-advertise-peer-urls=https://11.0.1.7:2380 \\\n    --initial-cluster-token=etcd-cluster-0 \\\n    --initial-cluster=master1=https://11.0.1.9:2380,master2=https://11.0.1.6:2380,master3=https://11.0.1.7:2380 \\\n    --data-dir=/var/lib/etcd\n```\n7. 恢复manifests，静态pod会自动重建kube-apiserver和etcd\n```bash\nmv /etc/kubernetes/manifests.bak /etc/kubernetes/manifests\n```\n8. 查看集群是否恢复正常\n```bash\nkubectl get pod -A\nkubectl get cs\n```\n\n---\n\n## etcdctl命令参考\n```bash\n# 一些etcdctl命令供参考\n# 以表格的形式查看健康状态\nETCDCTL_API=3 etcdctl endpoint status -w table --endpoints 11.0.1.9:2379 --cert=\"/etc/kubernetes/pki/etcd/server.crt\"  --key=\"/etc/kubernetes/pki/etcd/server.key\"  --cacert=\"/etc/kubernetes/pki/etcd/ca.crt\"\n# 查看成员信息\nETCDCTL_API=3 etcdctl member list --write-out=table --endpoints 11.0.1.9:2379 --cert=\"/etc/kubernetes/pki/etcd/server.crt\"  --key=\"/etc/kubernetes/pki/etcd/server.key\"  --cacert=\"/etc/kubernetes/pki/etcd/ca.crt\"\n# 查看key\nECDCTL_API=3 etcdctl get / --prefix --keys-only --endpoints 11.0.1.9:2379 --cert=\"/etc/kubernetes/pki/etcd/server.crt\"  --key=\"/etc/kubernetes/pki/etcd/server.key\"  --cacert=\"/etc/kubernetes/pki/etcd/ca.crt\"\n# 查看节点\nETCDCTL_API=3 etcdctl get /registry/minions/ --prefix --keys-only --endpoints 11.0.1.9:2379 --cert=\"/etc/kubernetes/pki/etcd/server.crt\"  --key=\"/etc/kubernetes/pki/etcd/server.key\"  --cacert=\"/etc/kubernetes/pki/etcd/ca.crt\" \n# 查看pod\nETCDCTL_API=3 etcdctl get /registry/pods/ --prefix --keys-only --endpoints 11.0.1.9:2379 --cert=\"/etc/kubernetes/pki/etcd/server.crt\"  --key=\"/etc/kubernetes/pki/etcd/server.key\"  --cacert=\"/etc/kubernetes/pki/etcd/ca.crt\" \n# 查看健康状态\nETCDCTL_API=3 etcdctl endpoint health --endpoints 11.0.1.9:2379 --cert=\"/etc/kubernetes/pki/etcd/server.crt\"  --key=\"/etc/kubernetes/pki/etcd/server.key\"  --cacert=\"/etc/kubernetes/pki/etcd/ca.crt\"\n``` \n\n---\n\n[etcdctl x86文件](etcd-v3.5.11-linux-amd64.tar.gz)","tags":["etcd","k8s"],"categories":["notes"]},{"title":"ETCD单点故障恢复","url":"/2025/04/14/etcdSNRecovery/","content":"## 问题描述\netcd挂载目录硬盘损坏，/var/lib/etcd目录丢失，导致master1上的etcd异常\n硬盘恢复后，重新创建逻辑卷，创建目录，重新挂载\n![](etcdSNRecovery/etcd_lv.png)\n\n## 解决处理\n挂载后恢复etcd\n```bash\n# 1. 首先停止etcd服务，否则会一直生成data目录\nsystemctl stop etcd\n# 2. 移除data目录，新建data目录\ncd /var/lib/etcd\nmv data data.bak\nmkdir data\n# 3. 修改etcd服务配置文件\nvim /etc/systemd/system/etcd.service\n--initial-cluster-state=existing \\\n# 4. 重启etcd\nsystemctl daemon-reload\nsystemctl restart etcd\n# 5. 检查etcd集群状态\nETCDCTL_API=3 etcdctl endpoint status -w table --endpoints ip屏蔽.ip屏蔽.ip屏蔽.1:2379,ip屏蔽.ip屏蔽.ip屏蔽.2:2379,ip屏蔽.ip屏蔽.ip屏蔽.3:2379 --cert=\"/var/lib/etcd/certs/etcd.pem\"  --key=\"/var/lib/etcd/certs/etcd-key.pem\" --cacert=\"/var/lib/etcd/certs/ca.pem\"\n```\n![](etcdSNRecovery/etcd_config.png)\n\n---\n\n> etcdctl文件见【ETCD备份恢复文章】↓\n> {% postLinkCard ETCD备份恢复 \"auto\" %}","tags":["etcd","k8s"],"categories":["FAQ"]},{"title":"正则表达式备忘","url":"/2025/04/11/regularExpressionNote/","content":"## 语法参考\n```bash\n. # 除换行符以外的所有字符\n^ # 字符串开头\n$ # 字符串结尾\n\\d \\w \\s # 匹配数字、字符、空格\n\\D \\W \\S # 匹配非数字、非字符、非空格\n[abc] # 匹配a、b或c中的一个字母\n[a-z] # 匹配a到z中的一个字母\n[^abc] # 匹配除了a、b和c中的其他字母\naa|bb # 匹配aa或bb\n? # 0或1次匹配\n* # 匹配0次或多次\n+ # 匹配1次或多次\n{n} # 匹配n次\n{n,} # 匹配n次以上\n{m,n} # 匹配最少m次，最多n次\n(expr) # 捕获expr子模式以\\1使用它\n(?:expr) # 忽略捕获的子模式\n(?=expr) # 正向预查模式expr\n(?!expr) # 负向预查模式expr\n```\n\n---\n\n- 查找数字\n```bash\n# 数字\n^[0-9]*$\n# n位的数字\n^\\d{n}$\n#至少n位的数字\n^\\d{n,}$\n# m-n位的数字\n^\\d{m,n}$\n# 零和非零开头的数字\n^(0|[1-9][0-9]*)$\n# 非零开头的最多带两位小数的数字\n^([1-9][0-9]*)+(\\.[0-9]{1,2})?$\n# 带1-2位小数的正数或负数\n^(\\-)?\\d+(\\.\\d{1,2})$\n# 正数、负数、和小数\n^(\\-|\\+)?\\d+(\\.\\d+)?$\n# 有两位小数的正实数\n^[0-9]+(\\.[0-9]{2})?$\n# 有1~3位小数的正实数\n^[0-9]+(\\.[0-9]{1,3})?$\n# 非零的正整数\n^[1-9]\\d*$ 或 ^([1-9][0-9]*){1,3}$ 或 ^\\+?[1-9][0-9]*$\n# 非零的负整数\n^\\-[1-9][]0-9\"*$ 或 ^-[1-9]\\d*$\n# 非负整数\n^\\d+$ 或 ^[1-9]\\d*|0$\n# 非正整数\n^-[1-9]\\d*|0$ 或 ^((-\\d+)|(0+))$\n# 非负浮点数\n^\\d+(\\.\\d+)?$ 或 ^[1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*|0?\\.0+|0$\n# 非正浮点数\n^((-\\d+(\\.\\d+)?)|(0+(\\.0+)?))$ 或 ^(-([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*))|0?\\.0+|0$\n# 正浮点数\n^[1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*$ 或 ^(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*))$\n# 负浮点数\n^-([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*)$ 或 ^(-(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*)))$\n# 浮点数\n^(-?\\d+)(\\.\\d+)?$ 或 ^-?([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*|0?\\.0+|0)$\n```\n- 查找字符\n```bash\n# 汉字\n^[\\u4e00-\\u9fa5]{0,}$\n# 英文和数字\n^[A-Za-z0-9]+$ 或 ^[A-Za-z0-9]{4,40}$\n# 长度为3-20的所有字符\n^.{3,20}$\n# 由26个英文字母组成的字符串\n^[A-Za-z]+$\n# 由26个大写英文字母组成的字符串\n^[A-Z]+$\n# 由26个小写英文字母组成的字符串\n^[a-z]+$\n# 由数字和26个英文字母组成的字符串\n^[A-Za-z0-9]+$\n# 由数字、26个英文字母或者下划线组成的字符串\n^\\w+$ 或 ^\\w{3,20}$\n# 中文、英文、数字包括下划线\n^[\\u4E00-\\u9FA5A-Za-z0-9_]+$\n# 中文、英文、数字但不包括下划线等符号\n^[\\u4E00-\\u9FA5A-Za-z0-9]+$ 或 ^[\\u4E00-\\u9FA5A-Za-z0-9]{2,20}$\n# 可以输入含有^%&',;=?$\\\"等字符\n[^%&',;=?$\\x22]+\n# 禁止输入含有~的字符\n[^~]+\n```\n- 特殊常用查找\n```bash\n# Email地址\n^\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$\n# 域名\n[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(\\.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+\\.?\n# InternetURL\n[a-zA-z]+://[^\\s]* 或 ^http://([\\w-]+\\.)+[\\w-]+(/[\\w-./?%&=]*)?$\n# 手机号码\n^(13[0-9]|14[01456879]|15[0-35-9]|16[2567]|17[0-8]|18[0-9]|19[0-35-9])\\d{8}$\n# 电话号码(\"XXX-XXXXXXX\"、\"XXXX-XXXXXXXX\"、\"XXX-XXXXXXX\"、\"XXX-XXXXXXXX\"、\"XXXXXXX\"和\"XXXXXXXX)\n^(\\(\\d{3,4}-)|\\d{3.4}-)?\\d{7,8}$\n# 国内电话号码(0511-4405222、021-87888822)\n\\d{3}-\\d{8}|\\d{4}-\\d{7}\n# 电话号码正则表达式（支持手机号码，3-4位区号，7-8位直播号码，1－4位分机号）: ((\\d{11})|^((\\d{7,8})|(\\d{4}|\\d{3})-(\\d{7,8})|(\\d{4}|\\d{3})-(\\d{7,8})-(\\d{4}|\\d{3}|\\d{2}|\\d{1})|(\\d{7,8})-(\\d{4}|\\d{3}|\\d{2}|\\d{1}))$)\n# 身份证号(15位、18位数字)，最后一位是校验位，可能为数字或字符X\n(^\\d{15}$)|(^\\d{18}$)|(^\\d{17}(\\d|X|x)$)\n# 帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)\n^[a-zA-Z][a-zA-Z0-9_]{4,15}$\n# 密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)\n^[a-zA-Z]\\w{5,17}$\n# 强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在 8-10 之间)\n^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[a-zA-Z0-9]{8,10}$\n# 强密码(必须包含大小写字母和数字的组合，可以使用特殊字符，长度在8-10之间)\n^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,10}$\n# 日期格式\n^\\d{4}-\\d{1,2}-\\d{1,2}\n# 一年的12个月(01～09和1～12)\n^(0?[1-9]|1[0-2])$\n# 一个月的31天(01～09和1～31)\n^((0?[1-9])|((1|2)[0-9])|30|31)$\n# xml文件\n^([a-zA-Z]+-?)+[a-zA-Z0-9]+\\\\.[x|X][m|M][l|L]$\n# 中文字符的正则表达式\n[\\u4e00-\\u9fa5]\n# 双字节字符\n[^\\x00-\\xff] (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))\n# 空白行的正则表达式\n\\n\\s*\\r (可以用来删除空白行)\n# HTML标记的正则表达式\n<(\\S*?)[^>]*>.*?|<.*? /> ( 首尾空白字符的正则表达式\n^\\s*|\\s*$或(^\\s*)|(\\s*$) (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)\n# 腾讯QQ号\n[1-9][0-9]{4,} (腾讯QQ号从10000开始)\n# 中国邮政编码\n[1-9]\\d{5}(?!\\d) (中国邮政编码为6位数字)\n# IPv4地址\n((2(5[0-5]|[0-4]\\d))|[0-1]?\\d{1,2})(\\.((2(5[0-5]|[0-4]\\d))|[0-1]?\\d{1,2})){3}\n```\n- 部分钱的数字查找\n```bash\n# \"10000.00\"、\"10,000.00\"、\"10000\"、\"10,000\"\n^[1-9][0-9]*$\n# 任意一个不以0开头的数字\n^(0|[1-9][0-9]*)$\n# 0-1个0或以负号开头的数字\n^(0|-?[1-9][0-9]*)$\n# 带小数的数字\n^[0-9]+(.[0-9]+)?$\n# 带小数点且点后至少有一位数字，反例\"10.\"，例\"10\"、\"10.2\"\n^[0-9]+(.[0-9]{2})?$\n# 小数点后必须有两位\n^[0-9]+(.[0-9]{1,2})?$\n# 小数点后1或2位\n^[0-9]{1,3}(,[0-9]{3})*(.[0-9]{1,2})?$\n# 1到3个数字,后面跟着任意个逗号+3个数字,逗号成为可选,而不是必须\n^([0-9]+|[0-9]{1,3}(,[0-9]{3})*)(.[0-9]{1,2})?$\n```\n- 查找html的标签【id id=adn-A1】\n```bash\nid=[\\\"]^[a-z]{3}-[A-Z]{1}[0-9]{1}[\\\"]\n```\n- 查找【以12.开头】\n```bash\n^[0-9]{2}.\n```","tags":["regexp"],"categories":["study","notes"]},{"title":"FAQ - Windows","url":"/2025/04/11/faqWindows/","content":"## 清理dns缓存\n```bash\n# 以下路径配置主机名解析，以管理员打开\nC:\\Windows\\System32\\drivers\\etc\\hosts\n# 清理DNS缓存\n打开【命令提示符（管理员）】\nipconfig /flushdns\n```\n\n---\n\n## 定时关机\n```bash\n# 【windows+r】-输入以下命令\nshutdown -s -t 21600\n# 单位是秒（s）\n1分钟=60秒\n5分钟=300秒\n10分钟=600秒\n20分钟=1200秒\n30分钟=1800秒\n45分钟=2700秒\n1小时=3600秒\n1.5小时=5400秒\n2小时=7200秒\n2.5小时=9000秒\n3小时=10800秒\n3.5小时=12600秒\n4小时=14400秒\n4.5小时=16200秒\n5小时=18000秒\n5.5小时=19800秒\n6小时=21600秒\n```\n\n---\n\n## 修改桌面图标间距 - 注意是间距不是大小！！！\n有次改了下分辨率还是什么，切回来发现图标间距变大了，ctrl滑动滚动只能改变大小，不能改变间距。\n__解决__：修改注册表图标间距\n【win+r】-输入【regedit】\n【HKEY_CURRENT_USER】-【HKEY_CURRENT_USER\\Control Panel】-【HKEY_CURRENT_USER\\Control Panel\\Desktop】-【HKEY_CURRENT_USER\\Control Panel\\Desktop\\WindowMetrics】\n依次找到【IconSpacing】和【IconVerticalSpacing】修改对应的数据\n默认值应该是【-1125】\n修改为默认值后【注销用户重新登陆】恢复正常\n![](source/_posts/faqWindows/win_regedit_deskicon.png)\n> 算法：-15*间距像素值。举例，默认值为-1125，即表示水平间距为75像素（px）；如果想设置间距100像素，则将 IconSpacing 值修改为-1500","tags":["windows"],"categories":["FAQ"]},{"title":"K8s备忘 - 下","url":"/2025/04/11/k8sNote2/","content":"## 调度\n#### 简介\nScheduler是k8s的调度器，主要任务是定义的pod分配到集群的节点上\n#### 调度原则\n- 公平：保证每个节点都能被分配资源\n- 资源高效利用：集群所有资源最大化被使用\n- 效率：调度的性能要好，能够尽快地对大批量的pod完成调度工作\n- 灵活：允许用户根据自己的需求控制调度的逻辑\nScheduler是作为单独的程序运行的，启动之后会一直坚挺（持续连接）APIServer，获取PodSpec.NodeName为空的pod，对每个pod都会创建一个binding，表明该pod应该放到哪个节点上\n指定了PodSpec.NodeName后scheduler不需要参与进来，除此外都会参与\n-#### 调度过程\n调度分为几个部分：首先是predicate（预选）：过滤掉`不满足条件`的节点；然后是priority（优选）：对通过的节点按照`优先级`排序；最后是从中选择优先级最高的节点，如果中间任何一步有错，则直接返回错误\n【Predicate常见算法】\n- PodFitsResources：节点上剩余的资源是否大于pod请求的资源\n- PodFitsHost：如果pod指定了NodeName，检查节点名称是否和NodeName匹配\n- PodFitsHostPorts：节点上已经使用的port是否和pod申请的port冲突\n- PodSelectorMatches：过滤掉和pod指定的label不匹配的节点\n- NoDiskConflict：已经mount的volume和pod指定的volume不冲突，除非他们都是只读\n\n如果在predicate过程中没有合适的节点，pod会一直在pending状态，不断重试调度，直到有节点满足条件。\n经过这个步骤，如果有多个节点满足条件，就继续priorities过程：按照优先级大小对节点排序：\n【优先级】由键值对组成，键是名称，值是权重：\n- LeastRequestedPriority：通过计算CPU和Memory的使用率来决定权重，使用率越低权重越高，换句话说，这个优先级指标倾向于`资源使用比例更低`的节点\n- BalancedResourceAllocation：节点上CPU和Memory`使用率越近，权重越高`。这个应该和上面的一起使用，不应该单独使用\n- ImageLocalityPriority：倾向于已经有要使用镜像的节点，镜像总大小值越大，权重越高\n通过算法对所有的优先级项目和权重进行计算，得出最终的结果\n#### 自定义调度器\n（不满足于官方提供的调度器，可自行编写）\n通过`spec:schedulername`参数指定调度器的名称，可以为pod选择某个调度器进行调度，比如下面的pod选择my-scheduler进行调度。而不是默认的default-scheduler：\n```yml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: annotation-second-scheduler\n  labels:\n    name: mulischeduler-example\nspec:\n  schedulername: my-scheduler\n  containers:\n  - name: pod-with-second-annotation-container\n    image: gcr.io/google_containers/pause:2.0\n```\n#### 调度亲和性\n##### 节点亲和性（pod和node间）\n`pod.spec.nodeAffinity`下声明\n- preferredDuringSchedulingIgnoredDuringExecution：软策略\n- requiredDuringSchedulingIgnoredDuringExecution：硬策略\n> 举例：分班级，我更倾向于张三老师的班级，如果我是pod，张三老师就是node，这就是所谓的节点亲和性。有个说法就是，我必须去 硬策略、我想去，典型的软策略\n\n```yml\n## 硬策略：不满足就不运行\napiVersion: v1\nkind: Pod\nmetadata:\n  name: affinity\n  labels:\n    app: node-affinity-pod\nspec:\n  containers:\n  - name: with-node-affinity\n    image: hub.jade.com/library/myapp:v1\n  affinity:\n    nodeAffinity:\n      requiredDuringSchedulingIgnoreDuringExecution:\n        nodeSelectorTerms:\n        # notin 只要不是kubernetes.io/hostname标签，值为k8s-node02的节点就行\n        - matchExpressions:\n          - key: kubernetes.io/hostname\n            operator: NotIn\n            values:\n            - k8s-node02\n# 结果始终运行在node02\n          \n## 软策略：如果有的话就运行，没有就算了\napiVersion: v1\nkind: Pod\nmetadata:\n  name: affinity\n  labels:\n    app: node-affinity-pod\nspec:\n  containers:\n  - name: with-node-affinity\n    image: hub.jade.com/library/myapp:v1\n  affinity:\n    nodeAffinity:\n      preferredDuringSchedulingIgnoredDuringExecution:\n      - weight: 1\n        prefernece:\n          matchExpressions:\n          - key: kubernetes.io/hostname\n            operator: In\n            values:\n            - k8s-node03\n# 结果 不存在node03，到node01上运行\n            \n## 合体：先满足硬策略再满足软策略\napiVersion: v1\nkind: Pod\nmetadata:\n  name: affinity\n  labels:\n    app: node-affinity-pod\nspec:\n  containers:\n  - name: with-node-affinity\n    image: hub.jade.com/library/myapp:v1\n  affinity:\n    nodeAffinity:\n      requiredDuringSchedulingIgnoreDuringExecution:\n        nodeSelectorTerms:\n        - matchExpressions:\n          - key: kubernetes.io/hostname\n            operator: NotIn\n            values:\n            - k8s-node02\n      preferredDuringSchedulingIgnoredDuringExecution:\n      - weight: 1\n        preference:\n          matchExpressions:\n          - key: kubernetes.io/hostname\n            operator: In\n            values:\n            - k9s-node03\n```\n【键值运算关系】：\n- In：label的值在某个列表中\n- NotIn：label的值不在某个列表中\n- Gt：label的值大于某个值\n- Lt：label的值小于某个值\n- Exists：某个label存在\n- DoesNotExist：某个label不存在\n_如果nodeSelectorTerms下面有多个选项的话，满足任何一个条件就可以了_\n_如果matchExpressions有多个选项，则必须同时满足这些条件才能正常调度pod_\n##### Pod亲和性（pod和pod间）\n`pod.spec.affinity.podAffinity/podAntiAffinity`下声明\n- preferredDuringSchedulingIgnoredDuringExecution：软策略\n- requiredDuringSchedulingIgnoredDuringExecution：硬策略\n> 举例：原来同桌叫李四，我想和李四一个班级，这就是pod亲和性，李四在的班级我一定要去 硬策略，一不去不行；李四在的班级我想去 软策略，想的概念就是不去也可以\n\n```yml\n# 首先新建一个在node01上的pod-1\n# 然后创建pod-3利用亲和性和pod1在一个node\napiVersion: v1\nking: Pod\nmetadata:\n  name: pod-3\n  labels:\n    app: pod-3\nspec:\n  containers:\n  - name: pod-3\n    image: hub.jade.com/library/myapp:v1\n  affinity:\n    podAffinity:# 想让两个pod运行在同一个node用pod亲和性\n      requiredDuringSchedulingIgnoreDuringExecution:\n      - labelSelector:\n          matchExpressions:\n          - key: app\n            operator: In\n            values:\n            - node01\n            # 当pod标签app存在pod-1时就选择，不存在就不运行\n        topologykey: kubernetes.io/hostname # 通过这个值判断两个pod是否在同一node上\n    podAntiAffinity:# 不想让两个pod运行在同一个node上用pod反亲和性\n      preferredDuringSchedulingSchedulingIgnoreDuringExecution:\n      - weight: 1\n        podAffinityTerm:\n          labelSelector:\n            matchExpressions:\n            - key: app\n              operator: In\n              values:\n              - node01\n```\n##### 亲和性/反亲和性调度策略比较如下：\n(同一拓扑域：同一labels下)\n\n| 调度策略 | 匹配标签 | 操作符 | 拓扑域支持 | 调度目标 |\n| :--- | :---: | :--- | :---: | :--- |\n| nodeAffinity | 主机 | In<br>NotIn<br>Exists<br>DoesNotExist<br>Gt<br>Lt | 否 | 指定主机 |\n| podAffinity | POD | In<br>NotIn<br>Exists<br>DoesNotExist | 是 | pod与指定pod同一拓扑域 |\n| podAnitAffinity | POD | In<br>NotIn<br>Exists<br>DoesNotExist | 是 | pod与指定pod不在同一拓扑域 |\n\n#### Taint和Toleration\n节点亲和性，是pod的一种属性（偏好或硬性要求），它使pod被吸引到一类特定的节点\nTaint则相反，是node的属性，它`使节点能够排斥一类特定的pod`\nTaint和toleration相互配合，可以用来避免pod被分配到不合适的节点上。每个节点上都可以应用一个或多个taint，这表示对于那些不能容忍这些taint的pod，是不会被该节点接受的。如果将toleration应用于pod上，则表示这些pod可以（但不要求）被调度到具有匹配taint的节点上\n(举例：相亲，有些人不喜欢对方打呼，容忍不了)\n##### 污点（Taint）\n__污点的组成__\n使用`kubectl taint`命令可以给某个node设置污点，Node被设置上污点之后就和pod之间存在了一种互斥的关系，可以让Node拒绝Pod的调度执行，甚至将Node已经存在的Pod驱逐出去\n每个污点的组成如下\n```yml\nkey=value:effect\n# 每个污点有一个key和value作为污点的标签，其中value可为空，effect描述污点的作用\n```\n当前taint effect支持如下三个选项：\n- NoSchedule：表示k8s将不会调度到具有该污点的node上；master节点天生就被打了这个污点标签，所以pod不会运行到master上\n- PreferNoSchedule：表示k8s将尽量避免将pod调度到具有该污点的node上\n- NoExecute：表示k8s将不会将pod调度到具有该污点的node上，同时会将node上已经存在的Pod驱逐出去\n\n__污点的设置、查看和去除__\n```bash\n# 设置污点\nkubectl taint nodes node1 key1=value1:NoSchedule\n\n# 节点说明中查找Taints字段\nkubectl describe pod pod-name\n\n# 去除污点\nkubectl taint nodes node1 key1:NoSchedule-\n```\n##### 容忍（Tolerations）\n设置了污点的node将根据taint的effect：NoSchedule、PreferNoSchedule、NoExecute和pod之间产生互斥的关系，pod将在一定程度上不会被调度到node上，\n但我们可以在pod上设置容忍（Toleration），意思是设置了容忍的pod将可以容忍污点的存在，可以被调度到存在污点的node上\n`pod.spec.tolerations`\n```yml\ntolerations:\n- key: \"key1\"\n  operator: \"Equal\"\n  value: \"value1\"\n  effect: \"NoSchedule\"\n  tolerationSeconds: 3600\n- key: \"key1\"\n  operator: \"Equal\"\n  value: \"value1\"\n  effect: \"NoExecute\"\n- key: \"key2\"\n  operator: \"Exists\"\n  effect: \"NoSchedule\"\n```\n- 其中key、value、effect要与Node上设置的taint保持一致\n- operator的值为Exists将会忽略value值\n- tolerationSeconds用于描述当pod需要被驱逐时可以在pod上继续保留运行的时间\n```bash\n# 1.当不指定key时，表示容忍所有的污点key\ntolerations:\n- operator: \"Exists\"\n# 2.当不指定effect值时，表示容忍所有的污点作用\ntolerations:\n- key: \"key\"\n  operator: \"Exists\"\n# 3.有多个master存在时，防止资源浪费，可以设置如下\nkubectl taint nodes Node-Name node-role.kubernetes.io/master=:PreferNoSchedule # 尽可能不在该节点运行\n```\n#### 指定调度节点\npod.spec.nodeName将pod直接调度到指定的node节点上，会跳过Scheduler的调度策略，该匹配规则是强制匹配\n```yml\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: myweb\nspec:\n  replicas: 7\n  template:\n    metadata:\n      label:\n        app:myweb\n    spec:\n      nodeName: k8s-node01\n      containers:\n      - name: myweb\n        image: hub.jade.com/library/myapp:v1\n        ports:\n        - containerPort: 80\n```\npod.spec.nodeSelector：通过kubernetes的label-selector机制选择节点，由调度器调度策略匹配label，而后调度pod到目标节点，该匹配规则属于强制约束\n```bash\n# 没有匹配标签会一直peding\nkubectl label node k8s-node01 disk=ssd\n\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: myweb2\nspec:\n  replicas: 2\n  template:\n    metadata:\n      label:\n        app:myweb2\n    spec:\n      nodeSelector:\n        disk: ssd\n      containers:\n      - name: myweb2\n        image: hub.jade.com/library/myapp:v1\n        ports:\n        - containerPort: 80\n```\n\n---\n\n## 安全\n#### 机制说明\nk8s作为一个分布式集群的管理工具，保证集群的安全性是一个重要的任务\napiServer是集群内部各个组件通信的中介，也是外部控制的入口。\n所以k8s的安全机制基本就是围绕保护apiServer来设计的\nk8s使用了认证(Authentication)、鉴权(Authorization)、准入控制(Admission Control)三步来保证APIServer的安全\n![](source/_posts/k8sNote1/k8s_apiserver.png)\n#### 认证（Authentication）\n![](source/_posts/k8sNote1/k8s_auth.png)\n- HTTP Token认证：通过一个Token来识别合法用户\n    - HTTP Token的认证是用一个很长的特殊编码方式且难以被模仿的字符串-Token来表达客户的一种方式\n      每一个token对应一个用户名存储在APiServer能访问的文件中，当客户端发起API调用请求时，需要在HTTP Header里放入Token\n- HTTP Base认证：通过用户名+密码的方式认证\n    - 用户名+:+密码 用base64算法进行编码后的字符串放在HTTP Request中的Heather Authorization域里发送给服务端，服务端收到后进行编码，获取用户名及密码\n- HTTPS证书认证（最严格的）：基于CA根证书签名的客户端身份认证方式（服务端客户端双向认证）\n##### HTTPS证书认证\n![](source/_posts/k8sNote1/k8s_auth_https.png)\n##### 需要认证的节点\n![](source/_posts/k8sNote1/k8s_auth_node.png)\n__两种类型__\n- k8s组件对APIServer的访问：kubectl、ControllerManager、Scheduler、Kubelet、Kube-proxy\n- k8s管理的pod对容器的访问：Pod（dashboard也是以pod形式运行）\n\n__安全性说明__\n- （本机访问）ControllerManager、Scheduler与APIServer在同一台机器，所以直接使用APIServer的非安全端口访问，--insecure-bind-address=127.0.0.1\n- （远程访问，需防止第三方攻击）kubectl、kubelet、kube-proxy访问APIServer就都需要证书进行HTTPS双向认证\n\n__证书颁发__\n- 手动签发：通过k8s集群的根ca进行签发HTTPS证书（kubeadm安装，不涉及手动，都是自动）\n- 自动签发：kubelet首次访问APIServer时，使用token做认证，通过后，ControllerManager会为kubelet生产一个证书，以后的访问都是用证书做认证了\n\n##### kubeconfig\nkubeconfig文件包含集群参数（CA证书、APIServer地址），客户端参数（上面生成的证书和私钥），集群context信息（集群名称、用户名）\nk8s组件通过启动时指定不同的kubeconfig文件可以切换到不同的集群\n【位置】：.kube\n\n##### ServiceAccount\npod中的容器访问APIServer，因为pod的创建销毁是动态的，所以要为pod手动生成证书不可行，\n\n##### Secret和SA关系\nk8s设计了一种资源对象叫做Secret，分为两类，一种是用于sa的service-accout-token，另一种是用于保存用户自定义保密信息的Opaque\nsa中用到包含三个部分：Token、ca.crt、ns\n- token：使用apiserver私钥签名的JWT，用于访问apiServer时服务端认证\n- ca.crt：根证书，用于client端验证APIServer发送的证书\n- ns：标识这个service-account-token的作用域名空间\n> Json web token（JWT）：是为了在网络应用环境间传递声明而执行的一种基于JSON的开放标准（[RFC 7519]），该token被设计为紧凑且安全的，特别适用于分布式站点的单点登录（SSO）场景。JWT的声明一般被用来在身份提供者和服务提供者间传递被认证的用户身份信息，以便于从资源服务器获取资源，也可以增加一些额外的其它业务逻辑所必须的声明信息，该token也可直接被用于认证，也可被加密\n\n```bash\nkubectl get secret --all-namespaces\nkubectl describe secret default-token-5gm9r --namespace=kube-system\n```\n\n默认情况下，每个ns都会有一个sa，如果pod在创建时没有指定sa，就会使用pod所属的ns的sa\n`默认挂载目录：/run/secrets/kubernetes.io/serviceaccount/`\n\n#### 鉴权（Authorization）\n认证通过后并不意味着拥有访问资源的可能，还需鉴权后才能有访问具体对象的能力\n上面认证过程，只是确认通信的双方都确认了对方是可信的，可以相互通信\n而鉴权，是确定请求方有哪些资源的权限\n##### API Server目前支持一下几种授权策略\n（通过API Server的启动参数--authorization-mode设置）\n- AlwaysDeny：表示拒绝所有请求，一般用于测试\n- AlwaysAllow：允许接收所有请求，如果集群不需要授权流程，则可以采用该策略\n- ABAC（Attribute-Based Access Control）：基于属性的访问控制，表示使用用户配置的授权规则对用户请求进行匹配和控制\n- Webhook：通过调用外部REST服务对用户进行授权\n- RBAC（Role-Based Access Control）：基于角色的访问控制，现行默认规则\n\n##### RBAC授权模式\nRBAC（Role-Based Access Control）：基于角色的访问控制，在k8s1.5中引入，现行版本成为默认标准，相对其他访问控制方式，拥有一下优势：\n- 对集群中的资源和非资源均拥有完整的覆盖\n- 整个RBAC完全由几个API对象完成，同其他API对象一样，可以用kubectl或API进行操作\n- 可以在运行时进行调整，无需重启API Server（ABAC修改完还需重启）\n\n1. RBAC的API资源对象说明\nRBAC引入了4个新的顶级资源对象：Role、ClusterRole、RoleBinding、ClusterRoleBinding，4种对象类型均可以通过kubectl与API操作\n![](source/_posts/k8sNote1/k8s_auth_rbac.png)\n需要注意的是k8s并不会提供用户管理，那么User、Group、ServiceAccount指定的用户又是从哪里来的呢？\nKubernetes组件（kubectl、kube-proxy）或是其他自定义的用户在向CA申请证书时，需要提供一个证书请求文件\n```json\n# API Server会把客户端证书的CN字段作为User，把names.0字段作为Group\n\n{\n    \"CN\": \"admin\", # 用户名\n    \"hosts\": [],\n    \"key\": {\n        \"algo\": \"rsa\",\n        \"size\": 2048\n    },\n    \"names\": [\n    {\n        \"C\": \"CN\",\n        \"ST\": \"HangZhou\",\n        \"L\": \"XS\",\n        \"O\": \"system:masters\",# 组\n        \"OU\": \"System\"\n    }]\n}\n```\nkubelet使用TLS Bootstraping认证时，APIServer可以使用Bootstrap Tokens或者Token authentication file验证=token，无论哪一种，k8s都会为token绑定一个默认的User和Group\n\nPod使用sa认证时，service-account-token中JWT会保存User信息\n\n有了用户信息，再创建一对角色/角色绑定（集群角色/集群角色绑定）资源对象，就可以完成权限绑定了\n\n2. Role and ClusterRole\n在RBAC API中，Role表示一组规则权限，权限只会增加（累加），不存在一个资源一开始就有很多权限而通过RBAC对其进行减少的操作；Role可以定义在一个ns中，如果想要跨ns则可以创建ClusterRole\n```yml\nkind: Role\napiVersion: rbac.authorization.k8s.io/v1beta1\nmetadata:\n  namespace: default\n  name: pod-reader\nrules:\n- apiGroups: [\"\"] # \"\" indicates the core API group\n  resources: [\"pods\"]\n  verbs: [\"get\", \"watch\", \"list\"]\n  \nkubectl create role pod-reader --verb=get,watch,list --resource=pods\n```\n\nClusterRole具有与Role相同的权限角色控制能力，不同的是ClusterRole是集群级别的，ClusterRole可以用于：\n- 集群级别的资源控制（例如node访问权限）\n- 非资源型endpoints（例如/healthz访问）\n- 所有命名空间资源控制（例如pods）\n```yml\nkind: ClusterRole\napiVersion: rbac.authorization.k8s.io/v1beta1\nmetadata:\n  # \"namespace\" omitted since ClusterRoles are not namespaced\n  name: secret-reader\nrules:\n- apiGroups: [\"\"]\n  resources: [\"secrets\"]\n  verbs: [\"get\", \"watch\", \"list\"]\n  \nkubectl create clusterrole secret-reader --verb=get,watch,list --resource=secrets\n```\n\n3. RoleBinding and ClusterRoleBinding\nRoleBinding可以将角色中定义的权限授予用户或用户组\nRoleBinding包含一组权限列表（subjects），权限列表中包含有不同形式的待授予权限资源类型（users，groups，or service accounts）\nRoleBinding同样包含对被bind的role引用\nRoleBinding适用于某个ns内授权，而ClusterRoleBinding适用于集群范围内的授权\nrolebinding可以绑定role、clusterrole；clusterrolebinding只能绑定clusterrole\n\n将default命名空间的pod-reader Role授予jane用户，伺候jane用户在default ns中将具有pod-reader的权限\n```yml\nkind: RoleBinding\napiVersion: rbac.authorization.k8s.io/v1beta1\nmetadata:\n  name: read-pods\n  namespace: default\nsubjects:\n- kind: User\n  name: jane\n  apiGroup: rbac.authorization.k8s.io\nroleRef:\n  kind: Role\n  name: pod-reader\n  apiGroup: rbac.authorization.k8s.io\n```\n\nRoleBinding同样可以引用ClusterRole来对当前ns内用户、用户组或SA进行授权，这种操作允许集群管理员在整个集群内定义一些通用的ClusterRole，然后在不通的ns中使用RoleBinding来引用\n\n例如，以下RoleBinding引用了一个ClusterRole，这个ClusterROle具有整个集群内对secrets的访问权限；但是其授权用户dave只能访问development空间中的secrets（因为RoleBinding定义在develop命名空间）\n```yml\n# This role binding allows \"dave\" to read secrets in the \"deployment\" namespcae.\nkind: RoleBinding\napiVersion: rbac.authorization.k8s.io/v1beta1\nmetadata:\n  name: read-secrets\n  namespace: development # This only grants permissions within the \"development\" namespace.\nsubjects:\n- kind: User\n  name: dave\n  apiGroup: rbac.authorization.k8s.io\nroleRef:\n  kind: ClusterRole\n  name: secret-reader\n  apiGroup: rbac.authorization.k8s.io\n```\n\n使用ClusterRoleBinding可以对整个集群中的所有ns资源权限进行授权；以下ClusterRolebinding样例展示了授权manager组内所有用户在全部ns中对secrets进行访问\n```yml\n# This cluster role binding allows anyone in the \"manager\" group to read secrets in any namespace\nkind: ClusterRoleBinding\napiVersion: rbac.authorization.k8s.io/v1beta1\nmetadata:\n  name: read-secrets-global\nsubjects:\n- kind: Group\n  name: manager\n  apiGroup: tbac.authorization.k8s.io\nroleRef:\n  kind: ClusterRole\n  name: secret-reader\n  apiGroup: rbac.authorization.k8s.io\n```\n\n4. Resources\nk8s集群内一些资源一般以其名称字符串来表示，这些字符串一般会在API的URL地址中出现\n同时某些资源也会包含子资源，例如logs资源就属于pods的子资源，API中URL样例如下\n> GET /api/v1/namespaces/{namespace}/pods/{name}/log\n\n如果要在RBAC授权模型中控制这些子资源的访问权限，可以通过 / 分隔符来实现，以下是一个定义pods子资源logs访问权限的Role定义样例\n```yml\nkind: Role\napiVersion: rbac.authorization.k8s.io/v1beta1\nmetadata:\n  namespace: default\n  name: pod-and-pod-logs-reader\nrules:\n- apiGroups: [\"\"]\n  resources: [\"pods\", \"pods/log\"]\n  verbs: [\"get\", \"list\"]\n```\n\n5. to Subjects\nRoleBinding和ClusterRoleBinding可以将Role绑定到Subjects；\nSubjects可以是groups、users或者service accounts\n\nSubjects中Users使用字符串表示，它可以是一个普通的名字字符串，如\"alice\"；\n也可以是email格式的邮箱地址，如\"jade@qq.com\"\n甚至是一组字符串形式的数字ID\n但是Users的前缀system:是系统保留的，集群管理员应该确保普通用户不会使用这个前缀格式\n\nGroups书写格式与Users相同，都为一个字符串，并且没有特定的格式要求；同样system:前缀为系统保留\n\n##### 实践\n![](source/_posts/k8sNote1/k8s_auth_rbac_exam.png)\n创建一个用户只能管理dev空间\n```bash\n# 创建用户\nuseradd devuser\npasswd devuser\n\n# 创建devuser的证书请求\ncd /user/local/install-k8s\nmkdir -p cert/devuser\ncd cert/devuser && vim devuser-csr.json\n{\n    \"CN\": \"devuser\",\n    \"hosts\": [], # 不写代表所有\n    \"key\": {\n        \"algo\": \"rsa\",\n        \"size\": 2048\n    },\n    \"names\": [{\n        \"C\": \"CN\",\n        \"ST\": \"BeiJing\",\n        \"L\": \"BeiJing\",\n        \"O\": \"k8s\",\n        \"OU\": \"System\"\n    }]\n}\n\n# 下载证书生成工具\nwget https://pkg.cfssl.org/R1.2/cfssl_linux-amd64\nmv cfssl_linux-amd64 /usr/local/bin/cfssl\n\nwget https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64\nmv cfssljson_linux-amd64 /usr/local/bin/cfssljson\n\nwget https://pkg.cfssl.org/R1.2/cfssl-certinfo_linux-amd64\nmv cfssl-certinfo_linux-amd64 /usr/local/bin/cfssl-certinfo\n\ncd /usr/local/bin/\nchmod a+x *\n\ncd /etc/kubernetes/pki/ # 存放的都是密钥信息\ncfssl gencert -ca=ca.crt -ca-key=ca.key -profile=kubernetes /usr/local/install-k8s/cert/devuser/devuser-csr.json | cfssljson -bare devuser\n\n# 设置集群参数\ncd /usr/local/install-k8s/cert/devuser\nexport KUBE_APISERVER=\"https://192.168.66.10:6443\"\nkubectl config set-cluster kubernetes \\\n--certificate-authority=/etc/kubernetes/pki/ca.crt \\\n--embed-certs=true \\\n--server-${KUBE APISERVER} \\\n--kubeconfig=devuser.kubeconfig\ncat devuser.kubeconfig\n\n#设置客户端认证参数\nkubectl config set-credentials devuser \\\n--client-certificate=/etc/kubernetes/pki/devuser.pem \\ # 指定证书\n--client-key=/etc/kubernetes/pki/devuser -key.pem \\ # 指定私钥\n--embed-certs=true \\ # 开启证书认证\n--kubeconfig=devuser.kubeconfig # 写入kubeconfig文件\n\n#设置上下文参数（绑定至某一个空间）\nkubectl create namespace dev\nkubectl config set -context kubernetes \\\n--cluster=kubernetes \\ # 默认集群名称\n--user=devuser \\\n--namespace=dev \\\n--kubeconfig=devuser.kubeconfig\n\n# devuser可以在dev中拥有admin权限\nkubectl create rolebinding devuser-admin-binding --clusterrole=admin --user=devuser --namespace=dev\n\ncp -f ./devuser.kubeconfig /home/.kube/config\nchown devuser:devuser /home/.kube/config\n\n#设置默认上下文（切换）\nkubectl config use-context kubernetes --kubeconfig=config\n\nkubectl run nginx --image=hub.jade.com/library/myapp:v2\nkubectl get pod会展示刚刚创建的nginx\n默认nv是dev，查看default无权限\n```\n\n#### 准入控制（Admission Control）\n准入控制是API Server的插件集合，通过添加不通的插件，实现额外的准入控制规则。甚至于APIServer的一些主要的功能都需要通过Admission Controllers实现，比如SA\n\n官方文档上有一份针对不同版本的准入控制器推荐列表，其中最新的1.14的推荐列表是\n> NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,DefaultTolerationSeconds,MutatingAdmissionWebhook,ValidatingAdmissionWebhook,ResourceQuota\n\n列举几个插件的功能：\n- NamespaceLifecycle：防止在不存在的namespace上创建对象，防止删除系统预置ns，删除ns时，连带删除它的所有资源对象\n- LimitRanger：确保请求的资源不会超过资源所在的ns的LimitRange的限制\n- ServiceAccount：实现了自动化添加ServiceAccount\n- ResourceQuota：确保请求的资源不会超过资源的ResourceQuota限制\n\n---\n\n## Helm\n#### 定义\n没使用helm之前，向k8s部署应用，我们要依次部署deployment、svc等，步骤较繁琐。\n况且随着很多项目微服务化，复杂的应用在容器中部署以及管理显得较为复杂，helm通过打包的方式，支持发布的版本管理和控制，很大程度简化了k8s应用的部署和管理\n\nhelm本质就是让k8s的应用管理（deploy、svc等）可配置，能动态生产。通过动态生产k8s资源清单文件（deploy.yaml、svc.yaml），然后调用kubectl自动执行k8s资源部署\n\nHelm是官方提供的类似于YUM的包管理器，是部署环境的流程封装。\n\nHelm有两个重要的概念：chart和release\n##### chart\n是创建一个应用的信息集合，包括各种k8s对象的配置模板、参数定义、依赖关系、文档说明等。\nchart是应用部署的自包含逻辑单元。可以将chart想象成apt、yum中的软件安装包\n##### release\n是chart的运行实例，代表了一个正在运行的应用\n当chart被安装到k8s集群，就生产一个release\nchart能够多次安装到同一个集群，每次安装都是一个release\n\n#### 组件\nHelm包含两个组件：Helm客户端和Tiller服务器，如下图所示\n![](source/_posts/k8sNote1/k8s_heml.png)\n<u>Helm客户端<u>负责chart和release的创建和管理以及和Tiller的交互\n<u>Tiller服务器<u>运行在k8s集群中，处理Helm客户端的请求，与k8s API Server交互\n\n#### Helm部署\n```bash\n# 下载helm命令行工具到master节点的/usr/local/bin下，这里下载2.13.1版本\nntpdate ntp1.aliyun.com\nwget https://storage.googleapis.com/kubernetes-helm/helm-v2.13.1-linux-amd64.tar.gz\ncd /usr/local/install-k8s\nmkdir helm\nmv helm-v2.13.1-linux-amd64.tar.gz ./helm\ncd helm\ntar -zxvf helm-v2.13.1-linux-amd64.tar.gz\ncd linux-amd64/\ncp helm /usr/local/bin/\nchmod a+x /usr/local/bin/helm\n```\n\n为了安装服务端tiller，还需要在这台机器上配置好kubectl工具和kubeconfig文件，确保kubectl工具可以在这台机器上访问apiserver且正常使用，这里的node1节点已经配置好了kubectl\n\n因为kubernetes APIServer开启了RBAC访问控制，所以需要创建tiller使用的service account:tiller并分配合适的角色给它。详细内容可以查看helm文档中的Role-based Access Control 这里简单起见直接分配cluster-admin这个集群内置的ClusterRole给它。创建rbac-config.yaml文件\n```bash\nvim rbac.yaml\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: tiller\n  namespace: kube-system\n---\napiVersion: rbac.authorization.k8s.io/vlbeta1\nkind: ClusterRoleBinding\nmetadata:\n  name: tiller\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: cluster-admin\nsubjects:\n- kind: ServiceAccount\n  name: tiller\n  namespace: kube-system\n  \nkubectl create -f rbac-config.yaml\nserviceaccount/tiller created\nclusterrolebinding.rbac.authorization.k8s.io/tiller created\n\nhelm init --service-account tiller --skip-refresh\n\n# tiller默认被部署在k8s集群中的kube-system这个ns下\nkubectl get pod -n kube-system -I app=helm\nNAME                          READY STATUS  RESTARTSAGE\ntiller-deploy-c4fd4cd68-dwkhv  1/1  Running  83s\n\n# 查看当前版本信息\nhelm version\nClient: &version.Vension{SemVer:\"v2.13.1\"，GitCommit;\"618447cbf203d147601b4b9bd7f8c37a5d39fbb4\", GitTreeState:\"clean\"}\nServer: &version.Vension{SemVer:\"v2.13.1\"，GitCommit:\"618447cbf203d147601b4b9bd7f8c37a5d39fbb4\", GitTreeState:\"clean\"}\n\n# 页面查看helm仓库\nhelm.sh\nhub.helm.sh\n```\n\n#### Helm自定义模板\n```bash\n# 创建文件夹\n$ mkdir ./hello-world\n$ cd ./hello-world\n\n# 创建自描述文件 Chart.yaml ，这个文件必须有 name 和 version 定义\n$ cat <<'EOF' > ./Chart.yaml\nname: hel1o-world\nversion: 1.0.@\nEOF\n\n# 创建模板文件，用于生成 Kubernetes 资源清单 (manifests)\n$ mkdir ./templates\n$ cat <<'EOF' > ./templates/deployment .yaml\napiVersion: extensions/vibeta1\nkind: Deployment\nmetadata:\n  name: hello-world\nspec:\n  replicas: 1\n  template:\n    metadata :\n      labels:\n        app: hello-world\n    spec:\n      containers:\n      - name: hello-world\n        image: hub.atguigu.com/library/myapp:v1\n        ports:\n        - containerPort: 80\n          protocol: TCP\nEOF\n\n$ cat <<'EOF' > ./templates/service.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: hello-world\nspec:\n  type: NodePort\n  ports:\n  - port: 80\n    targetPort: 80\n    protocol: TCP\n  selector:\n    app: hello-world\nEOF\n```\n```bash\n# 使用命令 helm install RELATIVE PATH TO_CHART 创建一次Release\n$ helm install .\n\n# 列出已经部署的 Release\n$ helm ls\n# 获取pod发现镜像下载失败，修改为本地镜像后更新helm\nkubectl get pod \n# 更新helm\n$ helm uograde nobby-eel .\n# 查看helm历史\n$ helm history nobby-eel\n#查询一个特定的 Release 的状态\n$ helm status ${RELEASE_NAME}\n# 移除所有与这个 Release 相关的 Kubernetes 资源\n$ helm delete nobby-eel\n# helm rollback ${RELEASE_NAME} ${REVISION_NUMBER}\n$ helm rollback nobby-eel 1\n# 使用 helm delete --purge ${RELEASE_NAME} 移除所有与指定 Release 相关的 Kubernetes 资源和所有这个Release 的记录\n$ helm delete --purge nobby-eel\n$ helm ls --deleted\n```\n```bash\n## 灵活使用helm，使用配置文件、引用；更改配置文件即可修改镜像 或者通过--set的方式指定镜像\n# 1.配置体现在配置文件 values.yaml\n$ cat <<'EOF' > ./values.yaml\nimage:\n  repository: hub.jade.com/library/myapp\n  tag: 'v1'\nEOF\n\n# 这个文件中定义的值，在模板文件中可以通过 .VAlues对象访问到\n$ cat <<'EOF' > ./templates/deployment.yaml\napiVersion: extensions/vibeta1\nkind: Deployment\nmetadata:\n  name: hello-world\nspec :\n  replicas: 1\n  template:\n    metadata :\n      labels :\n        app: hello-world\n    spec:\n      containers:\n      - name: hello-world\n        image: (( .Values.image.repository ]}:{{ .Values.image.tag }}\n        ports :\n        - containerPort: 888\n          protocol: TCP\nEOF\n# 修改版本为v2后更新\n$ helm uograde nobby-eel .\n\n\n# 2.在 values.yam1 中的值可以被部署 release 时用到的参数 --values YAML_FILE_PATH 或 --setkey1=value1，key2=value2 覆盖掉\n$ helm install --set image.tag='v3\" .\nhelm upgrade -f values.yaml nobby-eel .\nor\n# 覆盖版本为v3并直接升级\n$ helm uograde nobby-eel --set image.tag='v3\" .\n```\n\n##### Debug\n```bash\n# 使用模板动态生成K8s资源清单，非常需要能提前预览生成的结果。\n# 使用--dry-run --debug 选项来打印出生成的清单文件内容，而不执行部署\nhelm install .--dry-run --debug --set image.tag=latest\n```\n\n#### 使用Helm部署dashboard\n```bash\ncd /usr/local/install-k8s/plugin\nmkdir dashboard && cd dashboard\n# 更新chart仓库\nhelm repo update\n# 查看\nhelm repo list\n# 下载\nhelm fetch stable/kubernetes-dashboard\n\n# kubernetes-dashboard.yaml\nvim kubernetes-dashboard.yaml\nimage:\n  repository: k8s.gcr.io/kubernetes-dashboard-amd64\n  tag: v1.19.1\ningress:\n  enabled: true\n  hosts:\n  - k8s.frognew.com\n  annotations:\n    nginx.ingress.kubernetes.io/ssl-redirect: \"true\"\n    nginx.ingress.kubernetes.io/backend-protocol: \"HTTPS\"\n  tls:\n  - secretName: frognew-com-tls-secret\n    hosts:\n    - k8s.frognew.com\nrbac:\n  clusterAdminRole: true\n```\n```bash\nhelm install . -n kubernetes-dashboard --namespace kube-system -f kubernetes-dashboard.yaml\n```\n```bash\n# 查询dashboard token以便登录dashboard\nkubectl -n kube-system get secret | grep kubernetes-dashboard-token\nkubernetes .io/service-account-token   3   3m7s kubectl describe -n kube-system\nsecret/kubernetes-dashboard-token-pkm2s Name:kubernetes-dashboard-token-pkm2sNamespace:kube-system Labels:<none> Annotations: kubernetes.io/service-account.name:kubernetes-dashboard kubernetes,io/service-account,uid: 2f0781dd-156a-11e9-b0f0-080027bb7c43Type: kubernetes.io/service-account-token Data ==== ca.crt:1025 bytes namespace: 11 bytes\ntoken:\neyJhbGci0iJSUzI1NiIsImtpZCI6Ii9.eyJpc3Mi0iJrdwJlcm51dGVzL3N1cnZpy2VhY2NvdW50Iiwia3VizXJuzXRlcy5pby9zzXJ2aWNIYWNjb3VudC9uYW11c3BhY2Ui0iJrdWJ1LXN5c3RIbSIsImt1YmVybmV@ZXMuaM8vc2VydmljzWFjY291bn0Vc2VjcmV9Lm5hbwUi0iJrdWlcm5ldGVzLWRhc2hib2FyZC10b2tlbi1wa20ycyIsImt1YmVybmV@zXMuaW8vc2VydmljzwjY291bnOvc2VydmljZS1hY2NvdW50Lm5hbwUi0iJrdWJlcm51dGZLWRhc2hib2FyzcIsImt1YmVybmV@zXMuaW8vc2VydmliZWFiY291bn0vc2VvamliZS1Y2NvdM50LnVZCI6IJmMDC4MRKLTE1NmEMTF10S1MGYWLTA4MDAVN2JiN2MOMVISIn1YiI6InN5C3RIbTpzzXJ2aMN1YWNjb3VudDprdWJ1LXN5C3RIbTprdwJlcm51dGVzLWRhc2hib2FyzCJ9.24ad6ZgZMxdydpwlmYAiMxZ9VSIN7dDR706-RLWOqC81ajXoQKHAyrEGpIonfld3ggbE0x08nis skpmlkQra72-9X6sBPoBygIKyTs083BO1ME2sfoJemWDOHazwsCiySOax-bUlg9HgH2vEXzpFuSS6Sv7RbfzLX1EuggNoC4MfA4E2hF10X m18iAKx-49y1B00e5FGWyCyBSi1TDZpVs44H5gIvsGK2kcvi0JT4oHXtWjjQBKLIWL7xxyRCSE4HmUZT2StIHn0w1X7IEIB0oBX4mPg2 xNGnqwcu-80ERU9IOgAAE2cZav3b50:IPrcxrVOukYRIUMA\n```\n```bash\nkubectl edit svc kubernetes-dashboard -n kube-system\n修改 ClusterIP 为 NodePort\n```\n\n#### 使用Helm部署metrics-server\n```bash\n# metrics-server.yaml\nargs:\n- --logtostderr\n- --kubelet-insecure-tls\n- --kubelet-preferred-address-types=InternalIp\n```\n```bash'\nhelm install stable/metrics-server -n metrics-server --namespace kubesystem -f metrics-server.yaml\n```\n```bash\n# 使用下面的命令可以获取到关于集群节点基本的指标信息\nkubectl top node\nNAME     CPU(cores)  CPU%   MEMORY(bytes)  MEMORY%\nnode1    65m         32%    1276Mi         73%\nnode2    73m         3%     527Mi          30%\n\nkubectl top pod --all-namespaces\n```\n\n#### 使用Helm部署prometheus\nmetrics-server和prometheus只能选一种使用，因为prometheus集成了metrics-server\n[prometheus github地址]：https://github.com/coreos/kube-prometheus\n\n##### 组件说明\n- MetricServer：是k8s集群资源使用情况的聚合器，收集数据给k8s集群内使用，如kubectl，hpa，scheduler等\n- PrometheusOperator：是一个系统监测和警报工具箱，用来存储监控数据\n- NodeExporter：用于各node的关键度量指标状态数据\n- KubeStateMetrics：收集k8s集群内资源对象数据，制定告警规则\n- Prometheus：采用pull方式收集apiserver，scheduler，controller-manager，kubelet组件数据，通过http协议传输\n- Grafana：是可视化数据统计和监控平台\n\n##### 部署\n```bash\ncd /usr/local/install-k8s/plugin\nmkdir prometheus && cd prometheus\n\n# 下载prometheus\ngit clone https://github.com/coreos/kube-prometheus.git\ncd kube-prometheus/mainfests\n\n# 修改grafana-service.yaml文件，使用nodeport方式访问grafana：\nvim grafana-service.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: grafana\n  namespace: monitoring\nspec:\n  type: NodePort  # 添加内容\n  ports:\n  - name: http\n    port: 3000\n    targetPort: http\n    nodePort: 30100  # 添加内容\n  selector:\n    app: grafana\n    \n# 修改prometheus-service.yaml，改为nodeport\nvim prometheus-service.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    prometheus: k8s\n  name: prometheus-k8s\n  namespace: monitoring\nspec:\n  type: NodePort  # 添加内容\n  ports:\n  - name: web\n    port: 9090\n    targetPort: web\n    nodePort: 30200  # 添加内容\n  selector:\n    app: prometheus\n    prometheus: k8s\n    \n# 修改alertmanager-service.yaml，改为ndeport\nvim alertmanager-service.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    alertmanager: main\n  name: alertmanager-main\n  namespace: monitoring\nspec:\n  type: NodePort  # 添加内容\n  ports:\n  - name: web\n    port: 9093\n    targetPort: web\n    nodePort: 30300  # 添加内容\n  selector:\n    alertmanager: main\n    app: alertmanager\n    \n# 部署（部署前可以先导入要用的镜像）\nkubectl apply -f ../manifests/\n# 查看\nkubectl get pod -n monitoring\nkubectl top node\nkubectl get svc --all-namespaces\n```\n\n##### Horizontal Pod Autoscaling\n```bash\n# Horizontal Pod Autoscaling 可以根据CPU利用率自动伸缩一个Replication Controller、Deployment或者Replica Set中的Pod数量\n# hpa-example镜像：谷歌做的hpa测试镜像，基于php，非常消耗资源的应用程序，通过循环调用造成资源占用，来演示hpa扩展\nkubectl run php-apache --image=gcr.io/google_containers/hpa-example --requests=cpu=200m --expose --port=80\n\nkubectl top pod php-apache-2342343-5df\n\n# 创建HPA控制器\nkubectl autoscale deployment php-apache --cpu-percent=50 --min=1 --max=10\n# 阈值 cpu利用率一旦超过50就开始创建新的pod，最大10个，cpu利用率减少会回收（回收较慢），最少1个\nkubectl get hpa\n\n# 增加负载，查看负载节点数目\nkubectl run -i --tty load-generator --image=busybox /bin/sh\nwhile true; do wget -1 -O- https://php-apache.default.svc.cluster.local; done\n# 新开窗口\nkubectl get hpa -w\nkubectl get pod -w\n```\n\n##### 资源限制 - Pod\nk8s对资源的限制实际上是通过cgroup来控制的，cgroup是容器的一组用来控制内核如何运行进程的相关属性集合。针对内存、CPU和各种设备都有对应的cgroup\n\n默认情况下，pod运行没有cpu和内存的限额。这意味着系统中的任何pod将能够像执行该pod所在的节点一样，消耗足够多的cpu和内存。一般会针对某些应用的pod资源进行资源限制，这个资源限制是通过resources的requests和limits来实现\n```yml\nspec:\n    containers:\n    - image: xxxx\n      imagePullPolicy: Always\n      name : auth\n      ports:\n      - containerPort: 8888\n        protocol: TCP\n      resources:\n        limits:\n          cpu: \"4\"\n          memory: 2Gi\n      requests :\n          cpu: 250m\n          memory: 250Mi\n```\nrequests要分配的资源，limits为最高请求的资源值。可以简单理解为初始值和最大值\n\n##### 资源限制 - 名称空间\n```yml\n# 1.计算资源配额\napiVersion: v1\nkind: ResourceQuota\nmetadata:\n  name: compute-resources\n  namespace: spark-cluster\nspec:\n  hard:\n    pods: \"20\"\n    requests.cpu: \"20\"\n    requests.memory: 100Gi\n    limits.cpu: \"40\"\n    limits.memory: 200Gi\n\n# 2.配置对象数量配额限制\napiVersion: v1\nkind: ResourceQuota\nmetadata:\n  name: object-counts\n  namespace: spark-cluster\nspec:\n  hard:\n    configmaps: \"10\"\n    persistentvolumeclaims: \"4\"\n    replicationcontrollers: \"20\"\n    secrets: \"10\"\n    services: \"10\"\n    services.loadbalancers: \"2\"\n\n# 3.配置CPU和内存LimitRange\napiVersion: v1\nkind: LimitRange\nmetadata:\n  name: mem-limit-range\nspec:\n  limits:\n  - default:\n      memory: 50Gi\n      cpu: 5\n    defaultRequest:\n      memory: 1Gi\n      cpu: 1\n      type: Container\n\n# default 即limit的值\n# defaultRequest 即request的值\n```\n\n##### 访问prometheus\nprometheus对应的nodeport端口为30200\nhttp://masterIP:30200\n\nprometheus web界面提供了基本的查询k8s集群中每个pod的cpu使用情况\nsum by (pod_name)( rate(container_cpu_usage_seconds_total{image!=\"\", pod_name!=\"\"}[1m] ) )\n\n##### 访问grafana\n查看grafana服务暴露的端口号\nkubectl get service -n monitoring | grep grafana\ngrafana  NodePort  10.107.56.143  <node>  3000:30100/TCP  20h\nhttp://masterIP:30100 默认admin/admin\n\n#### 使用Helm部署EFK平台\n![](source/_posts/k8sNote1/k8s_helm_efk.png)\n```bash\n# 节点上的pod日志信息目录\n/var/log/containers\n\ncd /usr/local/install-k8s\nmkdir efk && cd efk\n\n# 添加Google incubator仓库\nhelm repo add incubator http://storage.googleapis.com/kubernetes-charts-incubator\n\n# 部署Elasticsearch\nkubectl create namespace efk\nhelm fetch incubator/elasticsearch\nhelm install --name els1 --namespace=efk -f values.yaml uncubator/elasticsearch\nkubectl run cirror-${RANDOM} --rm -it --image=cirros -- /bin/sh\n    curel Elasticsearch:Port/_cat/nodes\n    \n# 部署Fluentd\nhelm fetch stable/fluentd-elasticsearch\nvim values.yaml # 更改其中 Elasticsearch 访问地址\nhelm install --name flul --namespace=efk -f values.yaml stable/fluentd-elasticsearch\n\n# 部署kibana\nhelm fetch stable/kibana --version.14.8\nhelm install --name kibl --namespace=efk -f values.yaml stable/kibana --version 0.14.8\n\n# 修改为NodePort，访问后可查看收集的日志\nkubectl edit svc kib1-kibana -n efk\n```\n\n---\n\n## 证书\n```bash\n# 查看证书\ncd /etc/kubernetes/pki\nopenssl x509 -in apiserver.crt -text -noout（有效期1年）\nopenssl x509 -in ca.crt -text -noout（有效期10年）\n```\n1. go环境部署\n```bash\n百度\"go 中文社区\" -> 下载 -> Linux\n或者wget\nwget https://dl.google.com/go/go1.12.7.linux-amd64.tar.gz\ntar -zxvf go…… -C /usr/local/\nvim /etc/profile\n\texport PATH=$PATH:/usr/local/go/bin\nsource /etc/profile\ngo version\n```\n2. 下载源码\n```bash\nmkdir /data && cd /data\ngit clone https://github.com/kubernetes/kubernetes.git\ncd kubernetes/\nkubeadm version\ngit checkout -b remotes/origin/release-1.15.1 v1.15.1\n```\n3. 修改kubeadm源码包更新证书策略\n```bash\nvim staging/src/k8s.io/client-go/util/cert/cert.go # kubeamd1.14版本前\nvim cmd/kubeadm/app/util/pkiutil/pki_helpers.go # kubeadm1.14之后\n1.16之后查看kubernetes官网查看开发者手册应该修改哪个文件\n\tconst duration3650d = time.Hour * 24 * 365  *10\n\tNotAfter:    time.Now().Add(duration3650d).UTC(),\n\nmkdir WHAT=cmd/kubeadm GOFLAGS=-v\ncp _output/bin/kubeadm /root/kubeadm-new\n```\n4. 更新kubeadm\n```bash\n# 将kubeadm进行替换\ncp /usr/bin/kubeadm /usr/bin/kubeadm.old\ncp /root/kubeadm-new /usr/bin/kubeadm\nchmod a+x /usr/bin/kubeadm\n```\n5. 更新各节点证书至master节点\n```bash\ncp -r /etc/kubernetes/pki /etc/kubernetes/pki.old\ncd /etc/kubernetes/pki\nkubeadm alpha certs renew all --config=/usr/local/install-k8s/core/kubeadm-config.yaml\nopenssl x509 -in apiserver.crt -text -noout | grep Not\n```\n6. HA集群其余master节点证书更新\n```bash\n#!/bin/bash\n\nmasterNode=\"192.168.66.20 192.168.66.21\"\n#for host in $masterNode}; do#scp /etc/kubernetes/pki/(ca.crt,ca.key,sa.key, sa.pub,front-proxy-ca.crt,front-proxy-ca, key)\"$(USER}\"@$host:/etc/kubernetes/pki/\n# scp /etc/kubernetes/pki/etcd/(ca.crt,ca.key) \"root\"@$host:/etc/kubernetes/pki/etcd\n# scp /etc/kubernetes/admin.conf \"root\"@$host:/etc/kubernetes/\n#done\nfor host in $(CONTROL_PLANE_IPS}; do\n    scp /etc/kubernetes/pki/{ca.crt,ca.key,sa.key,sa.pub,front-proxy-ca.crt,front-proxy-ca.key} \"${USER}\"@$host:/root/pki/\n    scp /etc/kubernetes/pki/etcd/{ca.crt,ca.key} \"root\"@$host:/root/etcd\n    scp /etc/kubernetes/admin.conf \"root\"@shost:/root/kubernetes/\ndone\n```","tags":["k8s"],"categories":["study","notes"]},{"title":"K8s备忘 - 上","url":"/2025/04/09/k8sNote1/","content":"# K8s备忘\n## k8s常用命令\n#### `… … … kubectl … … … ∞`\n```bash\n#查看命名空间nsA下pod1的日志最近100行\nkubectl logs -f pod1 -n nsA --tail=100\n\n#查日志\nkubectl logs --tail=1000 ${podname} -n cloudpath > ${podname}.log\n\n#查看服务配置信息\nkubectl -n kubernetes-dashboard get service kubernetes-dashboard -o yaml\n\n#查看服务信息，所在node就是访问的ip\nkubectl -n kubernetes-dashboard get service kubernetes-dashboard\n\n# kubeworker节点添加label test=true\nkubectl get node | grep ${nodename_pre} | awk '{print $1}' | xargs -I {} kubectl label node {} test=true\n\n# pod测试网络连通性\nkubectl exec -it ${pod_name} -- ping 目标地址\n\n# 替换集群公网config信息就可访问对应集群.kube/config\n\n# 指定公网config执行命令\nkubectl get node --kubeconfig=/root/.kube/config\n\n# \nkubectl get node --no-headers | while read node status; do echo '>>>>  ['$node']'; kubectl describe node $node | grep Resource -A 3 ;done\n\n# 设置ds不起pod，但不删除ds，通过增加一个所有node上都不存在的labels作为nodeSelector，让ds起不来\nkubectl -n openstack patch daemonset ${dsname} -p '{\"spec\": {\"template\": {\"spec\": {\"nodeSelector\": {\"non-existing\": \"true\"}}}}}'\n\n# 查看资源对象\nkubectl api-resources\n\n# 移除不想要的label\nkubectl patch ${serviceType} -n ${namespace} ${serviceName} --type=json -p='[{\"op\": \"remove\", \"path\": \"/metadata/labels/unnecessary-label\"}]' \n```\n#### `… … … deployment … … … ∞`\n```bash\n# 创建并记录 --record参数可以记录命令，可以方便的查看每次revision的变化\nkubectl create -f https://kubernetes.io/docs/user-guide/nginx-deployment.yaml --record\n# 扩容\nkubectl scale deployment nginx-deployment --replicas 10\n# 设置自动扩展（如果集群支持hpa（horizontal pod autoscaling））\nkubectl autoscale deploy nginx-deployment --min=10 --max=15 --cpu-percent=80\n# 更新镜像\nkubectl set image deploy/nginx-deployment nginx=nginx:1.9.1\n# 回滚\n# 只要deploy的rollout被触发就会创建一个revision。\n# 也就是说当且仅当deploy的pod template（如'.spec.template'）被更改，例如更新template中的label和容器镜像时，就会创建出一个新的revision# 其他的更新，比如扩容deploy不会创建revision\n# 因此可以很方便的手动或自动扩容，这意味着回退到历史revision时，只有deploy中的pod template部分才会回退\nkubectl rollout history deploy/nginx-deployment ## 查看历史revision，创建时指定--record，revision会有详细信息\nkubectl rollout undo deploy/nginx-deployment\nkubectl rollout undo deploy/nginx-deployment --to-revision=2 ## 指定历史版本\nkubectl rollout pause deploy/nginx-deployment ## 暂停deploy的更新\nkubectl rollout status deploy/nginx-deployment ## 查看是否完成，如果完成会返回0的exit code，echo $?查看\n# 可通过设置.spec.revisionHistoryLimit项来指定deploy最多保留多少revision历史记录，默认的会保留所有的revision；如果将该项设置为0，deploy就不允许回退了\n```\n\n#### `… … … ipvs … … … ∞`\nipvsadm -Ln\n\n#### `… … … docker … … … ∞`\n```bash\n# 一键删除全部容器\ndocker rm $(docker ps -qa)\n# 删除镜像\ndocker rmi IMAG\n# 查看容器的IP地址\ndocker inspect 容器\n# 查看当前正在运行的容器进程号\ndocker inspect --format '{{ .State.Pid }}' 容器ID\n# 查找/var/lib/docker/overlay2/（文件存储驱动）下64位的十六进制字符串目录对应的服务\ndocker ps -q | xargs docker inspect --format '{{.State.Pid}}, {{.Id}}, {{.Name}}, {{.GraphDriver.Data.WorkDir}}' | grep 65位十六进制字符串\n# 导入镜像\ntar -zxvf perl.tar.gz\ndocker load -i perl.tar\n# 复制容器内文件到本地\ndocker cp k8s_test_svc-test-56ccb44cb9-t2hnj_testns_399b7029-074f-46b5-89b7-3dbb156a5a3b_0:/test/gc.log /tmp/gc.log\n命令空间testns\n容器svc-test\npod为svc-test-56ccb44cb9-t2hnj\n文件/test/gc.log\n# docker打tag推镜像\ndocker build -t java-demo-01:lastest .\ndocker run -d -p 8111:8111 java-demo-01:latest -t\ndocker images | grep java-demo-01\ndocker tag c234sdgfsdg hub.jade.com/library/java-project-01:1.0.0\ndocker push hub.jade.com/library/java-project-01:1.0.0\n```\n\n\n---\n\n## K8s组件\n高可用集群的高可用节点数一般是3 5 7 9，避免双数高可用集群副本数最好是>=3 奇数个\n![](k8sNote1/k8s_module.png)\n#### Master的组件\n- APIServer：所有服务访问统一入口\n- ControllerManager控制器：维持副本期望数\n- Scheduler调度器：负责接收任务，选择合适的节点进行分配任务\n- ETCD键值对数据库：存储K8s集群所有重要信息（持久化）,官方将它定位成一个可信赖的分布式键值存储服务，能够为整个分布式集群存储一些关键数据，协助分布式集群的正常运转ETCDv2直接存储到内存（已在k8sv1.11中弃用），v3引入本地卷的持久化（1.11前不存在意味着关机不会有损坏）\n#### Node的组件\n- Kubelet：维持pod生命周期直接跟容器引擎(docker)交互实现容器的生命周期管理\n- Kube-proxy：实现pod间访问、负载均衡，默认操作防火墙实现pod映射，新版ipvs负责写入规则至IPTables、IPVS 实现服务映射访问\n#### 其他插件\n- CoreDNS：可以为集群中的SVC创建一个域名IP的对应关系解析，实现负载均衡的其一\n- Dashboard：给K8s集群提供一个B/S结构访问体系\n- Ingress Controller：官方只能实现四层代理，Ingress可以实现七层\n- Federation：提供一个可以跨集群中心多K8s统一管理功能\n- Prometheus：提供一个K8s集群的监控能力\n- ELK：提供K8s集群日志统一分析接入平台\n\n---\n\n## Pod\n#### 分类 \n自主式Pod：Pod退出了，此类Pod不会被创建 \n控制器管理的Pod：在控制器的生命周期里，始终要维持Pod的副本数目\n> pause：只要有pod，此容器就会被启动，容器网络栈\n\n---\n\n## 资源清单\n#### 资源\nK8s中所有的内容都抽象为资源，资源实例化之后，叫做对象\n#### 集群资源分类\n- 名称空间级别：仅ns内可见\n    - 工作负载型资源（workload）：Pod、ReplicaSet、Deployment、StatefulSet、DaemonSet、Job、CronJob、ReplicationController（在v1.11版本被废弃）\n    - 服务发现及负载均衡型资源（ServiceDiscovery LoadBalance）：Service、Ingress\n    - 配置与存储型资源：Volume（存储卷）、CSI（容器存储接口，可扩展各种各样的第三方存储卷）\n    - 特殊类型的存储卷：ConfigMap（当配置中心来使用的资源类型）、Secret（保存敏感数据）、DownwardAPI（把外部环境中的信息输出给容器）\n- 集群级别：全集群可见（role）\n    - Namespace、Node、Role、ClusterRole、RoleBinding、ClusterRoleBinding\n- 元数据型：通过指标进行操作（HPA）\n    - HPA、PodTemplate、LimitRange\n\n#### 资源清单YAML\nyaml文件就是资源清单\n\n__yaml意思：__ 仍是一种标记语言，但为了强调这种语言以数据为中心，而不是以标记语言为重点基本语法：\n缩进只能用空格，不能用tab\n缩进的空格数目不重要，只要相同层级的元素左侧对齐即可\n注释用#\n__yaml支持的数据结构：__\n对象：键值对集合，又称为映射（mapping）/哈希（hashes）/字典（dictionary）\n数组：一组按次序排列的值，又称为序列（sequence）/列表（list）\n纯量（scalars）：单个的、不可再分的值\n- 对象类型：对象的一组键值对，使用冒号结构表示\n```bash\nname: jade\nage: 18\n\n# yaml也允许另一个写法，写成一个行内对象\nhash: { name: jade, age: 18 }\n```\n- 数组类型：一组连词线开头的行，构成一个数组\n```bash\nanimal\n- Cat\n- Dog\n\n# 数组也可以采用行内表示法 \nanimal: [Cat, Dog]\n```\n- 复合结构：对象和数组可以结合使用，形成复合结构\n```bash\nlanguages:\n- Ruby\n- Perl\n- Python\nwebsites:\nYAML: yaml.org\nRuby: ruby-lang.org\nPython: python.org\nPerl: http://use.perl.org\n```\n- 纯量：纯量是最基本的、不可再分的值\n```bash  \n1.string boolean integer float Null\n2.时间 日期\n\n## integer：直接以字面量的形式表示\nnumber: 12.30\n\n## boolean：用true false表示\n\n## null：用~表示，或者不写也表示null\n\n## 时间采用ISO8601格式\niso8601: 2001-12-14t21:59:43.10-05:00\n\n## 日期采用复合iso8601格式的年、月、日表示\ndate: 1976-07-31\n\n## yaml允许使用!!强制转换数据类型\ne: !!str 123\nf: !!str true\n\n## 字符串：默认不使用引号表示\n# 包含空格或特殊字符需放在引号中：\nstr: '内容: 字符串'\n# 单引号、双引号都可使用，双银不会对特殊字符转义：\ns1: '内容\\n字符串'\ns2: \"内容\\n字符串\"\n# 单引号中还有单引号，需用另一个单引号转义：\nstr: 'labor''s day'\n# 字符串可写成多行，从第二行开始必须有一个但空格缩进，换行符会被转换为空格\nstr: 这是一段 \n 多行\n 字符串\n# 多行字符串可以使用|保留换行符，也可以用>折叠换行\nthis: |\nFoo\nBar\nthat: >\nFoo\nBar\n+ 表示保留文字块末尾的换行，- 表示删除字符串末尾的换行\ns1: |\n Foo\ns1: |+\n Foo\ns1: |-\n Foo\n```  \n\n#### 常用字段说明\n```bash\nkubectl explain <resources> 可查看模板信息,required表示必需字段\nkubectl explain pod\nkubectl explain pod.api\n```\n- 必须存在的对象\n\n| 变量名 | 类型 | 作用 |\n| :--- | :---: | :--- |\n| verison | String | 指k8s API版本，目前是v1，可使用kubectl api-versions命令查看 |\n| kind | String | 指yaml文件定义的资源类型和角色，如Pod |\n| metadata | Object | 元数据对象，固定值 |\n| metadata.name | String | 元数据对象的名字，自定义，比如命名Pod的名字 |\n| metadata.namespace | String | 元数据对象的命名空间，默认default，可自定义 |\n| Spec | Object | 详细定义对象，固定值 |\n| spec.containers[] | list | Spec对象的容器列表定义 |\n| spec.containers[].name | String | 定义容器的名字 |\n| spec.containers[].image | String | 定义要用到的镜像名称 |\n\n- 主要对象，不写也可，会有默认值\n\n| 变量名 | 类型 | 作用 |\n| :--- | :---: | :--- |\n| spec.containers[].name | String | 定义容器的名字，默认随机 |\n| spec.containers[].image | String | 定义要用到的镜像名称 |\n| spec.containers[].imagePullPolicy | String | 定义镜像拉去策略，可选Always（默认值，每次都尝试重新拉取镜像）、Never（仅使用本地镜像）、IfNotPresent（如果本地有镜像就是用本地镜像，没有就拉取在线镜像） |\n| spec.containers[].command[] | list | 指定容器启动命令，因为是数组，可以指定多个，不指定则使用镜像打包时使用的启动命令 |\n| spec.containers[].args[] | list | 指定容器启动命令参数，因为是数组可以指定多个 |\n| spec.containers[].workingDir | string | 指定容器的工作目录 |\n| spec.containers[].env[].name | string | 指定环境变量名称 |\n| spec.containers[].env[].value | string | 指定环境变量值 |\n| spec.containers[].resources | object | 指定资源限制和资源请求的值（设置容器的资源上限） |\n| spec.containers[].resources.limits | object | 指定设置容器运行时资源的运行上限 |\n| spec.containers[].resources.limits.cpu | string | 指定cpu的限制，单位为core数，将用于docker run --cpu-shares参数 |\n| spec.containers[].resources.limits.memory | string | 指定MEM内存的限制，单位MiB、GiB |\n| spec.containers[].resources.requests | object | 指定容器启动和调度时的限制设置 |\n| spec.containers[].resources.requests.cpu | string | cpu请求，单位为core数，容器启动时初始化可用数量 |\n| spec.containers[].resources.requests.memory | string | 内存请求，单位为MiB、GiB，容器启动时初始化可用数量 |\n\n- 额外的参数项spec.restartPolicy\n\n| 变量名 | 类型 | 作用 |\n| :--- | :---: | :--- |\n| spec.restartPolicy | string | 定义Pod的重启策略，可选值为Always（默认值，Pod一旦终止运行，则无论容器是如何终止的，kubelet都将重启它(重启多次将意外退出)）、OnFailure（只有Pod以非0退出码终止时，kubelet才会重启它；如果正常退出(退出码为0)，kubelet则不会重启它）、Never（Pod终止后，kubelet将退出码报告给master，不会重启该Pod） |\n| spec.nodeSelector | object | 定义Node的Label过滤标签，以key:value格式指定 |\n| spec.imagePullSecrets | object | 定义pull镜像时使用secret名称，以name:secretkey格式指定 |\n| spec.hostNetwork | boolean | 定义是否使用主机网络模式，默认false，设置true表示使用宿主机网络，不使用docker网桥，同时设置了true将无法在同一台宿主机上启动第二个副本 |\n\n#### 容器生命周期\n![](k8sNote1/pod_lifecycle.png)\nPod能具有多个容器，应用运行在容器里，但是也有可能有一个或多个先于应用容器启动的Init容器\n##### Init容器与普通容器非常像，除了如下两点\nInit容器总是运行到成功完成为止\n每个Init容器都必须在下一个Init容器启动之前成功完成\n> 如果Pod的Init容器失败，Kubernetes会不断地重启该Pod，知道Init容器成功为止，但是如果Pod对应的restartPolicy为Never，它不会重新启动\n\n##### Init容器启动相关代码优势：（因为Init容器具有与应用程序容器分离的单独镜像，所以有如下优势）\nInit容器可以包含并运行实用工具（出于安全考虑，不建议在应用程序容器镜像中包含这些实用工具）\nInit容器可以包含使用工具和定制化代码来安装（但是不能出现在应用程序镜像中。例如创建镜像没必要from另一个镜像，会造成MainC的冗余，只需在安装过程中使用类似sed、sek、python或dig这样的工具）\n应用程序镜像可以分离出创建和部署的角色，而没有必要联合他们构建一个单独的镜像    \nInit容器使用Linux Namespace，所以相对应用程序容器来说具有不通的文件系统视图，因此，他们能够具有访问Secret的权限，而应用程序则不能\nInit容器必须在应用程序容器启动之前运行完成，而应用程序容器是并行运行的，所以Init容器能够提供一种简单的阻塞或延迟应用容器启动的方法，直到满足了一组先决条件\n##### Init容器的特殊说明\n在Pod启动过程中，Init容器会按顺序在 网络和数据卷初始化（pause中完成）之后启动，每个容器必须在下一个容器启动之前成功退出\n如果由于运行时或失败退出，将导致容器启动失败，它会根据Pod的restartPolicy指定的策略进行重试。如果Pod的restartPolicy设置为Always，Init容器失败时会使用RestartPolicy策略\n在所有的Init容器没有成功之前，Pod将不会变成Ready状态。Init容器的端口将不会在Service中进行聚集。正在初始化中的Pod处于Pending状态，但应该会将Initializing状态设置为true\n如果Pod重启，所有Init容器必须重新执行\n对Init容器spec的修改被限制在容器image字段，修改其他字段都不会生效，更改Init容器的image字段，等价于重启该Pod\nInit容器具有应用容器的所有字段，除了readinessProde，因为Init容器无法定义不同于完成（completion）的就绪（readiness）之外的其他状态，这会在验证过程中强制执行\n在Pod中的每个app和init容器的名称必须唯一，与任何其它容器共享同一个名称，会在验证时抛出错误\n\nstart stop\n##### Pod phase（相位） 可能存在的值\n挂起（Pending）：Pod已被k8s系统接受，但有1个或多个容器镜像尚未创建。等待时间包括调度Pod的时间和通过网络下载镜像的时间\n运行中（Running）：该Pod已经绑定到了1个Node上，Pod中所有的容器都已被创建。至少有1个容器正在运行或处于启动或重启状态\n成功（Succeeded）：Pod中所有容器都被成功终止，并且不会再重启（常出现在job cronjob中，以0状态退出）\n失败（Failed）：Pod中所有容器都已终止，并且至少有1个容器是因为失败终止（以非0状态退出或被系统终止）\n未知（Unknown）：因为某些原因无法取得Pod的状态，通常是因为与Pod所在主机通信失败\n\n#### 探针\n##### 探针是由kubelet对容器执行的定期诊断\n要执行诊断，kubelet调用由容器实现的Handler，有三种类型的处理程序：\nExecAction：在容器内执行指定命令。如果命令退出时返回码为0则认为诊断成功  \nTCPSocketAction：对指定端口上的容器的IP地址进行TCP检查，如果端口打开，则诊断被认为是成功的\nHTTPGetAction：对指定的端口和路径上的容器的IP地址执行HTTPGet请求，如果200≤响应的状态码＜400（2xx成功 3xx跳转），则诊断被认为是成功的\n##### 探测结果：每次探测都将获得以下三种结果之一：\n- 成功Success：容器通过了诊断\n- 失败Failure：容器未通过诊断\n- 未知Unknown：诊断失败，因此不会采取任何行动\n##### 探测方式：\n- livenessProbe:指示容器是否正在运行。如果存活探针失败，则kubelet会杀死容器，并且容器将受到其 重启策略 的影响。如果容器不提供存活探针，则默认状态为Success\n- readinessProbe:指示容器是否准备好服务请求。如果就绪探针失败，端口控制器将从与Pod匹配的所有Service的端点中删除该Pod的IP地址。初始延迟之前的就绪状态默认为Failure。如果容器不提供就绪探针，则默认状态为Success\n\n---\n\n## Pod控制器（controller，相当于一个状态机用来控制Pod的具体状态和行为）\n#### ReplicationController\n用来确保容器应用的副本数始终保持在用户定义的副本数\n如果有容器异常退出，会自动创建新的Pod来替代；如果有异常多出来的，会自动回收\n新版k8s中建议用rs代替rc\n#### ReplicaSet\n和rc没有本质的不通，只是名字不一样，但rs支持集合式的selector\n虽然rs可独立使用，但建议用deploy自动管理rs，这样无需担心与其他机制不兼容问题（比如rs不支持rolling-update，但deploy支持）\n#### Deployment\n不负责pod的创建，deploy定义rs，rs创建pod\n- 更新策略\n    - 更新的时候停用旧rs，创建新rs\n    - deploy可以保证在升级时只有一定数量的pod是down的，默认会确保至少有比期望pod数量少一个是up状态（最多一个不可用）\n    - 同时也确保只创建出超过期望数量的一定数量的pod，默认会确保最多比期望的pod数量多一个的pod是up的（最多一个surge）\n    - 未来的k8s版本中，将从1-1变成25%-25%\n    - kubectl describe deploy\n- 为pod和rs提供了一个声明式定义（declarative）方法，用来替代以前的ReplicationController来方便的管理应用，典型的应用场景包括：\n    - 定义deploy来创建pod和rs\n    - 滚动升级和回滚应用\n    - 扩容和缩容\n    - 暂停和继续deploy\n> （命令式编程：侧重于如何实现程序，需要把程序的实现过程按照逻辑结果一步步写下来\n声明式编程：侧重于定义想要什么，然后告诉计算机/引擎，让其帮你实现）\n声明式（deploy）：apply（最优） create也可\n命令式（rs）：create（最优），apply也可\n\n#### Horizontal Pod Autoscaling\nHPA仅适用于deploy和rs，自动平滑扩缩容\n在v1版本中仅支持根据pod的cpu利用率扩缩容\n在vlalpha版本中，支持根据内存和用户自定义的metric扩缩容\n#### DaemonSet\nds确保全部（或一些，比如打了污点的node）Node上运行1个Pod的副本，有且只有1个\n有Node加入集群时，也会为其新增1个Pod；当有Node从集群移除时，Pod也会被回收\n删除ds将会删除它创建的全部Pod\n- ds的一些典型用法：\n    - 运行集群存储daemon，例如在每个Node上运行glusterd、ceph\n    - 在每个Node上运行日志收集daemon，例如fluentd、logstash\n    - 在每个Node上运行监控daemon，例如prometheus node exporter、collectd、datadog代理、new relic代理、或ganglia gmond\n#### StatefulSet\nsts为了解决有状态服务的问题（对应deploy和rs是为无状态服务而设计）\n- 应用场景：\n    - 稳定的持久化存储，即Pod重新调度后还是能访问到相同的持久化数据，基于PVC实现\n    - 稳定的网络标志，即Pod重新调度后其PodName和HostName不变，基于Headless Service（即没有ClusterIP的Service）实现有序部署，有序扩展，即Pod是有顺序的，在部署或扩展的时候要依据定义的顺序依次进行（即从0 - n-1，在下一个Pod运行前所有Pod必须是Running和Ready状态），基于init containers实现\n    - 有序收缩，有序删除（即从n-1 - 0）实现很难，目前mysql还不能稳定的在k8s中运行\n#### Job\nJob负责处理批任务，即仅执行一次的任务，保证批处理任务的1个或多个Pod成功结束\n- 特殊说明\n    - spec.template格式同pod\n    - restartPolicy仅支持Never或OnFailure\n    - 单个Pod时，默认Pod成功运行后Job即结束\n    - .spec.completions标志job结束需要成功运行的pod个数，默认1\n    - .spec.parallelism标志并行运行的pod个数，默认1\n    - spec.activeDeadlineSeconds标志失败Pod的重试最大时间，超过这个时间不会继续重试\n#### CronJob\n管理基于时间的Job，即* * * * *\n在给定时间点只运行一次\n周期性地在给定时间点运行\n\n使用前提条件：当前使用的k8s集群版本≥1.8（对cronjob）。对于先前版本的集群(版本<1.8)，启动apiserver时，通过传递选项（--runtime-config=batch/v2alpha1=true）可以开启batch/v2alpha1API\n\n典型的用法如下：\n- 在给定的时间点调度job运行\n- 创建周期性运行的job，例：数据库备份、发送邮件\n```bash\n## 特殊说明\nspec.template格式同Pod\nrestartPolicy仅支持Never或OnFailure\n单个Pod时，默认Pod成功运行后Job即结束    .spec.completions标志Jov结束需要成功运行的Pod个数，默认为1\n.spec.parallelism标志并运行的Pod个数，默认为1\nspec.activeDeadlineSeconds标志失败Pod的重试最大时间，超过这个时间不会继续重试    \n.spec.schedule：调度，必需字段，指定任务运行周期，格式同Cron\n.spec.jobTemplate：job模板，必需字段，指定需要运行的任务，格式同Job    \n.spec.startingDeadlineSeconds：启动job的期限（s级别），可选字段。如果因为任何原因错过被调度的时间，那错过执行时间的job被认为是失败的，如果没有指定，则没有期限    \t\t\n.spec.concurrencyPolicy：并发策略，可选字段，指定了如何处理被CronJob创建的job的并发执行。只允许指定三种策略之一\nAllow（默认）：允许并发运行job\nForbid：禁止并发运行，如果前一个还未完成，直接跳过下一个\nReplace：取消当前正运行的job，用新的替换\n# 当前策略只能应用于同一个CronJob创建的Job，如果存在多个CronJob，他们创建的Job之间总是允许并发运行\n.spec.suspend：挂起，可选字段。默认false，设置为true，后续所有执行都会被挂起，对已经开始执行的job不起作用\n.spec.successfulJobsHistoryLimit和.spec.faildJobsHistoryLimit：历史限制，可选字段，指定了可以保留多少完成和失败的job。默认分别3（成功保留3个副本） 1（失败保留1个副本），设置限制的值为0，相关类型的job完成后将不会被保留\n```\n> cronjob是否成功不好判断，只负责定期创建job，job的成功失败不会链接到cronjob\n\n---\n\n## 网络\n#### Service\n服务发现，客户端想访问一组Pod，通过标签搜寻Pod\n例：简单的一个svc（1个nginx、3个php Pod）3个pod的信息会记录到svc的负载队列，nginx配置信息只需指定到php的svc；pod如有更新会同步到svc里；nginx反向代理svc，svc会自动更新，不需要在nginx里做任何修改（不管pod扩缩容、更新，都不会对nginx或上一层服务造成影响）\n##### 概念：\nk8s service 定义了这样一种抽象：1个pod的逻辑分组，一种可以访问他们的策略 -- 通常称为微服务，每一个svc都是服务。这一组pod能够被service访问到，通常是通过label selector\n> svc能提供负载均衡的能力，但是在使用上有以下限制\n默认只提供4层负载均衡能力，没有7层功能，也就是不能通过主机名、域名方案去负载均衡；有时需要更多的匹配规则来转发请求，这点上4层负载均衡不支持；可通过添加Ingress方案添加7层负载均衡的能力\n\n##### svc类型\n在k8s中有以下四种类型：\n- ClusterIP（默认）：自动分配一个仅Cluster内部可以访问的虚拟IP\n主要在每个node节点使用iptables，将发向ClusterIP对应端口的数据，转发到kube-proxy中。kube-proxy自己内部实现有负载均衡的方法，并可以查询到service下对应pod的地址和端口，进而把数据转发给对应的pod的地址和端口\n![](k8sNote1/k8s_clusterip.png)\n为了实现上图的功能，主要需要一下几个组件协同工作：\n__apiserver__：用户通过kubectl命令向apiserver发送创建service的命令，apiserver接收到请求后将数据存储到etcd中\n__kube-proxy__：kubernetes的每个节点中都有一个叫作kube-proxy的进程，这个进程负责感知service、pod的变化，并将变化的信息写入本地的iptables规则中\n__iptables__：使用NAT等技术将virtualIP的流量转至endpoint中\n```bash\n## Headless Service（无头服务，特殊的ClusterIP）\n# 有时不需要或不想要负载均衡、以及单独的service ip（虚拟ip），可通过指定clusterip（spec.clusterIP）的值为None来创建Headless Service。这类service不会分配clusterip，kube-proxy不会处理他们，而且平台也不会为他们进行负载均衡和路由\n\napiVersion: v1\nkind: Service\nmetadata:\n  name: myapp-headless\n  namespace: default\nspec:\n  selector:\n    app: myqpp\n  clusterIP: \"None\"\n  ports:\n  - port: 80\n    targetPort: 80\n    \n(dig命令需yum -y install bind-utils)\ndig -t A myapp-headless.default.svc.cluster.local. @10.96.0.10\n\n无头服务中，虽然没有svc，但可通过域名访问至不同Pod\n```\n- NodePort：在ClusterIP基础上位svc在每台机器上绑定一个端口，这样就可以通过<NodeIP>:<NodePort>来访问该服务\n在node上开了一个端口，将向该端口的流量导入到kube-proxy，然后由kube-proxy进一步给到对应的pod\n```bash\n# 查询流程\nnetstat -anpt | grep :30715\niptables -t nat -nvL\nipvsadm -Ln\n```\n- LoadBalancer：在NodePort基础上，借助cloud provider(云供应商，要收费)创建一个外部负载均衡器，并将请求转发到<NodeIP>:<NodePort> \n和NodePort是同一种方式。区别在于LB比NodePort多了一步，就是可以调用cloud provider去创建LB来向节点导流，LB需花钱\n![](k8sNote1/k8s_lb.png)\n- ExternalName：把集群外部的服务引入到集群内部来，在集群内部直接使用。没有任何类型代理被创建，这只有k8s1.7或更高版本的kube-dns才支持\n这种类型的service通过返回CNAME和它的值，可以讲服务映射到externalName字段的内容（例：hub.jade.com）。ExternalName service是service的特例，它没有selector，也没有定义任何的端口和Endpoint。相反的，对于运行在集群外部的服务，它通过返回该外部服务的别名这种方式来提供服务\n```bash\nkind: Servcie\napiVersion: v1\nmetadata:\n  name: my-service-1\n  namespace: default\nspec:\n  type: ExternalName\n  externalName: hub.jade.com\n  \ndig -t A my-service-1.default.svc.cluster.local. @10.244.0.7\n```\n当查询主机my-service.default.svc.cluster.local(SVC_NAME.NAMESPACE.svc.cluster.local)时，集群的DNS服务将返回一个值my.database.example.com的CNAME记录。访问这个服务的工作方式和其他的相同，唯一不同的是重定向发生在DNS层，且不会进行代理或转发\n相当于DNS的别名操作，将外部服务引入集群内部\n##### VIP和SVC代理\nk8s集群中，每个Node运行一个kube-proxy进程。kube-proxy负责为svc实现了一种VIP(虚拟IP)的形式，而不是ExternalName的形式。\n- 在k8s1.0版本，代理完全在userspace\n- 在k8s1.1版本，新增iptables代理，但并不是默认的运行模式\n- 从k8s1.2起，默认iptables代理\n- 在k8s1.8.0-beata.0中，添加ipvs代理\n- 在k8s1.14版本，开始默认使用ipvs代理\n（性能递增）\n\n- 在k8s1.0版本，svc是4层(TCP/UDP over IP)概念\n- 在k8s1.1版本，新增Ingress API(beta版)，用来表示7层(HTTP)服务\n\n>？为什么不使用 round-robin DNS进行负载均衡\ndns会在很多客户端里进行缓存，很多服务访问dns进行域名解析，得到地址后，很多服务都不会清空缓存，意味着一旦有地址信息，不管访问几次还是这个地址信息\n\n##### 代理模式分类\n1. userspace代理模式\n![](k8sNote1/k8s_agent_us.png)\n2. iptables代理模式\n![](k8sNote1/k8s_agent_iptables.png)\n3. ipvs代理模式\n![](k8sNote1/k8s_agent_ipvs.png)\n    kube-proxy会监视k8s svc对象和endpoints，调用netlink接口以相应地创建ipvs规则并定期与k8s svc对象和endpoints对象同步ipvs规则，以确保ipvs状态与期望一致。访问服务时，流量将被重定向到其中一个后端Pod\n    与iptables类似，ipvs于netfilter的hook功能，但是用哈希表作为底层数据结构并在内核空间中工作。这意味着ipvs可以更快地重定向流量，并且在同步代理规则时具有更好的性能。此外，ipvs为负载均衡算法提供了更多选项，例如：\n- rr：轮询调度\n- lc：最小连接数\n- dh：目标哈希\n- sh：源哈希\n- sed：最短期望延迟\n- nq：不排队调度\n`ipvs模式假定在运行kube-proxy之前的节点上都已经安装了ipvs内核模块，当kube-proxy以ipvs代理模式启动时，kube-proxy将验证节点上是否安装了ipvs模块，如果未安装，则kube-proxy将回退到iptables代理模式`\n\n##### svc所需组件\n![](k8sNote1/k8s_svc_module.png)\n#### Ingress\n[Ingress-Nginx github地址]: https://gihub.com/kubernetes/ingress-nginx\n[Ingress-Nginx 官网网站]: https://kubernetes.github.io/ingress-nginx/\n![](k8sNote1/k8s_ingress.png)\n其实对于nginx来说，暴露方式依然是NodePort\n##### nginx内部协程沟通方案\n![](k8sNote1/k8s_nginx.png)\n\n#### 网络通讯模式\n##### 定义\nk8s的网络模型假定了所有Pod都在一个可以直接连通的扁平的网络空间中（pod间可通过ip直接访问）\n这在GCE（Google Compute Engine）里是现成的网络模型，k8s假定这个网络已存在\n而在私有云里搭建k8s，就不能假定这个网络已存在，需要自己实现网络假设，将不同节点上的docker容器间的互相访问先打通，然后运行k8s\n\n同一个Pod内的多个容器间：lo\n各Pod之间的通讯：Overlay Network\nPod与Service之间的通讯：各节点的iptables规则\n##### Flannel\n- 定义\n最常用的在k8s中解决网络扁平化的方案，符合cni接口\n是CoreOS针对k8s设计的一个网络规划服务，简单说是 让集群中不同节点主机创建的docker容器都具有全集群唯一的虚拟IP地址。而且它还能在这些IP地址之间建立一个覆盖网络（Overlay Network），通过这个覆盖网络，将数据包原封不动地传递到目标容器内\n- ETCD之Flannel提供说明：\n存储管理Flannel可分配的IP地址段资源  监控ETCD中每个Pod的实际地址，并在内存中建立维护Pod节点路由表\n##### 通讯方式\n- 同一个Pod内部通讯：\n同一个Pod共享同一个网络命名空间，共享同一个Linux协议栈（pause基础协议栈），直接使用lo（localhost）通讯\n- Pod1至Pod2\n不在同一台主机\n    Pod的地址是与docker0在同一个网段的，单docker0网段与宿主机网卡是两个完全不同的IP网段，并且不同Node之间的通信只能通过宿主机的物理网卡进行。将Pod的IP和所在Node的IP关联起来，通过这个关联让Pod可以互相访问\n在同一台机器\n    由docker0网桥直接转发请求至Pod2，不需要经过Flannel\n- Pod至Service的网络\n目前基于性能考虑，全部为iptables维护和转发最新版是lvs进行转发维护\n- Pod到外网\nPod向外网发送请求，查找路由表，转发数据包到宿主机的网卡，宿主网卡完成路由选择后，iptables执行Masquerade（snat），把源IP更改为宿主网卡的IP，然后向外网服务器发送请求\n- 外网访问Pod\nService借助service的nodeport方式\n\nService网络（虚拟内部网络）\nPod网络（虚拟内部网络）\n节点网络（真实物理网络）\n\n---\n\n## 存储\n#### configmap（配置文件注册中心）\n##### 描述信息\nConfigMap功能在k8s1.2版本中引入，许多应用程序会从配置文件、命令行参数或环境变量中读取配置信息\nConfigMap API给我们提供了向容器中注入配置信息的机制，ConfigMap可以被用来保存单个属性，也可以用来保存整个配置文件或者JSON二进制等对象\n##### 创建\n1. 使用目录创建\nkubectl create configmap game-config --from-file=../configmap/kubectl\n--from-file指定在目录下的所有文件都会被用在ConfigMap里面创建一个键值对，键：文件名；值：文件内容\n2. 使用文件创建\n只要指定为一个文件就可以从单个文件中创建ConfigMap\nkubectl create configmap game-config-2 --from-file=../configmap/kubectl/game.properties\n--from-file这个参数可以使用多次，可以使用两次分别指定上个实例中两个配置文件，效果和指定整个目录是一样的\n3. 使用字面值创建\n使用文字值创建，利用--from-literal参数传递配置信息，该参数可以使用多次，格式如下\nkubectl create cm special-config --from-literal=special.how=very --from-literal=special.type=charm\n##### Pod中使用ConfigMap\n- 使用cm替代环境变量（通过cm把环境变量注入到pod内部）\n```yml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: special-config\n  namespace: default\ndata:\n  special.how: very\n  special.type: charm\n\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: env-config\n  namespace: default\ndata:\n  log_level: INFO\n\napiVersion: v1\nkind: Pod\nmetadata:\n  name: dapi-test-pod\nspec:\n  containers:\n    - name: test-container\n    image: hub.jade.com/library/myapp:v1\n    command: [\"/bin/sh\", \"-c\", \"env\"]\n    env:\n      - name: SPECIAL_LEVEL_KEY\n        valueFrom:\n          configMapKeyRef:\n            name: special-config\n            key: special.how\n      - name: SPECIAL_TYPE_KEY\n        valueFrom:\n          configMapKeyRef:\n            name: special-config\n            key: special.type\n    envFrom:\n      - configMapRef:\n          name: env-config\n  restartPolicy: Never\n  \n# kubectl log dapi-test-pod 会看到环境变量\n```\n- 用ConfigMap设置命令行参数\n```yml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: special-config\n  namespace: default\ndata:\n  special.how: very\n  special.type: charm\n\napiVersion: v1\nkind: Pod\nmetadata:\n  name: dapi-test-pod\nspec:\n  containers:\n    - name: test-container\n      image: hub.jade.com/library/myapp:v1\n      command: [\"/bin/sh\", \"-c\", \"echo $(SPECIAL_LEVEL_KEY) $(SPECIAL_TYPE_KEY)\"]\n      env:\n        - name: SPECIAL_LEVEL_KEY\n          valueFrom:\n            configMapKeyRef:\n              name: special-config\n              key: special.how\n        - name: SPECIAL_TYPE_KEY\n          valueFrom:\n            configMapKeyRef:\n              name: special-config\n              key: special.type\n  restartPolicy: Never\n```\n- 通过数据卷插件使用ConfigMap\n```yml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: special-config\n  namespace: default\ndata:\n  special.how: very\n  special.type: charm\n```\n在数据卷里面使用这个cm，有不同的选项。\n最基本的就是将文件填入数据卷，在这个文件中，键：文件名；值：文件内容\n```yml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: dapi-test-pod\nspec:\n  containers:\n    - name: test-container\n    image: hub.jade.com/library/myapp:v1\n    command: [\"/bin/sh\", \"-c\", \"cat /etc/config/special.how\"]\n    volumeMounts:\n    - name: config-volume\n      mountPath: /etc/config\n  volumes:\n    - name: config-volume\n      configMap:\n        name: special-config\n  restart Policy: Never\n  \n  # kubectl exec <pod_name> -it -- /bin/sh \n  # cd /etc/config\n  # ls 可以看到special-config下的special.how和special.type\n```\n- ConfigMap的热更新\n```yml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: log-config\n  namespace: default\ndata:\n  log_level: INFO\n---\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: my-nginx\nspec:\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        run: my-nginx\n    spec:\n      containers:\n      - name: my-nginx\n        image: hub.jade.com/library/myapp:v1\n        ports:\n        - containerPort: 80\n        volumeMounts:\n        - name: config-volume\n          mountPath: /etc/config\n      volumes:\n        - name: config-volume\n          configMap:\n            name: log-config\n            \n# kubectl exec `kubectl get pods -l run=my-nginx -o=name | cut -d \"/\" -f2` -it -- cat /etc/config/log_level\nINFO\n```\n修改ConfigMap\n```bash\nkubectl edit configmap log-config\n```\n- 修改log_level的值为DEBUG等待大概10s，再次查看环境变量的值\n```bash\nkubectl exec `kubectl get pods -l run=my-nginx -o=name | cut -d \"/\" -f2` -it -- cat /tmp/log_level\nDEBUG\n```\n`特别注意：cm如果以env的方式挂载至容器，修改cm并不会实现热更新`\ncm更新后滚动更新Pod\n更新cm目前并不会触发相关pod的滚动更新，可以通过修改pod annotations的方式强制触发滚动更新\n```bash\nkubectl patch deploy my-nginx --patch '{\"spec\": {\"template\": {\"metadata\": {\"annotations\": {\"version/config\": \"20230301\"}}}}}'\n```\n这个例子里我们在.spec.template.metadata.annotations中添加version/config，每次通过修改version/config来触发滚动更新\n\n`！！！更新ConfigMap后：`\n- 使用该cm挂载的env不会同步更新\n- 使用该cm挂载的volume中的数据需要一段时间（实测大概10s）才能同步更新\n\n#### Secret\n##### 描述信息\nSecret解决了密码、token、密钥等敏感数据的配置问题，而不需要把这些敏感数据暴露到镜像或者Pod Spec中。Secret可以以Volume或环境变量的方式使用\n##### 分类\n- Service Account（不常用）\n用来访问k8s API，由k8s自动创建，并且会自动挂载到Pod的/run/secrets/kubernetes.io/serviceaccount目录中\n```bash\n# $ kubectl run nginx --image nginx\n# deployment \"nginx\" created\n# $ kubectl get pods\n$ kubectl exec kube-proxy-fb85x -n kube-system -it -- ls /run/secrets/kubernetes.io/serviceaccount\nca.crt\nnamespace\ntoken\n```\n- Opaque\n\tbase64编码格式的Secret，用来存储密码、密钥等\n    - 创建说明\nOpaque类型的数据是一个map类型，要求value是base64编码格式：\n```bash\n$ echo -n \"admin\" | base64\nYWRtaW4=\n$ echo -n \"1f2d1e2e67df\" | base64\nMNYyDFJKS1jidfj\n```\nsecrets.yml\n```yml\napiVersion: v1\nkind: Secret\nmetadata:\n  name: mysecret\ntype: Opaque\ndata:\n  password: MNYyDFJKS1jidfj\n  username: YWRtaW4=\n```\n    - 使用方式\n```yml\n## 1.将Secret挂载到Volume中\napiVersion: v1\nkind: Pod\nmetadata:\n  labels:\n    name: secret-test\n  name: secret-test\nspec:\n  volumes:\n  - name: secrets\n    secret:\n      secretName: mysecret\n  containers:\n  - image: hub.jade.com/library/myapp:v1\n    name: db\n    volumeMounts:\n    - name: secrets\n      mountPath: \"/etc/secrets\"\n      readOnly: true\n# kubectl exec secret-test -it -- cat /etc/secrets/username\nadmin\n\n## 2.将Secret导出到环境变量中\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: pod-deployment\nspec:\n  replicas: 2\n  template:\n    metadata:\n      labels:\n        app: pod-deployment\n    spec:\n      containers:\n      - name: pod-1\n        image: hub.jade.com/library/myapp:v1\n        ports:\n        - containerPort: 80\n        env:\n        - name: TEST_USER\n          valueFrom:\n            secretKeyRef:\n              name: mysecret\n              key: username\n        - name: TEST_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: mysecret\n              key:password\n# kubectl exec pod-deployment-782347234-983284 -it -- echo $TEST_USER $TEST_PASSWORD\nadmin\n1f2d1e2e67df\n```\n- kubernetes.io/dockerconfigjson\n用来存储私有docker registry的认证信息\n```bash\n# 使用kubectl创建docker registry认证的secret\n# $ kubectl create secret docker-registry myregistrykey --docker-server=DOCKER_REGISTRY_SERVER --docker-username=DOCKER_USER --docker-password=DOCKER_PASSWORD --docker-email=DOCKER_EMAIL\n$ kubectl create secret docker-registry myregistrykey --docker-server=hub.jade.com --docker-username=admin --docker-password=Harbor12345 --docker-email=281108530@qq.com\nsecret \"myregistrykey\" created.\n\n# 在创建Pod的时候，通过imagePullSecrets来引用刚创建的myregistrykey\napiVersion: v1\nkind: Pod\nmetadata:\n  name: foo\nspec:\n  containers:\n    - name: foo\n      image: hub.jade.com/test/myapp:v2 # 私有仓库的镜像\n  imagePullSecrets:\n    - name: myregistrykey # 使用secret docker-registry myregistrykey进行认证\n```\n`如果不指定imagePullSecrets，拉取私有仓库镜像时会报错`\n![](k8sNote1/k8s_image_pull.png)\n#### Volume\n##### 概念\n容器磁盘上的文件的生命周期是短暂的，这就使得在容器中运行重要应用时会出现一些问题。\n首先，当容器崩溃时，kubelet会重启它，但是容器中的文件将丢失（容器以镜像初始状态重新启动）；\n其次，在Pod中同时运行多个容器时，这些容器之间通常需要共享文件，k8s中的Volume抽象可以很好的解决这些问题\n##### 背景\nk8s中的卷有明确的寿命（与封装它的Pod相同），所以卷的生命比Pod中所有容器都长，当这个容器重启时，数据仍然得以保存\n当然，当Pod不再存在时，卷也不复存在\nk8s支持多种类型的卷，Pod可以同时使用任意数量的卷\n![](k8sNote1/k8s_volume.png)\npod重启后，volume数据还在\n##### 卷的类型\nk8s支持以下类型的卷\n- awsElsticVlockStor、azureDisk、azureFile、cephfs、csi、downwardAPI、emptyDir\n- fc、flocker、gcePersistentDisk、gitRepo、glusterfs、hostPath、iscsi、local、nfs\n- persistentVolumeClaim、projected、potworxVolume、quobyte、rbd、scaleIO、secret\n- storagesos、vsphereVolume\n__emptyDir__\n当Pod被分配给节点时，首先创建emptyDir卷，并且只要该Pod在该节点上运行，该卷就会存在\n正如卷名，它最初是空的\nPod中的容器可以读取和写入emptyDir卷中的相同文件，尽管该卷可以挂载到每个容器中的相同或不同路径上\n当出于任何原因从节点中删除Pod时，emptyDir中的数据被永久删除\n`容器崩溃不会从节点中移除Pod，因此emptyDir卷中的数据在容器崩溃时是安全的`\n\n【emptyDir用法】：\n- 暂存空间，例如用于基于磁盘的合并排序\n- 用作长时间计算崩溃恢复时的检查点\n- Web服务器容器提供数据时，保存内容管理器容器提取的文件\n```bash\napiVersion: v1\nkind: Pod\nmetadata:\n  name: test-pod-emptyDir\nspec:\n  containers:\n  - name: test-container1\n    image: hub.jade.com/test/myapp:v2\n    volumeMounts:\n    - mountPath: /cache\n      name: cache-volume\n  containers:\n  - name: test-container2\n    image: busybox\n    imagePullPolicy: IfNotPresent\n    command: [\"/bin/sh\", \"-c\", \"sleep 6000s\"]\n    volumeMounts:\n    - mountPath: /test\n      name: cache-volume\n  volumes:\n  - name: cache-volue\n    emptyDir: {}\n    \n# kubectl exec test-pod-emptyDir -it -- ls /cache\n空的\n# kubectl exec test-pod-emptyDir -c test-container1 -it -- cd /cache date>test.txt\n# kubectl exec test-pod-emptyDir -c test-container2 -it -- cd /test date>>test.txt\n两个目录下都有test.txt且内容相同\n```\n\n__hostPath__\nhostPath卷将主机节点的文件系统中的文件或目录挂载到集群中\n\n【hostPath用途】：\n- 运行需要访问Docker内部的容器；使用/var/lib/docker的hostPath\n- 在容器中运行cAdvisor；使用/dev/cgroups的hostPath\n\n除了所需的path属性之外，用户还可以为hostPath卷指定type\n| 值 | 行为 |\n| :--- | :--- |\n|  | 空字符串（默认）用于向后兼容，意味着在挂载hostPath卷之前不会执行任何检查 |\n| DirectoryOrCreate | 如果在给定的路径上没有任何东西存在，那么将根据需要在那里创建一个空目录，权限设置为0755，与kubelet具有相同的组和所有权 |\n| Directory | 给定的路径下必须存在目录 |\n| FileOrCreate | 如果在给定的路径上没有任何东西存在，那么会根据需要创建一个空文件，权限设置为0644，与kubelet具有相同的组和所有权 |\n| File | 给定的路径下必须存在文件 |\n| Socket | 给定的路径下必须存在UNIX套接字 |\n| CharDevice | 给定的路径下必须存在字符设备 |\n| BlockDevice | 给定的路径下必须存在块设备 |\n\n使用hostPath卷类型时请注意：\n- 由于每个节点上的文件不同，具有相同配置（例如从podTemplate创建的）的pod在不同节点上的行为可能会有所不同\n- 当k8s按照计划添加资源感知调度时，将无法考虑hostPath使用的资源\n- 在底层主机上创建的文件或目录只能由root写入。需要在特权容器中以root身份运行进程，或修改主机上的文件权限以便写入hostPath卷\n```yml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: test-pd\nspec:\n  containers:\n  - name: test-container\n    image: hub.jade.com/test/myapp:v2\n    volumeMounts:\n    - mountPath: /test-pd\n      name: test-volume\n  volumes:\n  - name: test-volume\n    hostPath:\n      # directory location on host\n      path: /data\n      # this field is optional\n      type: Directory\n\n# 进容器写入文件\nkubectl exec test-pd -it -- /bin/sh\ncd /test-pd/\ndate > test.txt\n# 到主机节点查看\ncat /data/test.txt\n```\n#### Persistent Volume（PV）持久卷\n![](k8sNote1/k8s_pv.png)\n是由管理员设置的存储，它是集群的一部分\n就像节点是集群中的资源一样，PV也是集群中的资源\nPV是Volume之类的卷插件，但具有独立于使用PV的Pod的生命周期\n此API对象包含存储实现的细节，即NFS、iSCSI或特定于云供应商的存储系统\n##### 静态pv\n集群管理员创建一些pv，他们带有可供集群用户使用的实际存储的细节，他们存在于k8s api中，可用于消费\n##### 动态\n暂时不友好，实现方案较难 价格昂贵\n当管理员创建的静态pv都不匹配用户的pvc时，集群可能会尝试动态地为pvc创建卷，此配置基于StorageClasses：pvc必须请求【存储类】，并且管理员必须创建并配置该类才能进行动态创建，声明该类为可以有效地禁用其动态配置\n要启用基于存储级别的动态存储配置，集群管理员需要启用api server上的DefaultStorageClass【准入控制器】。例如，通过确保DefaultStorageClass位于apiServer组件的--admission-control标志，使用逗号分隔的有序值列表中，可以完成此操作\n##### 类型\npv类型以插件形式实现，k8s目前支持以下插件类型\n- GCEPersistentDisk AWSElasticBlockStore AzureFile FC(Fibre Channel)\n- FlexVolume  Flocker NFS iSCSI RBD(Ceph Block Device) CephFS\n- Cinder(OpenStack block storage)  Glusterfs  VsphereVolume  Quobyte Volumes\n- HostPath  VMware Photon  Portwirx Volumes  ScaleIO Volumes  StorageOS\n##### pv演示代码\n```yml\n# nfs机制\napiVersion: v1\nkind: PersistentVolume\nmetadata:\n  name: pv0003\nspec:\n  capacity:\n    storage: 5Gi\n  volumeMode: Filesystem\n  accessModes:\n  - ReadWriteOnce\n  persistentVolumeReclaimPolicy: Recycle\n  storageClassName: slow\n  mountOptions:\n  - hard\n  - nfsvers=4.1\n  nfs:\n    path: /tmp\n    server: 172.17.0.2\n```\n##### pv访问模式\nPersistentVolume可以以资源提供者支持的任何方式挂载到主机上，如下表所示，供应商具有不通的功能，每个pv的访问模式都将被设置为该卷支持的特定模式。例如，nfs可以支持多个读/写客户端，但特定的NFS PV可能以只读方式导出到服务器上，每个pv都有一套自己的用来描述特定功能的访问模式\n- ReadWriteOnce--该卷可被单个节点以读写模式挂载\n- ReadOnlyMany--该卷可被多个节点以只读模式挂载\n- ReadWriteMany--该卷可被多个节点以读写模式挂载\n在命令行中，accessModes缩写：RWO ROX RWX\n`1个卷1次只能使用1种访问模式挂载，即使它支持很多访问模式，例如GCEPersistentDisk可以由单个节点作为RWO模式挂载，或由多个节点以ROX模式挂载，但不能同时挂载`\n![](k8sNote1/k8s_pv_accessmode.png)\n##### 回收策略\n- Retain（保留）-- 手动回收（pv不再继续使用时也不允许被别人使用，进入保留状态，等待管理员手动释放）\n~~- Recycle（回收）-- 基本擦除(rm -rf /thevolume/*)已废弃~~\n- Delete（删除）-- 关联的存储资产（例如AWS EVS、GCE PD、Azure Disk和OpenStack Cinder卷）将被删除\n当前，只有NFS和HostPath支持回收策略。AWS EBS、GCE PD、Azure Disk和Cinder卷支持删除策略\n##### 状态\n卷可以处于一下某种状态：\n- Available（可用）-- 一块空闲资源还没有被任何声明绑定\n- Bound（已绑定）-- 卷已经被声明绑定\n- Released（已释放）-- 声明被删除，但是资源还未被集群重新声明\n- Failed（失败）-- 该卷的自动回收失败\n命令行会显示绑定到pv的pvc的名称\n#### PersistentVolumeClaim（PVC）持久卷声明\n是用户存储的请求，与Pod相似\nPod消耗节点资源，pvc消耗pv资源\nPod可以请求特定级别的资源（CPU、Memory）\n声明可以请求特定的大小和访问模式（例如可以以读/写一次或只读多次模式挂载）\n##### 绑定\nmaster中的控制环路监视新的pvc，寻找匹配的pv（如果可能），并将他们绑定在一起，如果为新的pvc动态调配pv，则该环路将始终将该pv绑定到pvc。否则，用户总会得到他们所请求的存储，但是容量可能超出要求的数量，一旦pv和pvc绑定后，PersistentVolumeClaim绑定是排他性的，不管他们是如何绑定的，pvc跟pv绑定是一对一的映射\n##### pvc的保护\npvc保护的目的是确保由pod正在使用的pvc不会从系统中移除，因为如果被移除的话，可能会导致数据丢失\n注意：当pod状态为Pending且pod已经分配给节点 或 pod为Running状态时，pvc处于活动状态\n当启用pvc保护alpha功能时，如果用户删除了一个pod正在使用的pvc，则该pvc不会被立即删除，pvc的删除将被推迟，直到ovc不再被任何pod使用\n##### 持久化演示说明 - NFS\n![](k8sNote1/k8s_pvs_nfs.png)\n1. 安装NFS服务器\n```bash\nyum install -y nfs-common nfs-utils recbind\nmkdir /nfsdata\nchmod 666 /nfsdata\nchown nfsnobody /nfsdata\ncat /etc/exports\n    /nfsdata *(rw,no_root_squash,no_all_squash,sync)\n    /nfsdata1 *(rw,no_root_squash,no_all_squash,sync)\n    /nfsdata2 *(rw,no_root_squash,no_all_squash,sync)\n    /nfsdata3 *(rw,no_root_squash,no_all_squash,sync)\nsystemctl start rpcbind\nsystemctl start nfs\n\n## 测试nfs是否可用\nmkdir /test\n# 查看共享目录\nshowmount -e 192.168.66.100\n# 挂载\nmount -t nfs 192.168.66.100:/nfs /test/\n# 解除挂载\numount /test/\n```\n2. 部署PV\n```yml\napiVersion: v1\nkind: PersistentVolume\nmetadata:\n  name: nfspv1\nspec:\n  capacity:\n    storage: 10Gi\n  accessModes:\n  - ReadWriteOnce\n  persistentVolumeReclaimPolicy: Retain\n  storageClassName: nfs\n  nfs:\n    path: /nfs\n    server: 192.168.66.100\n```\n3. 创建服务并使用pvc\n```yml\n# 想创建sts，必须先创建无头svc，不需要对应的ip及端口\napiVersion: v1\nkind: Service\nmetadata:\n  name: nginx\n  labels:\n    app: nginx\nspec:\n  ports:\n  - port: 80\n    name: web\n  clusterIP: None # 无头服务\n  selector:\n    app: nginx\n---\napiVersion: apps/v1\nkind: StatefuleSet\nmetadata:\n  name: web\nspec:\n  selector:\n    matchLabels:\n      app: nginx\n  serviceName: \"nginx\"\n  replicas: 3\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n      - name: nginx\n        image: hub.jade.com/library/myapp:v2\n        ports:\n        - containerPort: 80\n          name: web\n        volumeMounts:\n        - name: www\n          mountPath: /usr/share/nginx/html\n  volumeClaimTemplates:\n  - metadata:\n      name: www\n    spec:\n      accessModes: [ \"ReadWriteOnce\" ]\n      storageClassName: \"nfs\"\n      resources:\n        requests:\n          storage: 1Gi  # ≥此大小即可，优先选符合条件最小的\n```\n#### 关于sts\n- 匹配Pod name（网络标识）的模式为：${sts名称}-${序号}，比如上面的示例web-0、web-1、web-2\n- sts为每个pod副本创建了一个dns域名，这个域名的格式为${podName}.${headless server name}，也就意味着服务间是通过pod域名来通信而非Pod IP，因为当Pod所在node发生故障时，pod会被飘移到其他node上，pod IP会发生变化，但是Pod域名不会有变化\n- sts使用Headless服务来控制Pod的域名，这个域名的FQDN为${servicename}.${ns}.svc.cluster.local，其中，cluster.local指的是集群的域名\n- 根据volumeClaimTemplates，为每个Pod创建一个pvc，pvc的命名规则匹配模式：${volumeClaimTemplates.name}-${pod_name}，比如上面的volumeMounts.name=www，Podname=web-[0-2]，因此创建出来的PVC是www-web-0、www-web-1、www-web-2\n- 删除pod不会删除其pvc，手动删除pvc将自动释放pv\n##### sts的启停顺序\n- 有序部署：部署sts时，如有多个pod副本，会被按顺序地创建（从0到N-1）并且，在下一个pod运行之前所有pod必须是running和ready状态\n- 有序删除：当pod被删除时，它们被终止的顺序是从n-1到0\n- 有序扩展：当对pod执行扩展时，与部署一样，前边pod必须是running和ready\n##### sts使用场景\n- 稳定的持久化存储，即Pod重新调度后还是能访问到相同的持久化数据，基于pvc来实现\n- 稳定的网络标识符，即pod重新调度后其PodName和HostName不变\n- 有序部署，有序扩展，基于init containers来实现\n- 有序收缩","tags":["k8s"],"categories":["study","notes"]},{"title":"ansible备忘","url":"/2025/04/09/ansibleNote/","content":"# ansible\n- 【背景】\nansible首次发布于2012年，作者Michael DeHaan\nMichael DeHaan也是Cobbler的作者\n于2015年被RedHat收购\nAnsible是一款自动化运维工具，基于Python开发（控制端需要有python环境）\n批量系统部署、程序部署、运行命令等功能\n- 【特色】\n1.基于ssh做远程管理，被控制端必须开启ssh服务\n2.模块丰富\n3.社区活跃\n4.支持自定义模块\n5.支持异构IT架构\n6.部署简单，容易上手\n\n- 【下载】\ndnf -y install ansible-core ansible-navigator\nansible-core 主程序包\nansible-navigator 9版本，可以调用容器中模块的包\n- 【配置】\n主配置文件：/etc/ansible/ansible.cfg\nAnsible配置文件查找顺序：\n首先检测ANSIBLE_CONFIG变量定义的配置文件\n其次检查当前目录下的ansible.cfg文件\n再次检查当前用户家目录下的.ansible.cfg文件\n最后检查/etc/ansible/ansible.cfg文件\n/etc/ansible/ansible.cfg里可参考，执行ansible-config init --disabled > /tmp/ansible.cfg可看到真实配置\n```bash\n## 写配置\nmkdir ansible;cd ansible;vim ansible.cfg\n# 加空格只是为了美观\n[defaults]\ninventory = ./jadehosts  # ˈɪnvəntɔːri  (建筑物里的物品、家具等的)清单；指定主机清单\nremote_user = jade # 指定用户，不写默认root\n\n[privilege_escalation] # 权限相关配置\nbecome=True # 是否需要切换用户\nbecome_method=sudo # 以什么样的形式切换\nbecome_user=root # 切换成什么用户\nbecome_ask_pass=False # 切换时是否需要输入密码\n\n\nvim ./jadehosts // 配置主机ip或域名\n[test]\nnode1\n[webserver]\nnode[3:4]\n[test2]\nnode2\n[qiantaozu:children]\ntest\nwebserver\n```\n```bash\n# 检查配置是否正确，查看所有主机列表\nansible all --list-hosts\nansible node1,qiantaozu -m ping\n# ansible执行结果颜色区分：红色（报错）；绿色（成功）；黄色（执行发生改变了）\n## 配置机器免密\n#生成秘钥、传公钥给受管主机\nssh-keygen -f /root/.ssh/id_rsa -N ' '\nls /root/.ssh/\n#传输命令之一ssh-copy-id 主机\nfor i in node{1..5} ;do ssh-copy-id $i;done\n#检查是否免密\nansible node1 -m ping\n# 虽说模块名是ping，但不走icmp协议的策略，和平时的ping不一样，这里的ping只检测能否ssh、有无python环境，都ok返回success\n```\n## 【ansible ad-hoc命令行】\nansible ad-hoc是一种通过命令行批量管理的方式，适合执行一些临时性简单任务\n语法格式：ansible 主机集合 -m 模块名 -a \"参数\" （不指定-m，默认command）\n默认模块为【command】：把linux操作系统中所有可执行的命令，传递给被管理主机，直接执行命令\nansible node1 -m command -a \"uptime\"\n\n> 查看模块帮助\nansible-doc command\nansible-doc -l | wc -l # 统计有多少个模块\n\n### 【常用模块】\n#### shell模块\n与command模块区别：\n\tcommand模块不支持bash特性，如管道和重定向等功能\n\t所有需要调用shell的功能都无法使用\n\tshell模块会启动shell执行命令，不可以使用shell模块执行交互命令，如vim、top等\n```bash\nansible node1 -m command -a 'ps &' # ps放到后台，报错\nansible node1 -m command -a 'ps > a.txt' # 报错\nansible node1 -m command -a 'ps aux | wc -l' # 报错\nansible node1 -m shell -a 'ps aux | wc -l' # 成功\n\n# 检查用户\nansible all -m shell -a \"cat secure* | grep Accept | awk -F/\" /\" '{if($1==/\"Jul/\" &amp;&amp; $2>20){print $0}}'\" -i /etc/ansible/user_check_hosts\n# 检查网络连通性\nansible all -m shell -a \"ping www.baidu.com -c 1 -image 0.2 -W 1 &amp;> /dev/null\" -i /etc/ansible/hosts\n\n```\n\n#### script模块\nscript允许在本地写脚本，拷贝到被管理端并执行脚本\n可以是shell、python、perl脚本，可以没有-x\n```bash\nvim test.sh\n#!/bin/bash\ntouch /opt/a.txt\nuseradd bob\n\nansible node1,node2 -m script -a \"./teset.sh\"\nansible node1,node2 -m shell -a \"ls /opt;id bob\"\n```\n#### file模块\n可以创建文件、目录、链接；修改权限与属性等\n幂等性：任意次执行所产生的影响均与一次执行的影响相同\n```bash\n# 新建文件\nansible node1 -m file -a \"path=/tmp/file.txt state=touch\"\n# 新建目录\nansible node1 -m file -a \"path=/tmp/mydir state=directory\"\n# 修改文件权限（修改时，所有者、所属组必须存在）\nansible node1 -m file -a \"path=/tmp/file.txt owner=sshd group=adm mode=0777\"\n# 删除文件目录\nansible node1 -m file -a \"path=/tmp/mydir state=absent\"\n# 创建链接文件(类似快捷方式)\nansible node1 -m file -a \"src=/etc/hosts path=/tmp/hosts state=link\"\nansible node1 -m shell -a \"ls -l /tmp/hosts\"\n```\n#### copy模块\n将文件拷贝到远程主机\nbackup=yes如果目标主机有同名文件，先备份\n幂等性\n```bash\n# 新建测试文件\necho \"test\" > ~/a.txt\n# 拷贝到目标主机指定目录下\nansible testnodezu -m copy -a \"src=~/a.txt dest=/root\"\n# 拷贝到目标主机指定目录下并重命名\nansible testnodezu -m copy -a \"src=~/a.txt dest=/root/achage.txt\"\n# 没有源文件，通过content直接提供文件内容 \\n代表回车\nansible testnodezu -m copy -a \"content='hello world\\ntest' dest=/root/test.txt\"\n```\n#### fetch模块\n与copy作用相反，将其他主机的文件拷贝到本地\n```bash\n# 将远程主机的hostname文件下载到本地家目录（避免多个主机同名文件，fetch会在拷贝时新增对应主机名的目录）\nansible node1 -m fetch -a \"src=/etc/hostname dest=~/\"\nls ~/node1/etc\n```\n#### lineinfile|replace模块\n幂等性\n```bash\n## 在修改单个文件的单行内容时可以使用lineinfile模块\n# 在/etc/issue中添加一行，默认加到最后一行；基于幂等性，重复执行只会有一行\nansible node1 -m lineinfile -a \"path=/etc/issue line='hello world'\"\n## lineinfile会替换一整行，replace可以替换关键词\n# 将/etc/issue.net文件全文所有的Kernel替换为Ocean\nansible node1 -m replace -a \"path=/etc/issue.net regexp=Kernel replace=Ocean\"\n```\n#### user模块\n```bash\n# 远程test组中所有主机，并创建系统用户tuser1，state不写默认是present（创建）\nansible test -m user -a \"name=tuser1\"\n# 创建用户并设置对应的用户属(groups指定附加组，home指定家目录，shell指定解释器)\nansible node1 -m user -a \"name=tuser2 uid=1020 group=adm groups=daemon,root home= shell=\"\n# 修改用户密码(ansible修改的密码需经过password_hash('sha512')加密，否则不生效)\nansible node1 -m user -a \"name=tuser1 password={{'abc' | password_hash('sha512')}}\"\nssh tuser1@node1\n# 修改tuser1用户的附加组\nansible node1 -m user -a \"name=tuser1 groups=daemon\"\n# 删除用户tuser1\nansible node1 -m user -a \"name=tuser1 state=absent\"\n# 删除用户tuser2（删除时同步删除家目录、邮箱）\nansible node1 -m user -a \"name=tuser1 state=absent remove=true\"\n```\n#### group模块\n```bash\n# 创建stugp组，state不写默认present\nansible node1 -m group -a \"name=stugp\"\n# 删除组\nansible node1 -m group -a \"name=stugp state=absent\"\n``` \n#### yum_repository模块\n可以创建、修改yum源配置文件\n```bash\n# 新建一个yum源配置文件/etc/yum.repos.d/myyum.repo\nansible all -m yum_repository -a \"name=a description=aaa baseurl=yum源地址 gpgcheck=0\"\nansible all -m shell a \"cat /etc/yum.repos.d/a.repo\"\n# 无法实现同一个repo文件写两个yum源地址，只能一个yum源一个文件，且ansible会多生成一个async=1字段，启用并发下载\n```\n \n#### yum模块\n安装卸载升级软件包\n```bash\nstate：present（安装） absent（卸载） latest（升级）\nansible node1 -m yum -a \"name=unzip state=present\"\n```\n \n#### service模块\n服务管理模块，启动、关闭、重启服务等\nstate：started（开启） stopped（停止） restarted（重启） \nenabled=yes（开机自启）\n```bash\n# 开启服务\nansible node1 -m service -a \"name=httpd state=started\"\n# 开机自启并启动\nansible node1 -m service -a \"name=httpd enabled=yes state=started\"\n```\n \n#### 分区、逻辑卷相关模块\nstate：present（创建） absent（删除）\n##### 【part】模块：对硬盘分区\n```bash\n# 安装新collection，可以使用parted等模块\nansible-galaxy collection install http://server1.lab0.example.com/materials/community-general-6.3.0.tar.gz\n# 远程node2，对vdc进行分区，大小100M\nansible node2 -m parted -a \"device=/dev/vdc num=1 part_end=100Mib state=present\"\n# 第二个分区，要从第一个分区的end开始\nansible node2 -m parted -a \"device=/dev/vdc num=2 part_start=100Mib part_end=200Mib state=present\"\n# 删除第2个分区\nansible node2 -m parted -a \"device=/dev/vdc num=2 state=absent\"\n```\n\n##### 【filesystem】模块：用于格式化（创建文件系统）\nfstype 指定文件系统类型\ndev 指定要格式化的设备，可以是分区、逻辑卷\n```bash\n# 格式化为ext4文件系统类型\nansible node1 -m filesystem -a \"dev=/dev/vdc1 fstype=ext4\"\n# 再次格式化同一个分区为xfs文件系统类型\nansible node1 -m filesystem -a \"dev=/dev/vdc1 fstype=xfs force=true\"\n```\n\n##### 【mount】模块：用于挂载文件系统\npath 挂载点，若挂载点不存在，自动创建\nsrc 待挂载的设备\nfstype 文件系统类型\nstate=mounted 永久挂载\n```bash\n# 装包，9以上ansible基础包不包含mount，需下载额外的包（/var/www/html就是访问ip对应的物理路径）\nansible-galaxy collection install http://server1.lab0.example.com/materials/ansible-posix-1.5.1.tar.gz\n# 将/dev/vdc1分区挂载到/data\nansible node1 -m mount -a \"path=/data src=/dev/vdc1 fstype=xfs state=mounted\"\nssh node1 ; df -Th\n```\n\n##### 【lvg】模块：创建、删除卷组(vg)、修改卷组大小\n```bash\n# 先建个分区\nansible node1 -m parted -a \"dev=/dev/vdc num=2 part_start=100MiB part_end=200MiB state=present\"\n# 创建名为myvg的卷组，该卷组由/dev/vdc2组成\nansible node1 -m lvg -a \"vg=myvg pvs=/dev/vdc2 state=present\"\n# 删除卷组\nansible node1 -m lvg -a \"vg=myvg state=absent\"\n```\n\n##### 【lvol】模块：创建、删除逻辑卷（lv）、修改逻辑卷大小\n```bash\n# 创建逻辑卷,名为mylv，大小50M（从上边创建的myvg卷组中）\nansible node1 -m lvol -a \"lv=mylv vg=myvg size=50M\"\n# 删除逻辑卷\nansible node1 -m lvol -a \"lv=mylv state=absent force=true\"\n```\n \n#### firewalld模块\nstate：present enabled（添加） disabled（删除）\n```bash\n# 查看帮助文档（不在基础包里，在ansible-posix里）\nansible-doc firewalld\nzone：安全区域\npermanent：true永久生效 # 往区域里加规则需要加此参数，只改zone不需要\nimmediate：true立即生效\nservice：http协议\nport：端口\n# 添加、删除规则，放行http协议\nansible node1 -m firewalld -a \"state=enabled service=http permanent=yes immediate=yes\"\nansible node1 -m shell -a \"firewall-cmd --list-all | grep service\"\nansible node1 -m firewalld -a \"state=disabled service=http permanent=yes immediate=yes\"\n# 添加、删除规则，放行端口\nansible node1 -m firewalld -a \"state=enabled port=80/tcp permanent=yes immediate=yes\"\nansible node1 -m shell -a \"firewall-cmd --list-all | grep port\"\nansible node1 -m firewalld -a \"state=disabled port=80/tcp permanent=yes immediate=yes\"\n```\n \n#### setup模块\nansible_factes用于采集被管理设备的系统信息（内存、网卡）\t\n所有收集的信息都被保存在变量中\n每次执行playbook默认第一个任务就是Gathering Fact\n使用setup模块可以查看收集到的facts信息\n有父子关系使用.表示\n```bash\n# 查看收集到的信息\nansible test -m setup | less\n# 过滤关于内存的信息\nansible test -m setup -a \"filter=ansible_mem*\"\n# 过滤关于enp1s0网卡的信息\nansible test -m setup -a \"filter=ansible_enp1s0*\"\n# 查看主机名\nansible test -m setup -a \"filter=ansible_enp1s0*\"\n# 查看完全域名、完全主机名\nansible test -m setup -a \"filter=ansible_fqdn\"\n# 查看bios相关信息\nansible test -m setup -a \"filter=ansible_bios*\"\n\n# 常见变量：\nansible_enp1s0.ipv4.address   # enp1s0网卡的ip地址\nansible_hostname   # 主机名\nansible_memfree_mb   # 内存剩余大小，单位mb\nansible_fqdn   # 完整主机名\nansible_bios_version   # bios版本\nansible_devices.vda.size   # 第一块硬盘大小\nansible_devices.vda.partitions.vda1.size   # 第一块硬盘第一个分区大小\nansible_lvm.lvs.root.size_g   # 逻辑卷root的大小\nansible_kernel   # 内核版本信息\n```\n \n#### debug模块\n```bash\n# 查看node1主机有关的魔法变量，如果该任务写成剧本，由于剧本会自动收集普通变量，所以到时还会看到除了魔法变量之外的普通变量，如ip、内存大小等\nansible node1 -m debug -a \"msg={{hostvars.node1}}\"\n```\n \n#### get_url模块\n```bash\n# 从网络下载文件\nansible node1 -m get_url -a \"url=http://server dest=\"\n```\n\n---\n\n## 【ansible playbook】\nansible playbook：剧本\n①将经常需要执行的任务写入一个文件（剧本）\n②剧本中可以包含多个任务\n③剧本写好后，随时根据剧本，执行相关的任务命令\n④playbook剧本要求按照yaml格式编写\n⑤适合执行周期性经常执行的复杂任务\n\n语法格式：\n```yaml\n- yaml格式\n- 剧本文件中由1个或多个play组成\n- 每个play可包含：\n    - hosts（主机）\n    - tasks（任务）\n    - variables（变量）\n    - roles（角色）\n    - handlers（触发器）\n- 使用ansbile-playbook命令运行\n```\n\n### vim写yaml小技巧\n```bash\nvim ~/.vimrc # 只对对应用户有效\nset nu ai ts=2 et cuc\n# nu：行号\n# ai：自动缩进\n# ts：一个table等于几个空格\n# et：把table转成空格\n# cuc：光标列对齐\n```\n \n\n### playbook格式\n```bash\n# 配置yum源、装包\n# 另开一个窗口：ansible-doc yum_repository # 搜EXAMPLES，直接粘过来修改\nvim yum_install.yaml\n---\n- hosts: all\n  tasks:\n  - name: Add multiple repositories into the same file（1/2） # 可不写，不写直接写下边的模块名\n    yum_repository:\n      name: AppStream\n      description: AppStream\n      baseurl: https://server1.lab0.example/rhel9/AppStream\n      gpgcheck: no\n  - name: Add multiple repositories into the same file（2/2） # 可不写，不写直接写下边的模块名\n    yum_repository:\n      name: AppStream\n      description: AppStream\n      baseurl: https://server1.lab0.example/rhel9/AppStream\n      gpgcheck: no\n# 以上算1个play，再写play要顶格写，也可用name加描述信息\n# 另开一个窗口：ansible-doc yum # 搜EXAMPLES，直接粘过来修改\n- name: install package # 可写可不写，不写就得- hosts\n  hosts: webserver\n  tasks:\n  - name: install a list package\n    yum:\n      name:\n      - httpd\n      - mariadb\n      - mariadb-server\n  - name: install a group package\n    yum:\n      name: \"@Development tools\"\n  - name: update software\n    yum:\n      name: \"*\"\n      state: latest\n\nansible-playbook yum_install.yaml\nansible webserver -m shell -a \"rpm -q httpd mariadb mariadb-server\"\nansible webserver -m shell -a \"dnf grouplist\"\n```\n\n### debug模块\n可以显示变量的值，可以辅助排错\n```yaml\n\tvar：引用变量不需要{{}}\n\tmsg：引用变量需要{{}}\n```\n```bash\nvim debug.yaml\n---\n- hosts: test\n  tasks:\n  - debug:\n      var: ansible_all_ipv4_addresses\n  - debug:\n      msg: \"主机名是:{{ ansible_hostname }}\"\n  - debug:\n      msg: \"总内存大小是{{ ansible_memtotal_mb }}\"\n\nansible-playbook debug.yml\n```\n### template模块\ncopy模块可以将一个文件拷贝给远程主机，但是希望每个文件内容都不一样，需要用到template\n如何给所有web主机拷贝index.html内容是各自的IP地址、含有变量\nansible可以利用jinja2模板引擎读取变量\n```text\n\t在playbook中调用变量，也是jinja2的功能\n\tjinja2模块的表达式包含在分隔符{{}}内\n```\n使用template模块将含有变量的文件上传到webserver组中的主机\n```bash\nmkdir template\n# 写一个含有变量的文件\nvim template/index.html\nWelcome to {{ ansible_hostname }}\n# \nvim template.yml\n---\n- hosts: webserver\n  tasks: \n  - name: install httpd\n    yum:\n      name: httpd\n  - name: use template module\n    template:\n      src: ~/ansible/template/index.html\n      dest: /var/www/html/index.html   # httpd服务默认网页路径\n\nansible-playbook template.yml\nansible webserver -m shell -a \"cat /var/www/html/index.html\"\n\n# jin2写for循环示例：\n{% for i in groups.all %}\n{{ hostvars[i].ansible_enp1s0.ipv4.address }} {{ hostvars[i].ansible_fqdn }} {{ hostvars[i].ansible_hostname }}\n{% endfor %}\n```\n### replace模块\n```bash\nvim /root/hardware.txt\nhostname=inventoryhostname\nmem=memory_in_MB\nbios=BIOS_version\nvdasize=disk_vda_size\nvdbsize=disk_vdb_size\n\nvim replace.yml\n---\n- hosts: all\n  tasks:\n  - replace:\n      path: /root/hardware.txt\n      regexp: inventoryhostname\n      replace: \"{{ inventory_hostname }}\"\n  - replace:\n      path: /root/hardware.txt\n      regexp: disk_vda_size\n      replace: \"{{ ansible_devices.vda.size }}\"\n  - replace:\n      path: /root/hardware.txt\n      regexp: disk_vdb_size\n      replace: \"{{ ansible_devices.vdb.size if ansible_devices.vdb.size is defined else 'NONE' }}\"\n```\n### ansible容器运行playbook\n```bash\n# 1安装navigator软件包\nsudo dnf -y install ansible-navigator\n# 2编写navigator下载镜像的配置文件，要放到家目录下\nvim ~/.ansible-navigator.yml\n---\nansible-navigator:\n  execution-enviroment:\n    image: registry.lab0.example.com:5000/ee-supported-rhel8:latest\n    pull:\n      policy: missing   # 如果使用镜像时没有就下载，有就不下载\n# 3修改配置文件，方法和之前的podman一样\nsudo vim /etc/containers/registries.conf\nunqualified-search-registries = [\"registry.lab0.example.com:5000\"]\n[[registry]]\ninsecure = true\nlocation = \"registry.lab0.example.com:5000\"\n# 4查看镜像，yaml中定义的image没有就下载，有就跳过\nansible-navigator images   # esc退出\n<==>\npodman images\n# 5临时在容器中运行剧本\nansible-navigator run debug.yml -m stdout\n```\n\n---\n\n##【ansible变量】\n### inventory变量（主机清单文件变量）\n在主机清单配置文件中定义变量，可以针对主机或组\n```bash\nvim hosts\n[test]\nnode1 myvar1=\"hello the world\" myvar2=\"content\"   # 在node1主机中定义了两个变量\n[webserver]\nnode[3:4]\n[webserver:vars]   # 主机组变量\nyourname=\"jade\"\n\n# 写playbook调用\nvim var.yaml\n---\n- hosts: node1\n  tasks:\n  - shell: echo \"{{ myvar1 }}\" > /tmp/\"{{ mywar2 }}\"\n- hosts: webserver\n  tasks:\n  - user:\n      name: \"{{ yourname }}\"\n\nansible node1 -m shell -a \"ls /tmp\"\nansible webserver -m shell -a \"id jade\"\n```\n### 魔法变量\n#### ansible的内置变量\n```yaml\n# 常用变量：\ninventory_hostname   # 清单主机名\nhostvars   # 包含被控制主机的所有变量\nhostvars.node1   # 只调用node1主机所有变量\nhostvars.node1.group_names   # 显示node1所在组的名字\ngroups   # 所有主机以及组信息\ngroups.all   # 所有被控制主机主机名\ngroups.test01   # 显示test01组里的所有主机名\ngroups_names   # 当前运行任务的主机所在的组的名字\n\n# 查看node1主机有关的魔法变量，如果该任务写成剧本，由于剧本会自动收集普通变量，所以到时还会看到除了魔法变量之外的普通变量，如ip、内存大小等\nansible node1 -m debug -a \"msg={{hostvars.node1}}\"\n```\n### playbook变量\n在playbook中定义变量\n使用vars关键词\n```bash\nvim playbook_var.yml\n---\n- hosts: test\n  vars:\n    iname: heal\n    ipass: '12345'   # 密码必须是string，需要引号\n  tasks:\n  - user:\n      name: \"{{iname}}\"\n      password: \"{{ ipass | password_hash('sha512') }}\"\n\nansible-playbook playbook_var.yml\nansible test -m shell -a \"id heal\"\n```\n#### 变量文件\n单独定义个变量文件\n在playbook中使用vars_files调用该变量文件\n优先级是最高的\n```bash\nvim variables.yml\n---\niname: cloud\nipass: '123456'\n\nvim file_var.yml\n---\n- hosts: test\n  vars_files: variables.yml   # 相对路径需要变量yaml和playbookyaml在同个目录\n  tasks:\n  - name: create user.\n    user:\n      name: \"{{ iname }}\"\n      password: \"{{ ipass | password_hash('sha512') }}\"\n\nansible test -m shell -a \"id cloud\"\n```\n\n---\n\n## 【ansible高级语法】\n### handlers\n可以通过handlers定义一组任务\n仅当某个任务触发（notify）handlers时才执行相应的任务\n如果有多个notify触发执行handlers任务，也仅执行一次\n仅当任务的执行状态为changed时handlers任务才执行\nhandlers任务在所有其他任务都执行后才执行\n```bash\nvim handlers.yml\n---\n- hosts: test\n  tasks:\n  - file: \n      path: /tmp/parents/subdir\n      state: directory\n    notify: touch file   # 要和handlers的name值对应\n  handlers:   # 当notify所在task change，handlers才会执行，基于幂等性，success或其他不会执行\n  - name: touch file   # 要和notify值对应\n    file:\n      path: /tmp/parents/subdir/new.txt\n      state: touch\n```\n### when条件判断\n条件为真时执行\n```text\n常见条件操作符：== != > >= < <=\n可用and or\nwhen表达式中调用变量不使用{{}}，直接写变量名\n```\n```bash\n# 远程主机剩余内存不足800M，则关闭NetworkManager服务\n# 变量名可通过setup模块进行查找\nvim when.yml\n---\n- hosts: test\n  tasks:\n  - service:\n      name: NetworkManager\n      state: stopped\n    when: ansible_memfree_mb < 800\n\n# 多个条件\nvim when-multi.yaml\n---\n- hosts:\n  tasks:\n  - file:\n      path: /tmp/jadewhen.txt\n      state: touch\n    when: > # >换行符，不保留换行符，也可直接写一行空格分隔\n      ansible_distribution == \"RedHat\"\n      and\n      ansible_distribution_major_version == \"9\"\n# when成立 success执行；不成立 skipping跳过\n```\n\n### fail模块\n任务执行失败则终止任务\n```bash\nansible node1 -m setup -a \"filter=ansible_dev*\"\nvim fail.yml\n---\n- hosts: all\n  tasks:\n  - fail:\n      msg: \"vdc不存在设备里，终止任务\"\n    when: \"'vdc' not in ansible_devices\"\n```\n### block任务块\n使用block可以将多个任务合并为一个组\n可以将整个block任务组，一起控制是否要执行\n```bash\n# block结合when使用时，当条件成立，执行一组任务\nvim block.yaml\n---\n- hosts: test\n  tasks:\n  - block:\n    - yum:\n        name: mysql-server\n        state: present\n    - service:\n        name: mysqld\n        state: started\n    when: ansible_distribution == \"RedHat\"\n\nansible-playbook block.yaml\nansible test -m shell -a \"rpm -q mysql-server ; systemctl status mysqld\"\n# 常用关键词：\n【rescue】 定义block任务失败时要执行的其他任务\n【always】 定义无论block任务是否成功，都要执行的任务\n```\n```bash\nvim block-rescue-always.yml\n---\n- hosts: test\n  tasks:\n  - block:\n    - file:\n        path: /tmp/notexist/block.txt\n        state: touch\n    rescue:   # block失败时执行\n    - file:\n        path: /tmp/rescue.txt\n        state: touch\n    always:   # 成功与否，都会执行\n    - file:\n        path: /tmp/always.txt\n        state: touch\n```\n### loop循环\n相当于for\n循环用到的变量名是固定的：item\n```bash\nvim simple-loop.yaml\n---\n- hosts: test\n  task:\n  - file:\n      path: /tmp/{{item}}\n      state: directory\n    loop:\n    - School\n    - Legend\n    - Life\n\nvim complex-loop.yaml\n---\n- hosts: test\n  tasks:\n  - user:\n      name: \"{{item.iname}}\"\n      password: \"{{item.upass | password_hash('sha512')}}\"\n    loop:\n    - { iname: 'tem', upass: '123456'}\n    - { iname: 'amy', upass: '654321'}\n\nansible-playbook complex-loop.yaml\nansible test -m shell -a \"id term;id amy\"\n```\n\n---\n\n## 【ansible角色】\n在实际生产环境中，为实现不同功能会编写大量playbook，而且每个playbook还可能会调用其他文件（如变量文件）\n对于海量的、无规律的文件，管理较麻烦\nansible从1.2版本开始支持roles\nroles是管理ansible文件的一种规范（目录结构）\nroles会按照标准的规范，自动到特定的目录和文件中读取数据\n\n### roles规范的目录结构\n![](ansibleNote/ansible_roles.png)\ndefaults/main.yml：定义变量的缺省值，优先级较低\nfiles目录：存储静态文件的目录\nhandlers/main.yml：定义handlers\nmeta/main.yml：作者、版本等描述信息\nREADME.md：整个role的描述信息\ntasks/main.yml：定义任务\ntemplates目录：存放动态数据文件的地方（模版文件）\nvars/main.yml：定义变量，优先级高\n\n### roles应用\n```bash\n# 配置，在defaults下添加roles_path行，自定义role存放位置\nvim ansible.cfg\n[defaults]\ninventory=./hosts\nremote_user=alice\nrole_path=./roles   # 定义角色目录位置\n[privilege_escalation]\nbecome=True\nbecome_method=sudo\nbecome_user=root\nbecome_ask_pass=False\n```\n#### 手工创建角色\n```bash\n# 创建角色相关目录，roles是配置文件中指定的存放角色总目录，http是创建的角色，tasks是存放角色任务的目录\nmkdir -p roles/http/tasks\nvim roles/http/tasks/main.yml\n---\n- yum:\n    name: httpd\n- debug:\n    msg: ok\n\n# 编写playbook调用角色\nvim myrole.yml\n---\n- hosts: test\n  roles:\n  - http   # 会找roles下的http下的tasks的main.yml\n```\n#### 使用命令创建角色\n```bash\nansible-galaxy命令可以创建、管理自己的roles\n# 初始化创建一个role，名为issue\nansible-galaxy init ~/ansible/roles/issue\n# 把控制端本地的文件拷贝到被管理主机\n# 如果拷贝的是常量文件，则把文件放到files目录下\n# 如果拷贝的是变量文件，则放到templates下\n\n# 定义issue模版文件\nvim ~/ansible/roles/issue/templates/issue.j2\nthis is the system {{ansible_hostname}}\ncontact to {{admin}}   # 自定义变量\n\n# 定义刚才j2文件中使用的自定义变量\nvim roles/issue/vars/main.yml\nadmin: jade@cloud.cn\n\n# 定义任务：拷贝模版文件\nvim roles/issue/tasks/main.yml\n---\n- template:\n    src: issue.j2   # 不需要写绝对路径，只写文件名，roles会自动找\n    dest: /etc/issue\n\n# 写playbook调用issue角色\nvim issue.yml\n---\n- hosts: test\n  roles:\n  - issue\n\n# 运行\nansible-playbook issue.yml\nansible test -m shell -a \"cat /etc/issue\"\n```\n#### 使用网络下载安装角色\ngalaxy.ansible.com/ui/ 可以看到别人写好的角色\n```bash\nvim roles.yml\n---\n- name: myphp   # 安装的角色名\n  src: http://172.25.0.254/roles/myphp.tar   # 下载的角色路径\n\n# 安装网上下载的角色，-r 指定下载的角色文件，默认安装路径由配置文件中roles_path决定\nansible-galaxy install -r roles.yml\nls ~/ansible/roles\n```\n#### 安装系统自带角色\n```bash\n# 安装系统自带角色\ndnf -y install rhel-system-roles\n# 查看rhel-system-roles安装清单\nrpm -ql rhel-ssytem-roles\n# 拷贝角色\ncp -r /usr/share/ansible/roles/rhel-system-roles.timesync/ roles\n# 参考帮助文档编写剧本文件，时间同步 timesync\ncat roles/rhel-system-roles.timesync/README.md\n\nvim timesync.yml\n---\n- hosts: test\n  vars:\n    timesync_ntp_servers:\n    - hostname: 192.25.0.254\n      iburst: yes\n  roles:\n  - rhel-system-roles.timesync\n\n# 执行\nansible-playbook timesync.yml\nansible test -m shell -a \"chronyc sources -v\"\n```\n\n---\n\n## 【ansible vault】\nansible有时需要访问一些敏感数据，如密码、key等\n使用ansible-vault可以加密或解密数据\n--encrypt：加密\n--decrypt：解密\n--view：查看\n--rekey：修改密码\n```bash\n# 新建测试文件\nvim hello.txt\nHello The world\n# 加密文件\nansible-vault --help\nansible-vault encrypt hello.txt\n# 查看加密文件\nansible-vault view hello.txt\n# 解密\nansible-vault decrypt hello.txt\n# 修改密码\nansible-vault rekey hello.txt\n\n# 用密码文件做加密解密，防止忘记密码\nvim pass\n123456\nansible-vault encrypt --vault-id=pass hello.txt\nansible-vault decrypt --vault-id=pass hello.txt\n\n# playbook做加密解密\nvim user-vault.yml\n---\n- hosts: test\n  tasks:\n  - user:\n      name: jerry\n      password: \"{{ '12345' | password_hash('sha512') }}\"\nansible-vault encrypt user-vault.yml\n# 使用--ask-vault-password运行playbook\nansible-playbook user-vault.yml --ask-vault-password\n```","tags":["ansible"],"categories":["study","notes"]},{"title":"VALORANT枪数据","url":"/2025/04/07/valorant/","content":"<html>\n    <head>\n        <meta charset=\"utf-8\">\n        <title>\n            valorant枪数据\n        </title>\n        <style>\n        .center-content {\n            text-align: center;\n        }\n        </style>\n    </head>\n    <body>\n        <table>\n            <tr class=\"custom-border\">\n                <th>\n                    <span contenteditable=\"true\">分类</span>\n                </th>\n                <th>\n                    <span contenteditable=\"true\">名称</span>\n                </th>\n                <th>\n                    <span contenteditable=\"true\">距离(s)</span>\n                </th>\n                <th>\n                    <span contenteditable=\"true\">头</span>\n                </th>\n                <th>\n                    <span contenteditable=\"true\">身</span>\n                </th>\n                <th>\n                    <span contenteditable=\"true\">腿</span>\n                </th>\n                <th>\n                    <span contenteditable=\"true\">射速<br>\n                    （发/s）</span>\n                </th>\n                <th>\n                    <span contenteditable=\"true\">首发弹道偏差度<br>\n                    (腰射/开镜)</span>\n                </th>\n                <th>\n                    <span contenteditable=\"true\">行走速度<br>\n                    (m/s)</span>\n                </th>\n                <th>\n                    <span contenteditable=\"true\">装备时间</span>\n                </th>\n                <th>\n                    <span contenteditable=\"true\">换弹时间</span>\n                </th>\n                <th>\n                    <span contenteditable=\"true\">弹夹容量</span>\n                </th>\n                <th>\n                    <span contenteditable=\"true\">穿透力</span>\n                </th>\n                <th>\n                    <span contenteditable=\"true\">价格</span>\n                </th>\n            </tr>\n            <tr>\n                <td class=\"center-content\" rowspan=\"11\">\n                    <span contenteditable=\"true\">佩枪</span>\n                </td>\n                <td class=\"center-content\" rowspan=\"2\">\n                    <span contenteditable=\"true\">标配</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">0-20</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">78</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">26</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">22</span>\n                </td>\n                <td class=\"center-content\" rowspan=\"2\">\n                    <span contenteditable=\"true\">6.75</span>\n                </td>\n                <td class=\"center-content\" rowspan=\"2\">\n                    <span contenteditable=\"true\">0.4度</span>\n                </td>\n                <td class=\"center-content\" rowspan=\"2\">\n                    <span contenteditable=\"true\">5.73</span>\n                </td>\n                <td class=\"center-content\" rowspan=\"2\">\n                    <span contenteditable=\"true\">0.75s</span>\n                </td>\n                <td class=\"center-content\" rowspan=\"2\">\n                    <span contenteditable=\"true\">1.75s</span>\n                </td>\n                <td class=\"center-content\" rowspan=\"2\">\n                    <span contenteditable=\"true\">12发(3)</span>\n                </td>\n                <td class=\"center-content\" rowspan=\"2\">\n                    <span contenteditable=\"true\">低</span>\n                </td>\n                <td class=\"center-content\" rowspan=\"2\">\n                    <span contenteditable=\"true\">免费</span>\n                </td>\n            </tr>\n            <tr>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">20-50</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">66</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">22</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">18</span>\n                </td>\n            </tr>\n            <tr>\n                <td class=\"center-content\" rowspan=\"3\">\n                    <span contenteditable=\"true\">短炮</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">0-7</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">22</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">11</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">9</span>\n                </td>\n                <td class=\"center-content\" rowspan=\"3\">\n                    <span contenteditable=\"true\">3.33</span>\n                </td>\n                <td class=\"center-content\" rowspan=\"3\">\n                    <span contenteditable=\"true\">4度</span>\n                </td>\n                <td class=\"center-content\" rowspan=\"3\">\n                    <span contenteditable=\"true\">5.4</span>\n                </td>\n                <td class=\"center-content\" rowspan=\"3\">\n                    <span contenteditable=\"true\">0.75s</span>\n                </td>\n                <td class=\"center-content\" rowspan=\"3\">\n                    <span contenteditable=\"true\">1.75s</span>\n                </td>\n                <td class=\"center-content\" rowspan=\"3\">\n                    <span contenteditable=\"true\">2发(5)</span>\n                </td>\n                <td class=\"center-content\" rowspan=\"3\">\n                    <span contenteditable=\"true\">低</span>\n                </td>\n                <td class=\"center-content\" rowspan=\"3\">\n                    <span contenteditable=\"true\">￥150</span>\n                </td>\n            </tr>\n            <tr>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">7-15</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">12</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">6</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">5</span>\n                </td>\n            </tr>\n            <tr>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">15-30</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">6</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">3</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">2</span>\n                </td>\n            </tr>\n            <tr>\n                <td class=\"center-content\" rowspan=\"2\">\n                    <span contenteditable=\"true\">狂怒</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">0-20</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">78</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">26</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">22</span>\n                </td>\n                <td class=\"center-content\" rowspan=\"2\">\n                    <span contenteditable=\"true\">10</span>\n                </td>\n                <td class=\"center-content\" rowspan=\"2\">\n                    <span contenteditable=\"true\">0.45度</span>\n                </td>\n                <td class=\"center-content\" rowspan=\"2\">\n                    <span contenteditable=\"true\">5.73</span>\n                </td>\n                <td class=\"center-content\" rowspan=\"2\">\n                    <span contenteditable=\"true\">1s</span>\n                </td>\n                <td class=\"center-content\" rowspan=\"2\">\n                    <span contenteditable=\"true\">1.5s</span>\n                </td>\n                <td class=\"center-content\" rowspan=\"2\">\n                    <span contenteditable=\"true\">13发(3)</span>\n                </td>\n                <td class=\"center-content\" rowspan=\"2\">\n                    <span contenteditable=\"true\">低</span>\n                </td>\n                <td class=\"center-content\" rowspan=\"2\">\n                    <span contenteditable=\"true\">￥450</span>\n                </td>\n            </tr>\n            <tr>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">20-50</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">63</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">21</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">17</span>\n                </td>\n            </tr>\n            <tr>\n                <td class=\"center-content\" rowspan=\"2\">\n                    <span contenteditable=\"true\">鬼魅</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">0-30</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">105</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">30</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">25</span>\n                </td>\n                <td class=\"center-content\" rowspan=\"2\">\n                    <span contenteditable=\"true\">6.75</span>\n                </td>\n                <td class=\"center-content\" rowspan=\"2\">\n                    <span contenteditable=\"true\">0.3度</span>\n                </td>\n                <td class=\"center-content\" rowspan=\"2\">\n                    <span contenteditable=\"true\">5.73</span>\n                </td>\n                <td class=\"center-content\" rowspan=\"2\">\n                    <span contenteditable=\"true\">0.75s</span>\n                </td>\n                <td class=\"center-content\" rowspan=\"2\">\n                    <span contenteditable=\"true\">1.5s</span>\n                </td>\n                <td class=\"center-content\" rowspan=\"2\">\n                    <span contenteditable=\"true\">15发(3)</span>\n                </td>\n                <td class=\"center-content\" rowspan=\"2\">\n                    <span contenteditable=\"true\">中</span>\n                </td>\n                <td class=\"center-content\" rowspan=\"2\">\n                    <span contenteditable=\"true\">￥500</span>\n                </td>\n            </tr>\n            <tr>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">30-50</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">87</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">25</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">21</span>\n                </td>\n            </tr>\n            <tr>\n                <td class=\"center-content\" rowspan=\"2\">\n                    <span contenteditable=\"true\">正义</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">0-30</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">159</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">55</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">46</span>\n                </td>\n                <td class=\"center-content\" rowspan=\"2\">\n                    <span contenteditable=\"true\">4</span>\n                </td>\n                <td class=\"center-content\" rowspan=\"2\">\n                    <span contenteditable=\"true\">0.25度</span>\n                </td>\n                <td class=\"center-content\" rowspan=\"2\">\n                    <span contenteditable=\"true\">5.4</span>\n                </td>\n                <td class=\"center-content\" rowspan=\"2\">\n                    <span contenteditable=\"true\">1s</span>\n                </td>\n                <td class=\"center-content\" rowspan=\"2\">\n                    <span contenteditable=\"true\">2.25s</span>\n                </td>\n                <td class=\"center-content\" rowspan=\"2\">\n                    <span contenteditable=\"true\">6发(4)</span>\n                </td>\n                <td class=\"center-content\" rowspan=\"2\">\n                    <span contenteditable=\"true\">高</span>\n                </td>\n                <td class=\"center-content\" rowspan=\"2\">\n                    <span contenteditable=\"true\">￥800</span>\n                </td>\n            </tr>\n            <tr>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">30-50</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">145</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">50</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">42</span>\n                </td>\n            </tr>\n            <tr>\n                <td class=\"center-content\" rowspan=\"5\">\n                    <span contenteditable=\"true\">冲锋枪</span>\n                </td>\n                <td class=\"center-content\" rowspan=\"2\">\n                    <span contenteditable=\"true\">蜂刺</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">0-15</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">67</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">27</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">22</span>\n                </td>\n                <td class=\"center-content\" rowspan=\"2\">\n                    <span contenteditable=\"true\">16</span>\n                </td>\n                <td class=\"center-content\" rowspan=\"2\">\n                    <span contenteditable=\"true\">0.65度/0.35度</span>\n                </td>\n                <td class=\"center-content\" rowspan=\"2\">\n                    <span contenteditable=\"true\">5.73</span>\n                </td>\n                <td class=\"center-content\" rowspan=\"2\">\n                    <span contenteditable=\"true\">0.75s</span>\n                </td>\n                <td class=\"center-content\" rowspan=\"2\">\n                    <span contenteditable=\"true\">2.25s</span>\n                </td>\n                <td class=\"center-content\" rowspan=\"2\">\n                    <span contenteditable=\"true\">20发(3)</span>\n                </td>\n                <td class=\"center-content\" rowspan=\"2\">\n                    <span contenteditable=\"true\">低</span>\n                </td>\n                <td class=\"center-content\" rowspan=\"2\">\n                    <span contenteditable=\"true\">￥950</span>\n                </td>\n            </tr>\n            <tr>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">15-50</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">57</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">23</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">19</span>\n                </td>\n            </tr>\n            <tr>\n                <td class=\"center-content\" rowspan=\"3\">\n                    <span contenteditable=\"true\">骇灵</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">0-15</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">78</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">26</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">22</span>\n                </td>\n                <td class=\"center-content\" rowspan=\"3\">\n                    <span contenteditable=\"true\">13.33</span>\n                </td>\n                <td class=\"center-content\" rowspan=\"3\">\n                    <span contenteditable=\"true\">0.4度/0.25度</span>\n                </td>\n                <td class=\"center-content\" rowspan=\"3\">\n                    <span contenteditable=\"true\">5.73</span>\n                </td>\n                <td class=\"center-content\" rowspan=\"3\">\n                    <span contenteditable=\"true\">0.75s</span>\n                </td>\n                <td class=\"center-content\" rowspan=\"3\">\n                    <span contenteditable=\"true\">2.25s</span>\n                </td>\n                <td class=\"center-content\" rowspan=\"3\">\n                    <span contenteditable=\"true\">30发(3)</span>\n                </td>\n                <td class=\"center-content\" rowspan=\"3\">\n                    <span contenteditable=\"true\">中</span>\n                </td>\n                <td class=\"center-content\" rowspan=\"3\">\n                    <span contenteditable=\"true\">￥1600</span>\n                </td>\n            </tr>\n            <tr>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">15-30</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">66</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">22</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">18</span>\n                </td>\n            </tr>\n            <tr>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">30-50</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">60</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">20</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">17</span>\n                </td>\n            </tr>\n            <tr>\n                <td class=\"center-content\" rowspan=\"6\">\n                    <span contenteditable=\"true\">霰弹枪</span>\n                </td>\n                <td class=\"center-content\" rowspan=\"3\">\n                    <span contenteditable=\"true\">雄鹿</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">0-8</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">40</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">20</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">17</span>\n                </td>\n                <td class=\"center-content\" rowspan=\"3\">\n                    <span contenteditable=\"true\">1.1</span>\n                </td>\n                <td class=\"center-content\" rowspan=\"3\">\n                    <span contenteditable=\"true\">2.6度</span>\n                </td>\n                <td class=\"center-content\" rowspan=\"3\">\n                    <span contenteditable=\"true\">5.06</span>\n                </td>\n                <td class=\"center-content\" rowspan=\"3\">\n                    <span contenteditable=\"true\">1s</span>\n                </td>\n                <td class=\"center-content\" rowspan=\"3\">\n                    <span contenteditable=\"true\">2.5s/0.5s</span>\n                </td>\n                <td class=\"center-content\" rowspan=\"3\">\n                    <span contenteditable=\"true\">5发(2)/15弹</span>\n                </td>\n                <td class=\"center-content\" rowspan=\"3\">\n                    <span contenteditable=\"true\">低</span>\n                </td>\n                <td class=\"center-content\" rowspan=\"3\">\n                    <span contenteditable=\"true\">￥850</span>\n                </td>\n            </tr>\n            <tr>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">8-12</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">26</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">23</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">11</span>\n                </td>\n            </tr>\n            <tr>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">12-50</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">18</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">9</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">7</span>\n                </td>\n            </tr>\n            <tr>\n                <td class=\"center-content\" rowspan=\"3\">\n                    <span contenteditable=\"true\">判官</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">0-10</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">34</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">17</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">14</span>\n                </td>\n                <td class=\"center-content\" rowspan=\"3\">\n                    <span contenteditable=\"true\">3.5</span>\n                </td>\n                <td class=\"center-content\" rowspan=\"3\">\n                    <span contenteditable=\"true\">2.25度</span>\n                </td>\n                <td class=\"center-content\" rowspan=\"3\">\n                    <span contenteditable=\"true\">5.06</span>\n                </td>\n                <td class=\"center-content\" rowspan=\"3\">\n                    <span contenteditable=\"true\">1s</span>\n                </td>\n                <td class=\"center-content\" rowspan=\"3\">\n                    <span contenteditable=\"true\">2.2s</span>\n                </td>\n                <td class=\"center-content\" rowspan=\"3\">\n                    <span contenteditable=\"true\">7发(3)/12弹</span>\n                </td>\n                <td class=\"center-content\" rowspan=\"3\">\n                    <span contenteditable=\"true\">低</span>\n                </td>\n                <td class=\"center-content\" rowspan=\"3\">\n                    <span contenteditable=\"true\">￥1850</span>\n                </td>\n            </tr>\n            <tr>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">10-15</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">20</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">10</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">8</span>\n                </td>\n            </tr>\n            <tr>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">15-50</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">14</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">7</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">5</span>\n                </td>\n            </tr>\n            <tr>\n                <td class=\"center-content\" rowspan=\"5\">\n                    <span contenteditable=\"true\">步枪</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">獠犬</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">---</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">115</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">35</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">29</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">10</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">0.3度</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">5.4</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">1s</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">2.5s</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">24发(3)</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">中</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">￥2050</span>\n                </td>\n            </tr>\n            <tr>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">戍卫</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">---</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">195</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">65</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">49</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">5.25</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">0.1度/0度</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">5.4</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">1s</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">2.5s</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">12发(3)</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">高</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">￥2250</span>\n                </td>\n            </tr>\n            <tr>\n                <td class=\"center-content\" rowspan=\"2\">\n                    <span contenteditable=\"true\">幻影</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">0-20</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">156</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">39</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">33</span>\n                </td>\n                <td class=\"center-content\" rowspan=\"2\">\n                    <span contenteditable=\"true\">11</span>\n                </td>\n                <td class=\"center-content\" rowspan=\"2\">\n                    <span contenteditable=\"true\">0.2度/0.11度</span>\n                </td>\n                <td class=\"center-content\" rowspan=\"2\">\n                    <span contenteditable=\"true\">5.4</span>\n                </td>\n                <td class=\"center-content\" rowspan=\"2\">\n                    <span contenteditable=\"true\">1s</span>\n                </td>\n                <td class=\"center-content\" rowspan=\"2\">\n                    <span contenteditable=\"true\">2.5s</span>\n                </td>\n                <td class=\"center-content\" rowspan=\"2\">\n                    <span contenteditable=\"true\">30发(3)</span>\n                </td>\n                <td class=\"center-content\" rowspan=\"2\">\n                    <span contenteditable=\"true\">中</span>\n                </td>\n                <td class=\"center-content\" rowspan=\"2\">\n                    <span contenteditable=\"true\">￥2900</span>\n                </td>\n            </tr>\n            <tr>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">20--</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">124</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">35</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">26</span>\n                </td>\n            </tr>\n            <tr>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">狂徒</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">---</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">160</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">40</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">34</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">9.75</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">0.25度/0.157度</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">5.4</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">1s</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">2.5s</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">25发(3)</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">中</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">￥2900</span>\n                </td>\n            </tr>\n            <tr>\n                <td class=\"center-content\" rowspan=\"3\">\n                    <span contenteditable=\"true\">狙击步枪</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">飞将</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">---</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">202</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">101</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">85</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">1.5</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">1度/0度</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">5.4</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">1.25s</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">2.5s/0.5s</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">5发(3)</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">中</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">￥950</span>\n                </td>\n            </tr>\n            <tr>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">莽侠</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">---</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">238</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">140</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">119</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">2.75</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">3.5度/0度</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">5.4</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">1.25s</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">3.8s</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">2发(5)</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">高</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">￥2400</span>\n                </td>\n            </tr>\n            <tr>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">冥驹</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">---</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">255</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">150</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">120</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">0.6</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">5度/0度</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">5.13</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">5.13s</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">3.7s</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">5发(2)</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">高</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">￥4700</span>\n                </td>\n            </tr>\n            <tr>\n                <td class=\"center-content\" rowspan=\"4\">\n                    <span contenteditable=\"true\">机关枪</span>\n                </td>\n                <td class=\"center-content\" rowspan=\"2\">\n                    <span contenteditable=\"true\">战神</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">0-30</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">75</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">30</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">25</span>\n                </td>\n                <td class=\"center-content\" rowspan=\"2\">\n                    <span contenteditable=\"true\">13</span>\n                </td>\n                <td class=\"center-content\" rowspan=\"2\">\n                    <span contenteditable=\"true\">1度/0.9度</span>\n                </td>\n                <td class=\"center-content\" rowspan=\"2\">\n                    <span contenteditable=\"true\">5.13</span>\n                </td>\n                <td class=\"center-content\" rowspan=\"2\">\n                    <span contenteditable=\"true\">1.25s</span>\n                </td>\n                <td class=\"center-content\" rowspan=\"2\">\n                    <span contenteditable=\"true\">3.25s</span>\n                </td>\n                <td class=\"center-content\" rowspan=\"2\">\n                    <span contenteditable=\"true\">50发(2)</span>\n                </td>\n                <td class=\"center-content\" rowspan=\"2\">\n                    <span contenteditable=\"true\">高</span>\n                </td>\n                <td class=\"center-content\" rowspan=\"2\">\n                    <span contenteditable=\"true\">￥1600</span>\n                </td>\n            </tr>\n            <tr>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">30-50</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">70</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">28</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">23</span>\n                </td>\n            </tr>\n            <tr>\n                <td class=\"center-content\" rowspan=\"2\">\n                    <span contenteditable=\"true\">奥丁</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">0-30</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">95</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">38</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">32</span>\n                </td>\n                <td class=\"center-content\" rowspan=\"2\">\n                    <span contenteditable=\"true\">12~15.6</span>\n                </td>\n                <td class=\"center-content\" rowspan=\"2\">\n                    <span contenteditable=\"true\">0.8度/0.79度</span>\n                </td>\n                <td class=\"center-content\" rowspan=\"2\">\n                    <span contenteditable=\"true\">5.13</span>\n                </td>\n                <td class=\"center-content\" rowspan=\"2\">\n                    <span contenteditable=\"true\">1.25s</span>\n                </td>\n                <td class=\"center-content\" rowspan=\"2\">\n                    <span contenteditable=\"true\">5s</span>\n                </td>\n                <td class=\"center-content\" rowspan=\"2\">\n                    <span contenteditable=\"true\">100发(2)</span>\n                </td>\n                <td class=\"center-content\" rowspan=\"2\">\n                    <span contenteditable=\"true\">高</span>\n                </td>\n                <td class=\"center-content\" rowspan=\"2\">\n                    <span contenteditable=\"true\">￥3200</span>\n                </td>\n            </tr>\n            <tr>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">30-50</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">77</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">31</span>\n                </td>\n                <td class=\"center-content\">\n                    <span contenteditable=\"true\">26</span>\n                </td>\n            </tr>\n        </table>\n    </body>\n</html>","tags":["valorant"],"categories":["game"]},{"title":"Linux备忘 - 下","url":"/2025/04/05/linuxNote2/","content":"## Shell编程\n#### 基本功能\n- Shell\n是一个命令行解释器，为用户提供一个向Linux内核发送请求以便运行程序的界面系统级程序，用户可以用Shell来启动、挂起、停止甚至是编写一些程序\n还是一个功能强大的编程语言，易编写、易调试、灵活性较强，可直接调用Linux系统命令\n\n- Shell分类\nBourne Shell：从1979起Unix就开始使用Bourne Shell，主文件名为sh\nC Shell：C Shell主要在BSD版的Unix系统中使用，其语法和C语言相类似而得名\n    - 区别：\nShell的两种主要语法类型有Bourne和C，这两种语法彼此不兼容\nBourne家族主要包括sh、ksh、Bash、psh、zsh\nC家族主要包括：csh、tcsh\n- Bash\nBash与sh兼容，目前使用Bash作为用户的基本Shell\nbash -n ：简单的语法检查\nbash -x ：调试，显示变量在执行时的值和执行的路径，每一条可执行脚本命令前都会有一个“+”，当一条命令出现子级命令时会出现两个，即“++”。\nbash -v ：在执行的同时输出源码信息\nbash -xv ：调试同时输出源码\n\n- Linux支持的Shell\n/etc/shells文件可查询\n\n##### `… … … echo -e … … … ∞`\n```bash\necho -e \"\\e[1;31m testcontent \\e[0m\"\n\n## 脚本执行赋予执行权限，直接运行\n  chmod 755 hello.sh\n  ./hello.sh\n通过Bash调用执行脚本\n  Bash hello.sh\n```\n##### `… … … history … … … ∞`\n```bash\nhistory [选项] [历史命令保存文件]\n-c：清空历史命令\n-w：把缓存中的历史命令写入历史命令保存文件~/.bash_history\n# 默认保存1k条，可在环境变量配置文件/etc/profile中进行修改\n## 历史命令调用\n使用上下箭头：调用以前的历史命令\n!n：重复执行第n条历史命令\n!!：重复执行上一条命令\n!字串：重复执行最后一条以该字串开头的命令\n```\n##### `… … … alias … … … ∞`\n```bash\n# 设定命令别名\nalias 别名='原命令'\n\n# 查询命令别名\nalias\n\n# 删除别名\nunalias\n\n永久生效：vi /root/.bashrc\n\n# 命令执行时顺序\n1：用绝对路径/相对路径执行的命令\n2：别名\n3：Bash的内部命令\n4：按照$PATH环境变量定义的目录查找顺序找到的第一个命令\n\n## Bash常用快捷键\nctrl+a：光标移动到行首\nctrl+e：光标移动到行尾\nctrl+c：强制终止当前命令\nctrl+l：清屏，相当于clear\nctrl+u：删除/剪切光标之前的内容\nctrl+k：删除/剪切光标之后的内容\nctrl+w：删除/剪切光标之前的1个词语\nctrl+y：粘贴u、k剪切的内容\nctrl+r：搜索历史命令\nctrl+d：退出当前终端\nctrl+z：暂停并放入后台\nctrl+s：暂停屏幕输出\nctrl+q：恢复屏幕输出\n\n\n## 标准输入输出设备\n设备文件名  文件描述符 类型\n键盘     /dev/stdin    0              标准输入\n显示器  /dev/stdout 1              标准输出\n显示器  /dev/stderr  2              标准错误输出\n\n# 重定向错误输出到文件\n错误命令 2>> 文件\n# 正确输出和错误输出同时覆盖>或追加>>到同一个文件中\n命令 > 文件 2>&1\n命令 &>文件命令 &>/dev/null  ## 相当于将输出丢入到垃圾箱\n# 正确输出追加到文件1，错误输出追加到文件2\n命令>>文件1 2>>文件2\n\n# 输入重定向\n```\n##### `… … … wc … … … ∞`\n```bash\nwc [选项] [文件名]\n-c：统计字节数\n-w：统计单词数\n-l：统计行数\n\n## 多命令顺序执行\n;：多个命令顺序执行\n&&：逻辑与\n||：逻辑或\n# 判断命令是否报错\n命令 && echo yes || echo no\n```\n##### `… … … dd … … … ∞`\n```bash\ndd if=输入文件 of=输出文件 bs=字节数 count=个数\n例：date;dd if=/dev/zero of=/root/testfile bs=1k count=100000; date\n```\n##### `… … … | … … … ∞`\n```bash\n# 管道符，命令1的正确输出作为命令2的操作对象\n命令1 | 命令2\n例：查询正在连接的\nnetstat -an | grep ESTABLISHED\n\n## 通配符\n?：匹配1个任意字符\n*：匹配0或任意多个任意字符（可匹配任何内容）\n[]：匹配中括号中任意一个字符（[abc]代表一定匹配1个字符，或是a、或是b、或是c）\n[-]：匹配中括号中任意1个字符，-代表一个范围（[a-z]代表匹配1个小写字母）\n[^]：逻辑非，标识匹配不是中括号中的1个字符（[^0-9]代表匹配1个不是数字的字符）\n\n## Bash中其他特殊符号\n''：单引号中所有的特殊符号都没有特殊含义（如$ `）\n\"\"：双引号中特殊符号都没有特殊含义（$ ` \\是例外，拥有调用变量的值、引用命令、转义符的特殊含义）\n``：反引号括起来的内容是系统命令，Bash会先执行，和$()作用一样\n$()：引用系统命令\n#：注释\n$：调用变量的值\n\\：转义符，跟在\\之后的特殊字符变为普通字符\n```\n#### 变量、环境变量\n- 变量\n1.定义：计算机内存的单元\n2.规则：\n由字母、数字、下划线组成，不能以数字开头Bash中，变量默认类型是字符串型，要进行数值运算，需修改为数值型\n等号连接，两侧不能有空格\n环境变量建议大写，便于区分\n3.分类\n用户自定义变量（本地变量）\n只在当前的Shell中生效\n\n例：变量叠加\naa=123\naa=${aa}456\naa=\"$aa\"789\n\n环境变量\n主要保存的是和系统操作环境相关的数据会在当前Shell和所有子Shell中生效；如果写入相应配置文件，会在所有的Shell中生效\n\n##### `… … … export … … … ∞`\n```bash\n# 声明变量\nexport 变量名=变量值\n# 查询变量\nenv\n# 删除变量\nunset 变量名\n\n# 系统常见环境变量\nPATH：系统查找命令的路径\nPATH=\"$PATH\":/root/sh  # PATH变量叠加\n\n# 定义系统提示符的变量\nPS1\n\\d：显示日期，格式“星期 月 日”\n\\h：显示简写主机名（默认localhost）\n\\t：显示24小时制时间，格式“HH:MM:SS”\n\\T：显示12小时制时间，格式“HH:MM:SS”\n\\A：显示24小时制时间，格式“HH:MM”\n\\u：显示当前用户名\\w：显示当前所在目录的完整名称\n\\W：显示当前所在目录的最后一个目录\n\\#：执行的第几个命令\n\\$：提示符（root提示#，普通用户提示$）\n例：PS1='[\\u@\\t \\w]\\$ '\n默认PS1='[\\u@\\h \\w]\\$ '\n位置参数变量\n主要是用来向脚本当中传递参数或数据，变量名不能自定义，变量作用固定\n$n：n为数字，$0代表命令本身、$1-$9代表第1-0个参数，10以上的参数需要用大括号如${10}\n$*：代表命令行中所有的参数，把所有参数看成一个整体\n$@：也代表命令行中所有的参数，不过$@把每个参数区分对待\n$#：代表命令行中所有参数的个数\n\n预定义变量\nBash中已定义好的变量，变量名不能自定义，变量作用固定\n$?：最后一次执行的命令的返回状态，值为0 证明正确执行，值为非0（具体哪个数，由命令自己决定）证明执行不正确\n$$：当前进程的进程号（PID）\n$!：后台运行的最后一个进程的PID\n```\n##### `… … … read … … … ∞`\n```bash\nread [选项] [变量名]\n-p \"提示信息\"：等待输入时，输出提示信息\n-t 秒数：指定等待时间\n-n 字符数：只接受指定的字符数\n-s：隐藏输入的数据\n```\n##### `… … … set … … … ∞`\n```bash\n# 查看系统中的变量\nset\n# 删除变量\nunset name\n```\n#### 环境变量配置文件\n##### `… … … source … … … ∞`\n```bash\n# 修改环境配置文件重启或者source生效\nsource 配置文件\n. 配置文件 # .是source的缩写\n\n## 登录时生效的配置文件\n/etc/profile\nUSER变量  \nLOGNAME变量  \nMAIL变量 \nPATH变量  \nHOSTNAME变量  \nHISTSIZE变量  \numask  \n调用/etc/profile.d/*.sh文件\n\n/etc/profile.d/*.sh\n\n~/.bash_profile  \n调用~/.bashrc文件  \n在PATH变量后叠加\":$HOME/bin目录\"\n\n~/.bashrc\n\n/etc/bashrc  \nPS1变量  \numask  \nPATH变量  \n调用/etc/profile.d/*.sh文件\n\n## 注销时生效的环境变量配置文件\n~/.bash_logout\n\n## 其他配置文件\n~/bash_history  \n历史命令存放文件，排错时可查看，文件占用不大，建议不清空\n\n## Shell登录信息\n/etc/issue\n本地终端欢迎信息\n转义符 作用\n/d 当前系统日期\n/s 操作系统名称\n/l 登录的终端号（较常用）\n/m 硬件体系结构（如i386）\n/n 主机名\n/o 域名\n/r 内核版本\n/t 当前系统时间\n/u 当前登录用户的序列号\n\n/etc/issue.net\n远程终端欢迎信息\n转义符在/etc/issue.net文件中不能使用\n是否显示此欢迎信息，由ssh的配置文件/etc/ssh/sshd_config决定，加入“Banner /etc/issue.net”行才能显示（需重启SSH服务）\n\n/etc/motd\n本地、远程登录都可显示欢迎信息\n```\n#### 运算符\n数值运算\n##### `… … … declare … … … ∞`\n```bash\n# 声明变量类型，用exporter一样\ndeclare [+/-][选项] 变量名\n-：给变量设定类型属性\n+：取消变量的类型属性\n-i：将变量声明为Integer\n-x：将变量声明为环境变量\n-p：显示指定变量的被声明的类型\n例：计算a+b\n# declare\na=11\nb=22\ndeclare -i c=$a+$b  # 结果为33，而不是1122\n# expr\nd=$(expr $a + $b)  # +左右必须有空格\n# $(()) 或 $[]\nf=$(( $a+$b ))\ng=$[ $a+$b ]\n\n## 运算符\n优先级从高到低 运算符\n13 单目负、单目正 -、+\n12 逻辑非、按位取反或补码 !、~\n11 乘除取余 *、/、%\n10 加减 +、-\n9 左移右移 <<、>>\n8 判断大小 <=、>=、<、>\n7 等于、不等于 ==、!=\n6 按位与 &\n5 按位异或 ^\n4 按位或 |\n3 逻辑与 &&\n2 逻辑或 ||\n1 赋值 =、+=、-=、*=、/=、%=、&amp;=、^=、|=、<<=，>>=\n```\n#### 正则、排序\n- 正则表达式与通配符\n正则是包含匹配（grep、awk、sed等命令支持正则）\n通配符是完全匹配（ls、find、cp等命令不支持正则，只能用shell自带通配符进行匹配）\n\n- 基础正则表达式\n元字符 作用\n```text\n*  前一个字符匹配0或多次\n.  匹配除了换行符外的任意1个字符\n^  匹配行首（例^hello匹配以hello开头的行）\n$  匹配行尾\n[]  匹配中括号中指定的任意1个字符，只匹配1个字符\n[^]  匹配中括号中的字符以外的任意1个字符（[^0-9]匹配任意1位非数字字符）\n\\  转义符，取消特殊符号的含义\n\\{n\\}  表示前面的字符恰好出现n次（[0-9]\\{4\\}匹配4位数字；[1][3-8][0-9]\\{9\\}匹配手机号码）\n\\{n,\\}  表示前面的字符出现不小于n次（[0-9]\\{2,\\}表示两位及以上的数字）\n\\{n,m\\}  表示前面的字符至少出现n次、最多出现m次（[a-z]\\{6,8\\}匹配6-8位的小写字母）\n\n# 例：\ngrep \"a*\" testfile.txt  # 匹配0或多次a，匹配所有内容包括空白行\ngrep \"aa*\" testfile.txt  # 匹配至少有一个a的行\ngrep \"s..d\" testfile.txt  # 匹配sd中间一定有2个字符的单词\ngrep \".*\" testfile.txt  # 匹配所有内容\ngrep -n \"^$\" testfile.txt  # 匹配空白行\ngrep \"\\.$\" testfile.txt  # 匹配使用.结尾的行\n```\n##### `… … … sort … … … ∞`\n```bash\nsort [选项] 文件名\n-f：忽略大小写\n-n：以数值型排序（默认字符串型排序）\n-r：反向排序\n-t：指定分隔符（默认是制表符）\n-k n [,m]：按照指定字段范围排序，n-m（默认到行尾）\n\n# 指定分隔符:，用第3字段开头、第3字段结尾排序\nsort -t \":\" -k 3,3 /etc/passwd\n```\n#### 条件判断\n- 按照文件类型进行判断\n-b：判断文件存在且为块设备文件\n-c：判断文件存在且为字符设备文件\n-d：判断文件存在且为目录 *\n-e：判断文件存在 *\n-f：判断文件存在且为普通文件 *\n-L：判断文件存在且为符号链接文件\n-p：判断文件存在且为管道文件\n-s：判断文件存在且为非空\n-S：判断文件存在且为套接字文件\n\n- 两种判断格式\n```bash\ntest -e testfile\n[ -e testfile ]  # 常用\n例：[ -d /root ] &amp;&amp; echo \"yes\" || echo \"no\"\n```\n- 按照文件权限进行判断\n-r：判断文件存在且有r权限\n-w：判断文件存在且有w权限\n-x：判断文件存在且有x权限\n-u：判断文件存在且有SUID权限\n-g：判断文件存在且有SGID权限\n-k：判断文件存在且有SBit权限\n\n- 两个文件间比较\nfile1 -nt file2：判断file1的修改时间是否比file2的新\nfile1 -ot file2：判断file1的修改时间是否比file2的旧\nfile1 -ef file2：判断file1和file2的Inode号是否一致，可理解为是否为同一个文件，用于判断硬链接是个好方法\n例：\n```bash\n# 创建硬链接后-ef判断\nln file1 file2\n[ file1 -ef file2 ] &amp;&amp; echo \"yes\" || echo \"no\"\n\n## 两个整数间比较\ninteger1 -eq integer2：判断是否相等\ninteger1 -ne integer2：判断是否不相等\ninteger1 -gt integer2：判断integer1是否>integer2\ninteger1 -lt integer2：判断integer1是否<interger2\ninteger1 -ge integer2：判断integer1是否>=integer2\ninteger1 -le integer1：判断integer1是否<=integer2\n\n## 字符串的判断\n-z string：判断字符串是否为空\n-n string：判断字符串是否为非空\nstring1 == string2：判断是否相等\nstring1 != string2：判断是否不相等\n\n## 多重条件判断\n判断1 -a 判断2：逻辑与，都成立结果才为真\n判断1 -o 判断2：逻辑或，有一个成立结果就为真\n! 判断：逻辑非，使原始的判断取反\n```\n#### 流程控制\n##### `… … … if … … … ∞`\n```bash\n## 单分支if条件\nif [ 条件判断式 ]; then\n    程序\nfi\n# 或者\nif [ 条件判断式 ]\n    then\n        程序\nfi\n# 例：判断分区使用率\n#!/bin/bash\n# Author:jade\nrate=$(df -h | grep \"/dev/sda3\" | awk '{print $5}' | cut -d \"%\" -f 1)\nif [ $rate -ge 80 ]\n    then\n        echo \"warning! /dev/sda3 is full!!\"\nfi\n\n## 多分支if条件\nif [ 条件判断式1 ]\n    then\n        程序\nelif [ 条件判断式2 ]\n    then\n        程序\n……\nelse\n    程序\nfi\n\n# 检查服务是否启动\nnmap\n# 结果是open证明服务启动\nnmap -sT ip | grep tcp | grep http |awk '{print $2}'\n```\n##### `… … … case … … … ∞`\n```bash\ncase $变量名 in\n    \"value1\")\n        程序\n        ;;\n    \"value2\")\n        程序\n        ;;\n    ……\n    *)\n        程序\n        ;;\nesac\n```\n##### `… … … for … … … ∞`\n```bash\n# 语法1\nfor 变量 in 值1 值2 值3……\n    do\n        程序\n    done\n# 例：批量解压缩脚本\nls *.tar.gz > jieya.log\nfor i in $(cat jieya.log)\n    do\n        tar -zxf $i &amp;>/dev/null\n    done\nrm -rf jieya.log\n\n# 语法2\nfor (( 初始值;循环控制条件;变量变化 ))\n    do\n        程序\n    done\n```\n##### `… … … while … … … ∞`\n```bash\n# 条件成立进入循环\nwhile [ 条件判断式 ]\n    do\n        程序\n    done\n```\n##### `… … … until … … … ∞`\n```bash\n# 条件不成立进入循环\nuntil [ 条件判断式 ]\n    do\n        程序\n    done\n例：重复提示输入yes no\nread DEPLOYMENT_YN\nuntil [[ ${DEPLOYMENT_YN} =~ ^([Nn][Oo]|[Nn]|[yY]|[yY][eE][sS])$ ]]; do\n  echo -e \"\\033[41;30;5m … … 输入错误，请重新输入 \\033[0m\"\n  read DEPLOYMENT_YN\ndone\n```\n\n---\n\n## 服务管理\n#### RPM包服务源码包服务\nLinux服务包括：RPM包默认安装的服务、源码包安装的服务\nRPM包默认安装的服务包括：独立的服务、基于xinetd服务\n独立的服务：在内存中启动，响应更快\n基于xinetd服务：不占用内存，但响应较慢\n\n- 启动与自启动\n服务启动：在当前系统中让服务运行并提供功能\n服务自启动：开机或重启后，随着系统的启动而自动启动服务\n\n- 查询已安装的服务\nRPM包安装的服务\n```bash\n# 查看自启动的服务，可以看到所有RPM包安装的服务，2 3 4 5如果是启用代表启用\n  \tchkconfig --list  \n```\n- 查看当前启动的服务  \n```bash\nps aux | grep  \nnetstat -tlun\n```\n源码包安装的服务  \n查看服务安装位置，一般是/usr/local/下\n\n- RPM包安装服务与源码包安装服务的区别\nRPM包安装在默认位置\n源码包安装在指定位置，一般是/usr/local/\n\n- RPM包服务安装默认位置\n/etc/init.d/：启动脚本位置\n/etc/sysconfig/：初始化环境配置文件位置\n/etc/：配置文件位置\n/etc/xinetd.conf：xinetd配置文件\n/etc/xinetd.d/：基于xinetd服务的启动脚本\n/var/lib/：服务产生的数据放在这里\n/var/log/：日志\n\n- 独立服务的启动  \n/etc/init.d/独立服务名 start|stop|status|restart  \nservice 独立服务名 start|stop|status|restart *\n- 独立服务的自启动  \nchkconfig [--level 运行级别] [独立服务名] [on|off]  \n修改/etc/rc.d/rc.local文件 *  \n使用ntsysv命令管理自启动\n- 源码包服务的启动\n使用绝对路径调用启动脚本；不同的源码包的启动脚本不同，可查看对应方法\n例：/usr/local/apache2/bin/apachectl start|stop\n- 源码包服务的自启动\n修改/etc/rc.d/rc.local加入/usr/local/apache2/bin/apachectl start\n- 让源码包服务被service命令识别，做软链接，建议不这么做\nln -s /usr/local/apache2/bin/apachectl /etc/init.d/apache\n\n---\n\n## 系统管理\n- 查看linux系统版本\n```bash\ncat /etc/redhat-release\n```\n\n- 进程\n正在执行的一个程序或命令，每一个进程都是一个运行的实体，都有自己的地址空间，并占用一定的系统资源\n- 作用判断服务器健康状态查看系统中所有进程杀死进程\n- 进程查看\n##### `… … … ps … … … ∞`\n```bash\n# 查看系统中所有进程，使用BSD操作系统格式\nps aux\n# 查看系统中所有进程，使用Linux标准命令格式\nps -le\n# 列含义  \nUSER：该进程是由哪个用户产生的  \nPID：进程的ID号 \n%CPU：该进程占用CPU资源的百分比；占用越高，进程越耗费资源  \n%MEM：该进程占用物理内存的百分比；占用越高，进程越耗费资源  \nVSZ：该进程占用虚拟内存的大小（单位KB）  \nRSS：该进程占用实际物理内存的大小（单位KB） \nTTY：该进程是在哪个终端中运行（tty1-tty7代表本地控制台终端；tty1-tty6代表本地字符界面终端；tty7代表图形终端；pts/0-256代表虚拟终端）  \nSTAT：进程状态（常见：R运行 S睡眠 T停止 s包含子进程 +位于后台）  \nSTART：该进程的启动时间  \nTIME：该进程占用CPU的运行时间（不是系统时间） \nCOMMAND：产生此进程的命令名\n```\n##### `… … … top … … … ∞`\n```bash\n# 查看系统健康状态\ntop [选项]\n-d 秒数：指定top命令每隔几秒更新（默认3s）\n# 交互模式中可执行的命令  \n?或h：显示交互模式的帮助  \nP：以CPU使用率排序（默认） \nM：以Memory使用率排序  \nN：以PID排序  \nq：退出top\n# top展示内容解析\n1.第一行信息为任务队列信息  \n12:26:46：系统当前时间  \nup 1 day,13:32：系统的运行时间（断电会重置）  \n2 users：当前登录了2个用户 \nload average:0.00,0.00,0.00：系统在之前1min、5min、15min的平均负载（一般<1时负载较小，>1时系统已经超过负荷）\n2.第二行为进程信息  \nTasks:95 total：系统中的进程总数  \n1 running：正在运行的进程数  \n94 sleeping：睡眠的进程  \n0 stopped：正在停止的进程  \n0 zombie：僵尸进程（如不为0，需手工检查僵尸进程）\n3.第三行为CPU信息  \nCpu(s):0.1%us：用户模式占用的CPU百分比  \n0.1%sy：系统模式占用的CPU百分比  \n0.0%ni：改变过优先级的用户进程占用的CPU百分比  \n99.7%id：空闲CPU的CPU百分比 * \n0.1%wa：等待输入/输出的进程的占用CPU百分比  \n0.0%hi：硬中断请求服务占用的CPU百分比  \n0.1%si：软中断请求服务占用的CPU百分比  \n0.0%st：st（Steal time）虚拟时间百分比（当有虚拟机时，虚拟CPU等待实际CPU的时间百分比）\n4.第四行物理内存信息 \nMem:625344k total：物理内存的总量（单位KB）  \n571504l used：已经使用的物理内存数量  \n53840k free：空闲的物理内存数量  \n65800k buffers：作为缓冲的内存数量\n5.第五行交换分区（swap）信息  \nSwap:524280k total：交换分区（虚拟内存）的总大小；最大不超过2G，否则就是浪费空间  \n0k used：已经使用的交互分区的大小  \n524280k free：空闲交换分区的大小  \n409280k cached：作为缓存的交互分区的大小\niotop\n```\n##### `… … … pstree … … … ∞`\n```bash\n# 查看进程树\npstree [选项]\n-p：显示进程的PID\n-u：显示进程的所属用户\n```\n- 进程管理\n##### `… … … kill … … … ∞`\n```bash\nkill -l  # 查看可用的进程信号\nkill -1 PID  # 重启进程\nkill -9 PID  # 强制杀死进程\n# 常用信号代号 名称  \n1 SIGHUP 该信号让进程立即关闭，然后重新读取配置文件后重启 *  \n2 SIGINT 程序终止信号，用于终止前台进程（相当于ctrl+c）  \n8 SIGFPE 发生致命的算术运算错误时发出（不仅包括浮点运算错误，还包括溢出及除数为0等其他所有的算数错误）  \n9 SIGKILL 立即结束程序的运行，一般用于强制终止进程（此信号不能被阻塞、处理和忽略）*  \n14 SIGALRM 时钟定时信号，alarm函数使用该信号（计算的是实际时间或时钟时间）  \n15 SIGTERM 正常结束进程的信号，kill的默认信号（有时此信号无法正常终止进程，才尝试使用9 SIGKILL信号）*  \n18 SIGCONT 让暂停的进程恢复执行（此信号不能被阻断）  \n19 SIGSTOP 暂停前台进程（相当于ctrl+z）（此信号不能被阻断）\n```\n##### `… … … killall … … … ∞`\n```bash\n# 按照进程名杀死进程\nkillall [选项][信号] 进程号\n-i：交互式，询问是否要杀死某个进程\n-I：忽略进程名的大小写\n```\n##### `… … … pkill … … … ∞`\n```bash\n# 按照进程名终止进程\n-t 终端号：按照终端号踢出用户\n例：\nw # 查询本机已经登录的用户\npkill -t -9 pts/1 # 强制杀死从pts/1虚拟终端登录的进程\n\n## 工作管理\n# 把进程放入后台\n1.用&amp;放入后台\ntar -zcf testfile.tar.gz /tmp &amp;\n2.ctrl+z\ntop执行中按下ctrl+z\n```\n##### `… … … jobs … … … ∞`\n```bash\n# 查看后台的工作\njobs [-l]\n-l：显示工作的PID\n（+代表最近一个放入后台的工作，也是工作恢复时默认恢复的工作）\n（-代表代数第二个放入后台的工作）\n（其他没有符号标记）\n```\n##### `… … … fg … … … ∞`\n```bash\n# 将后台暂停的工作恢复到前台执行\nfg %工作号%工作号：%号可省略，工作号和PID不是一个，工作号是jobs显示的号\n```\n##### `… … … bg … … … ∞`\n```bash\nbg %工作号\n# 和前台有交互的命令，不能恢复到后台执行，例top、vi\n```\n- 系统资源查看\n##### `… … … vmstat … … … ∞`\nVirtual Memory Statistics（虚拟内存统计）\n```bash\n# 监控系统虚拟资源（虚拟内存、cpu、进程）\nvmstat [刷新延时 刷新次数]\nvmstat 1 3  # 监听3次系统资源，每隔2s\n```\n字段说明：\n| 类别字段 | 子字段 | 说明 |\n| :---: | :---: | :--- |\n| proc<br>进程 | r | 运行队列中进程数量 |\n|  | b | 等待IO的进程数量 |\n| memory<br>内存 | swpd | 使用虚拟内存大小 |\n|  | free | 可用内存大小 |\n|  | buff | 用作缓冲的内存大小 |\n|  | cache | 用作缓存的内存大小 |\n| swap<br>交换空间内存 | si | 每秒从交换区写到内存的大小 |\n|  | so | 每秒写入交换区的内存大小 |\n| io<br>现在linux版本块的大小为1024bytes | bi | 每秒读取的块数 |\n| system<br>系统信息 | in | 每秒中断数，包括时钟中断 |\n|  | cs | 每秒上下文切换数 |\n| cpu<br>以百分比表示 | us | 用户进程执行时间（user time） |\n|  | sy | 系统进程执行时间（system time） |\n|  | id | 空闲时间（包括IO等待时间），cpu的空闲时间以百分比表示 |\n|  | wa | 等待IO时间 |\n|  | st | 被虚拟机使用的CPU时间的百分比 |\n\n一般id + us + sy = 100\n\n##### `… … … dmesg … … … ∞`\n```bash\n# 开机时内核检查\ndmesg\ndmesg | grep CPU\n\n# 查看内核日志是否打raid卡堆栈信息\ndmesg -T |grep megasas_probe_one -C5\n```\n##### `… … … free … … … ∞`\n```bash\n# 查看内存使用状态、空闲情况，默认树形Mem物理内存swap交互区内存 内核缓存区内存\nfree [-b|-k|-m|-g]\n-b：以字节为单位显示\n-k：以KB为单位显示（默认）\n-m：以MB为单位显示\n-g：以GB为单位显示\n[-s<间隔秒数> 持续观察内存使用状况]\n[-t 显示内存总和列]\n[-l 以列表形式]\n\n# 缓存和缓冲的区别\n缓存（cache）：用来加速数据从硬盘中读取\n缓冲（buffer）：用来加速数据写入硬盘\n\n# 查看CPU信息\ncat /proc/cpuinfo\ncat /proc/cpuinfo | grep processor\nnproc\nlscpu\n```\n##### `… … … uptime … … … ∞`\n```bash\nuptime  # 显示系统的启动时间和平均负载（相当于top第一行），w也可以看到\n```\n##### `… … … uname … … … ∞`\n```bash\n# 查看系统与内核相关信息\nuname [选项]\n-a：查看系统所有相关信息\n-m：显示处理器类型\n-n：显示计算机网络节点名称\n-o：显示操作系统名称\n-p：显示处理器类型\n-r：查看内核版本\n-s：查看内核名称\n-v：显示系统内核版本及发行时间\n\nfile /bin/ls  # 判断当前系统的位数\nlsb_release -a  # 查看当前Linux系统的发行版本\n```\n##### `… … … lsof … … … ∞`\n```bash# \n列出进程调用或打开的文件的信息\nlsof [选项]\n-c 字符串：只列出以字符串开头的进程打开的文件\n-u 用户名：只列出某个用户的进程打开的文件\n-p pid：列出某个PID进程打开的文件\nlsof -c init\n\n## 系统定时任务\ncrond服务管理与访问控制\nservice crond restart\nchkconfig crond on\n```\n##### `… … … crontab … … … ∞`\n```bash\ncrontab [选项]\n-e：编辑crontab定时任务\n-l：查询crontab任务\n-r：删除当前用户所有的crontab任务\n-u: 指定用户，不写默认是当前用户\n\ncrontab -e界面（最小识别的范围是分钟）\n* * * * * 执行的任务（绝对路径）\n第1个*：一小时中的第几分钟 [0,59]\n第2个*：一天中的第几小时 [0,23]\n第3个*：一个月中的第几天 [1,31]\n第4个*：一年中的第几月 [1,12]\n第5个*：一周中的星期几 [0,7]（0、7都代表周日）\n\n特殊符号：\n*：任何时间\n,：不连续的时间\n-：连续的时间范围\n*/n：频率，每隔多久执行一次\n例：\n0 5 1,15 * * 命令  每月1号,15号的凌晨5点0分执行命令\n40 4 * * 1-5 命令  每周一到周五的凌晨4点40执行命令\n*/10 4 * * * 命令  每天凌晨4点，每隔10分钟执行一次命令\n10-20/2 * * * * /usr/bin/date >> /opt/time  每小时的10分-20分内每隔2分执行一次\n# 注意\n定时任务调用的脚本内，%号要转义，否则不识别\n```\n##### `… … … lspci … … … ∞`\n```bash\n# 查看raid卡型号\nlspci | grep -i sas # LSI：LSI / PMC：Adaptec\n# 查看raid卡固件版本和驱动版本\necho \"LSI\" && /opt/MegaRAID/storcli/storcli64 /c0 show |grep -E 'FW Version|Driver Version'\necho \"PMC\" && /usr/sbin/arcconf getconfig 1 ad |grep -wE 'Firmware|Driver *:'\n\n## 关闭PR、CC（每周六11点启动，占用磁盘IO，特殊情况CC长时间无法完成，影响机器性能，造成机器卡顿）\n# LSI raid卡（Broadcom博科旗下）关闭方法：\n/opt/MegaRAID/storcli/storcli64 /c0 stop patrolread # 停止当前任务\n/opt/MegaRAID/storcli/storcli64 /c0 set patrolread=off # 彻底关闭pr\n/opt/MegaRAID/storcli/storcli64 /c0/vall stop cc # 停止当前任务\n/opt/MegaRAID/storcli/storcli64 /c0 set cc=off # 彻底关闭cc\n# Adaptec（Microchip微芯旗下）卡PMC关闭方法：\narcconf CONSISTENCYCHECK 1 off # PM卡只有一个cc参数，两者同时关闭开启\n\n## 检查PR、CC功能是否已关闭，且不在运行\n# LSI\n/opt/MegaRAID/storcli/storcli64 /c0 show cc\n/opt/MegaRAID/storcli/storcli64 /c0 show pr\n# PMC\narcconf getconfig 1 ad | grep -i consistency # disabled即为已关闭\n```\n##### `… … … systemctl … … … ∞`\n```bash\n#列出启动失败的服务\nsystemctl list-units --state failed\nsystemctl status [unit]\n# 设置开机自启，并且立即启动\nsystemctl enable crond --now\n```\n##### `… … … md5 … … … ∞`\n```bash\nmd5sum\n```\n\n---\n\n## 日志管理\n- 日志服务\ncentos6.x中日志服务由rsyslogd取代原本的syslogd\nrsyslogd更先进、功能更多，和syslogd相兼容\n\n- rsyslogd的新特点  \n基于TCP网络协议传输日志信息  \n更安全的网络传输方式  \n有日志消息的及时分析框架  \n后台数据库  配置文件中可以写简单的逻辑判断  \n与syslog配置文件相兼容\n\n- 查看rsyslogd服务是否启动\n```bash\nps aux | grep rsyslogd\n```\n- 查看是否自启动\n```bash\nchkconfig --list | grep rsyslog\n```\n\n- 常见日志的作用\n/var/log/cron：系统定时任务相关日志\n/var/log/cups/：打印信息日志\n/var/log/dmesg：系统在开机时内核自检的信息，也可使用dmesg直接查看内核自检信息\n/var/log/btmp：错误登录的日志（二进制文件，不能用vi查看，需要使用lastb命令查看）\n/var/log/lastlog：系统中所有用户最后一次的登录时间的日志（二进制文件，使用lastlog查看）\n/var/log/mailog：邮件信息\n/var/log/message：系统重要信息的日志（记录linux系统绝大多数重要信息，如出现问题，首先检查该文件）\n/var/log/secure：验证和授权方面的信息，只要涉及账户和密码的程序都会记录（比如系统的登录、ssh的登录、su切换用户、sudo授权、useradd、修改用户密码都会记录在此）\n/var/log/wtmp：永久记录所有用户的登录、注销信息，同时记录系统的启动、重启、关机时间（二进制文件，用last查看）\n/var/run/utmp：当前已登录的用户信息，会随着用户的登录、注销而不断变化，只记录当前登录用户信息（二进制文件，用w、who、users等命令查看）\n除系统默认的日志外，rpm安装的系统服务也会默认把日志记录在/var/log/中（源码包安装的服务日志在源码包指定目录中），不由rsyslogd服务来记录和管理，由各个服务使用自己的日志管理文档来记录自身日志\n\n- rpm包安装服务的日志\n/var/log/httpd/：rpm包安装的apache服务的默认日志目录\n/var/log/mail/：rpm包安装的邮件服务的额外日志目录\n/var/log/samba/：rpm包安装的samba服务的日志目录\n/var/log/sssd/：守护进程安全服务目录\n\n```bash\n# 查看可用的rpm包\nyum list available sudo\n# 保存rpm包\nyumdownloader --destdir=/tmp sudo-1.8.23-10.el7_9.3.x86_64\n```\n\n- rsyslogd服务日志文件格式\n时间产生的时间、发生事件的服务器的主机名、产生时间的服务名或程序名、事件的具体信息\n\n- /etc/rsyslog.conf配置文件\n```text\n# 服务名称[连接符号]日志等级  日志记录位置\nauthpriv.*  /var/log/securre  # 认证相关服务.所有日志等级  记录在/var/log/secure日志中\n1.服务名称\nauth：安全和认证相关消息（不推荐使用authpriv替代）\nauthpriv：安全和认证相关消息（私有的）\ncron：系统定时任务cront和at产生的日志\ndemon：和各个守护进程相关的日志\nftp：ftp守护进程产生的日志\nkern：内核产生的日志（不是用户进程产生的）\nlocal0-local7：为本地使用预留的服务\nlpr：打印产生的日志\nmail：邮件收发信息\nnews：与新闻服务器相关的日志\nsyslog：syslogd服务产生的日志信息（虽然服务名已改为rsyslogd，但很多配置都还沿用syslogd）\nuser：用户等级类别的日志信息\nuucp：uucp子系统的日志信息，uucp是早期linux系统进行数据传递的协议，后来也常用在新闻组服务中\n2.连接符号\n*：代表所有日志等级\n.：代表只要比后面的等级高的日志都记录下来（cron.info代表cron服务产生的日志，只要日志登记≥info级别就记录）\n.=：代表只记录所需等级日志，其他等级都不记录（*.=emerg代表人和日志服务产生的日志，只要等级是emerg等级就记录，这种用法极少见）\n.!：代表不等于，除了该等级的日志外都记录\n3.日志等级\ndebug：一般的调试信息说明\ninfo：基本的通知信息\nnotice：普通信息，但有一定的重要性\nwarning：警告信息，但还不会影响到服务或系统的运行\nerr：错误信息，一般达到err等级的信息已经可以影响到服务或系统的运行了\ncrit：临界状态信息，比err等级还要严重\nalert：警告状态信息，比crit还要严重，必须立即采取行动\nemerg：疼痛等级信息，系统已无法使用\n4.日志记录位置\n日志文件的绝对路径，如/var/log/secure\n系统设备文件，如/dev/lp0\n转发给远程主机，如@192.168.0.210.514\n用户名，如root\n忽略或丢弃日志，如~\n```\n- 日志轮替\n```text\n# 日志文件的命名规则\n1.如果配置文件中有用dateext参数，日志会用日期作为后缀，例secure-20221219，这样文件名不会重叠\n2.如果配置文件中没有dateext参数，日志文件需要进行改名。第一次进行日志轮替时，当前secure自动改名为secure.1，新建secure日志用来保存新的日志，第二次轮替，secure.1自动改名为secure.2以此类推\n# logrotate配置文件\ndaily：日志轮替周期为每天\nweekly：日志轮替周期为每周\nmonthly：日志轮替周期为每月\nrotate 数字：保留的日志文件的个数，0指没有备份\ncompress：日志轮替时，旧的日志进行压缩\ncreate mode owner group：建立新日志，同时指定新日志的权限与所有者和所属组（如create 0600 root utmp）\nmail address：日志轮替时，输出内容通过邮件发送到指定邮件地址\nmissingok：如果日志不存在，则忽略该日志的警告信息\nnotifempty：如果日志为空文件，则不进行日志轮替\nminsize 大小：日志轮替的最小值，日志一定要达到最小值才会轮替，否则就算时间达到也不轮替\nsize 大小：日志只有大于指定大小才进行日志轮替，而不是按照时间轮替（如size 100k）\ndateext：使用日期作为日志轮替文件的后缀\n# 把apache日志加入轮替\nvi /etc/logrotate.conf\n/usr/local/apache2/logs/access_log {\n    daily\n    create\n    rotate 30\n}\n```\n##### `… … … logrotate … … … ∞`\n```bash\nlogrotate [选项] 配置文件名\n空选项：按照配置文件中的条件进行日志轮替\n-v：显示日志轮替过程\n-f：强制进行日志轮替（不管日志轮替的条件是否已符合，强制配置文件中所有的日志进行轮替）\n```\n\n---\n\n## 启动管理\n- CentOS6.x启动管理\n```text\n# 系统运行级别\n0：关机\n1：单用户模式（相当于windows的安全模式，主要用于系统修复）\n2：不完全的命令行模式，不含NFS服务\n3：完全的命令行模式，就是标准字符界面\n4：系统保留\n5：图形模式\n6：重启动\n```\n##### `… … … runlevel … … … ∞`\n```bash\n查看运行级别\n```\n##### `… … … init … … … ∞`\n```bash\n# 改变运行级别\ninit 运行级别\n\n# 系统默认运行级别\nvim /etc/inittab\n# 系统开机后直接进入指定运行级别\nid:3:initdefault:\n\n# 系统启动过程\n```\n\n---\n\n## 备份恢复\n- linux系统需要备份的数据\n/root/目录、/home/目录、/var/spool/mail/目录、/etc/目录、其他目录\n\n- 备份策略\n完全备份：把左右需要备份的数据全部备份，可备份整块硬盘、整个分区或某个具体的目录\n增量备份：\n差异备份：\n##### `… … … dump … … … ∞`\n```bash\ndump [选项] 备份后的文件名 原文件或目录\n-level：0-9十个备份级别\n-f 文件名：指定备份后的文件名\n-u：备份成功后，把备份时间记录在/etc/dumpdates文件\n-v：显示备份过程中更多的输出信息\n-j：调用bzlib库压缩备份文件，其实就是把备份文件压缩成.bz2格式\n-W：显示允许被dump的分区的备份等级及备份时间\n```\n\n---\n\n## 其他\n##### `… … … chrony … … … ∞`\n```bash\nchronyc sources -v\n^* 代表正确\n^? 异常，需检查配置文件\n```\n##### `… … … tcpdump … … … ∞`\n```bash\ntcpdump -i eth0 vrrp -n\n[ecm00]# tcpdump -nnei tapd12345-67 icmp and host ${ip}\n\ntcpdump -nnei bond_virt icmp and host ${ip1} and host ${ip2}\nVLAN861，虚机1（宿主机1）丢包，抓包现象是包到了目标节点，目标节点的回包从目标节点出去后，没回到源节点\n网络上没有查出有异常情况，上述三个mac均在一个接入交换机上，端口，光功率，链路，lldp的端口连线，lacp均正常，收发包正常，mac学习正常，无飘逸，无环路\n```\n##### `… … … openssl … … … ∞`\n```bash\n#生成随机密码\nopenssl rand -base64 14 | cut -b 1-14\n```\n##### `… … … 登录信息 … … … ∞`\n```bash\n登录机器分别排查一下登录记录等信息\ntail -n 100 /var/log/secure | /bin/grep Accepted\ntail -n 50 /root/.bash_history\ntail -n 10 /etc/shadow\n/sbin/ss -antp\ndmesg|tail -n 50\ncat /etc/login.defs|/bin/grep -v ^#\ncrontab -l\ncat /etc/haproxy/haproxy.cfg | /bin/grep -v ^#\n```\n##### `… … … git … … … ∞`\n```bash\n## 提交代码\ngit add. // 添加分支代码到暂存区域\ngit commit -m \"fixed:----\" // 提交分支代码\ngit commit --amend -m \"修改一下\" // 修改最近一次commit\ngit reset --soft HEAD^ // 撤销最近一次commit\ngit reset --soft HEAD~n // 撤销最近n次commit\ngit revert HEAD // 撤销更改并推到远端\n## 分支\ngit branch // 查看当前分支\ngit branch -a // 查看远程分支\ngit branch ${分支名} // 创建分支,仅保存本地\ngit push 远程仓库名 ${远程分支名} // 推到远端\ngit checkout ${分支名} // 切换本地分支\ngit switch ${分支名} // 切换本地分支\ngit checkout -b ${分支名} // 创建新分支并切换到新分支\ngit merge bugFix // 合并bugFix分支到当前分支（合并后还是两个分支，只不过merge后在这个点交汇，建议用merge）\ngit rebase bugFix // 合并bugFix分支到当前分支（合并前commit会消失，合并为一个分支）\n# 查看当前分支\ngit status\n# 查看当前分支提交历史\ngit log\n```\n\n\n\n##### `… … … dmidecode … … … ∞`\n```bash\n# 查看是虚机还是物理机\ndmidecode -t system\nsystemd-detect-virt  结果none是物理机\n```\n##### `… … … sar … … … ∞`\n```bash\n# 查看时间段负载记录\nsar -q -s 15:00:00 -e 16:00:00\n```\n##### `… … … storcli64 … … … ∞`\n```bash\n存储节点存在过周六11点左右业务卡顿的问题，将raid卡的CC和PR功能关闭，问题解决。\nCC&PR一般是在每周六的11点开始启动，会占用磁盘IO，特殊情况下CC会长时间无法完成\n \n近期容器管理节点出现卡顿问题，经排查是CC和PR导致，现建议关闭已受影响的节点。\n \n故障现象：\n1，机器卡顿\n2，磁盘使用率高\n3，CPU使用率高\n4，此故障常出现于周六11时左右\n \n如无其他硬件及业务问题请关闭CC&PR\nLSI raid卡（Broadcom博科旗下）关闭方法：\n# 停止当前任务\n/opt/MegaRAID/storcli/storcli64 /c0 stop patrolread\n# 彻底关闭pr\n/opt/MegaRAID/storcli/storcli64 /c0 set patrolread=off\n\n # 停止当前任务\n/opt/MegaRAID/storcli/storcli64 /c0/vall stop cc\n# 彻底关闭cc\n/opt/MegaRAID/storcli/storcli64 /c0 set cc=off\n \nAdaptec（Microchip微芯旗下）卡关闭方法：\n# PM卡只有一个cc参数，两者同时关闭开启\narcconf CONSISTENCYCHECK 1 off\n```\n##### `… … … hostname … … … ∞`\n```bash\nhostname -f 查看fqdn 主机名+域名 完全域名\n```","tags":["linux"],"categories":["study","notes"]},{"title":"Linux备忘 - 上","url":"/2025/04/03/linuxNote1/","content":"# Linux备忘\n## 系统简介及注意事项\n#### VMware安装虚机\n创建虚机最小628M内存挂起==暂停（真实操作系统没有挂起）\n\n真实机修改为硬盘启动 Boot->hard device\n\n密码复杂性原则：8位以上大小写字母、数字、符号；不能是英文单词；不能是和用户相关的内容\n\nswap应该分内存的2倍，但超过2G没有意义\n\n/root/install.log：存储安装在系统中的软件包机器版本信息\n/root/install.log.syslog：存储安装过程中留下的事件信息\n/root/anaconda-ks.cfg：以Kickstart配置文件的格式记录安装过程中设置的选项信息\n\n家目录root = /root\n普通用户=/home/用户名\n\nlo lookback 本机网卡\n\n临时修改网卡\nipifconfig eth0 ***.***.***.***\n\n#### 注意事项\n命令、文件、配置、用户名等全部都严格区分大小写\n \n所有的内容都是以文件形式保存\n\n不靠扩展名区分文件类型，靠文件属性，以下扩展名便于管理、约定俗成\n压缩包：.gz .bz2 .tar.bz2 .tgz\n二进制软件包：.rpm\n网页文件：.html .php\n脚本文件：.sh\n配置文件：.conf\n\n所有存储设备都必须挂载以后才能使用，包括硬盘、U盘、光盘\n\n#### 服务器管理和维护建议\nLinux各个目录的作用boot、etc目录可以备份下\n远程服务器不允许关机，只能重启\n重启时应该关闭服务（大量数据访问突然断电容易烧坏硬盘）\n不要在服务器访问高峰运行高负载命令\n远程配置防火墙时不要把自己踢出服务器\n指定合理的密码规范并定期更新\n合理分配权限\n定期备份重要数据和日志（etc、lib、var）\n| 目录名 | 目录作用 |\n| :---: | :--- |\n| /bin/ | 存放系统命令的目录，普通用户和超级用户都可以执行。不过放在/bin下的命令在单用户模式下也可以执行 |\n| /sbin/ | 保存和系统环境设置相关的命令，只有超级用户可以使用这些命令进行系统环境设置，但是有些命令可以允许普通用户查看 |\n| /usr/bin/ | 存放系统命令的目录，普通用户和超级用户都可以执行。这些命令和系统启动无关，在单用户模式下不能执行 |\n| /usr/sbin | 存放根文件系统不必要的系统管理命令，例如多数服务程序。只有超级用户可以使用。大家其实可以注意到Linux的系统，在所有“sbin”目录中保存的命令只有超级用户可以使用，“bin”目录中保存的命令所有用户都可以使用 |\n| /boot/ | 系统启动目录，保存系统启动相关的文件，如内核文件和启动引导程序（grub）文件等 |\n| /dev/ | 设备文件保存位置。我们已经说过Linux中所有内容以文件形式保存，包括硬件。那么这个目录就是用来保存所有硬件设备文件的 |\n| /etc/ | 配置文件保存位置。系统内所有采用默认安装方式（rpm安装）的服务的配置文件全部都保存在这个目录当中，如用户账户和密码，服务的启动脚本，常用服务的配置文件等 |\n| /home/ | 普通用户的家目录。建立每个用户时，每个用户要有一个默认登录位置，这个位置就是这个用户的家目录，所有普通用户的家目录就是在/home下建立一个和用户名相同的目录。如用户user1的家目录就是/home/user1 |\n| /lib/ | 系统调用的函数库保存位置 |\n| /lost+found/ | 当系统意外崩溃或机器意外关机，而产生一些文件碎片在这里。当系统启动的过程中fsck工具会检查这里，并修复已经损坏的文件系统。这个目录只在每个分区中出现，例如/lost+found就是根分区的备份恢复目录，/boot/lost+found就是/boot分区的备份恢复目录 |\n| /media/ | 挂载目录。系统建议是用来挂载媒体设备的，例如软盘和光盘 |\n| /mnt/ | 挂载目录，早期Linux中只有这一个挂载目录，并没有细分。现在这个目录系统建议挂载额外设备，如U盘、移动硬盘和其他操作系统的分区 |\n| /misc/ | 挂载目录，系统建议用来挂载NFS服务的共享目录。只要是一个已经建立的空目录就可以作为挂载点，那么系统虽然准备了三个默认挂载目录，但到底在哪个目录挂载什么设备都由管理员自己决定。如/mnt/cdrom挂载光盘、/mnt/usb挂载U盘，都是可以的 |\n| /opt/ | 第三方安装的软件保存位置。这个目录就是放置和安装其他软件的位置，手工安装的源码包软件都可以安装到这个目录中，不过我还是更加习惯把软件放置到/usr/local/目录中，也就是说/usr/local/目录也可用来装软件 |\n| /proc/ | 虚拟文件系统，该目录中的数据并不保存到硬盘当中，而是保存到内存当中。主要保存系统的内核、进程、外部设备状态和网络状态等。如/proc/cpuinfo是保存CPU信息的，/proc/devices是保存设备驱动的列表的，/proc/filesystems是保存文件系统列表的，/proc/net是保存网络协议信息的 |\n| /sys/ | 虚拟文件系统。和/proc目录相似，都是保存在内存当中的，主要是保存与内核相关信息的 |\n| /root/ | 超级用户的家目录。直接在“/”下 |\n| /srv/ | 服务数据目录。一些系统服务启动之后，可以在这个目录中保存所需的数据 |\n| /tmp/ | 临时目录。系统存放临时文件的目录，该目录下所有用户都可以读写。不保存重要数据，最好每次开机都清空 |\n| /usr/ | 系统软件资源目录。是“Unix Software Resource”的缩写，不是user的缩写。系统中安装的软件大多数保存在这里 |\n| /var/ | 动态数据保存位置。主要保存缓存、日志以及软件运行所产生的文件 |\n\n---\n\n## SELinux安全机制\nSecurity-Enhanced Linux\n美国NSA国家安全局主导开发，一套增强Linux系统安全的强制访问控制体系\n集成到Linux内核（2.6及以上）中运行\nSELinux体系针对用户、进程、目录和文件提供了预设的保护策略，以及管理工具\n#### 运行模式及切换\n运行模式：\nenforcing：强制\npermissive：宽松\ndisabled：彻底禁用\n\n查看运行模式：getenforce\n临时立即生效强制变宽松：setenforce 0\n临时立即生效宽松变强制：setenforce 1\n永久生效需重启系统：vim /etc/selinux/config SELINUX=disabled\n```bash\n# 安装2个排错软件包（yum provides \"semanage\"）\ndnf -y install policycoreutils-pyton-utils\n# 查找现在允许的端口：\nsemanage port -l | grep http\n# 增加需要放通的端口82（删除用-d）：\nsemanage port -a -t http_port_t -p tcp 82\n```\n\n---\n\n## 防火墙\n防火墙有两种：firewalld（系统自带；底层调用的依然是iptables）、iptables\n#### 预设安全区域\n- 根据所在的网络场所区分，预设保护规则集\n    - -- public：进允许访问本机的sshd等少数几个服务（sshd、dhcp）\n    - -- trusted：允许任何访问\n    - -- block：阻塞任何来访请求（虽拒绝，但会给回应）\n    - -- drop：丢弃任何来访的数据包（直接丢弃，无回应）\n- 防火墙判定原则\n    - 查看客户端请求中来源IP地址，查看自己所有区域中规则，哪个区域中有该源IP地址规则，则进入该区域\n    - 如果所有区域都没找到，则进入默认区域（默认情况为public）\n- iptables规则链包括下表\n| 链名 | 作用 |\n| :---: | :--- |\n| INPUT链 | 进入本地主机防火墙内部的数据包会应用此链中的规则 |\n| OUTPUT链 | 从本地主机经过防火墙发出的数据包会应用此链中的规则 |\n| FORWARD链 | 需要iptables转发的数据包会应用此链中的规则 |\n| PREROUTING链 | 到达本机并在路由转发前的数据包会应用此链中的规则，用于目的地址转换（DNAT），针对主机外到达防火墙的报文，所有的数据包进来的时候都会优先由PREROUTING链处理 |\n| POSTROUTING链 | 路由之后需要离开本机的数据包会应用此链中的规则，用于源地址转换（SNAT），主机内的报文要从防火墙出去，需要经过POSTROUTING链进行处理 |\n- iptables内置了4个表如下：（表Tables是多个链的集合）\n| 表名 | 作用 | 优先级 | 是否常用 |\n| :---: | :--- | :---: | :---: |\n| Raw表 | 可以让数据包跳过链接跟踪和NAT | 1 |  |\n| Mangle表 | 修改数据包中的内容，如TTL、Qos等 | 2 |  |\n| Nat表 | 实现网络地址转换 | 3 | * |\n| Filter表 | iptables默认使用的表，实现包过滤功能 | 4 | * |\n\n#### 查看防火墙规则列表\n##### `… … … firewall … … … ∞`\n```bash\n# 检查是否安装\nrpm -q firewalld\n# 安装、启动\ndnf clean all ; dnf -y install firewalld\nsystemctl start firewalld\n# 查看当前区域规则（默认public）\nfirewall-cmd --list-all\n# 查看各个区域规则\nfirewall-cmd --list-all --zone=trusted\n                        --zone=block\n                        --zone=drop\n# 查看默认区域\nfirewall-cmd --get-default-zone\n# 默认public区域时，放行、移除http协议\ndnf -y install httpd;systemctl start httpd;访问ip（默认80端口）\nfirewall-cmd --add-service=http # 永久生效加 --permanent\nfirewall-cmd --list-all | grep services # 可以看到services（协议）的值多了http\n# 移除放行的http协议\nfirewall-cmd --remove-service=http\n# 放行、移除端口\nfirewall-cmd --add-port=80/tcp # 永久生效加 --permanent\nfirewall-cmd --list-all | grep ports\nfirewall-cmd --remove-port=80/tcp\n```\n\n---\n\n## 命令（command）\n### common命令\n命令格式：命令 [-选项] [参数]\n\n说明：个别命令使用不遵循此格式当有多个选项是，可以写在一起简化选项与完整选项 -a==--all\n#### 目录处理命令\n##### `… … … ls … … … ∞`\n```bash\n# 英文原意 list；所在路径 /bin/ls；执行权限 all\nls -a 查看全部\nls -l 长格式显示 long\nls -h 带单位显示\nls -d 显示当前目录本身\nls -i 显示文件对应i节点\nls -ldZ 显示SELinux访问权限\nls -Zld /var/www/html\nls -ldZ /webdev\n```\n##### `… … … mkdir … … … ∞`\n```bash\n# 英文原意 make directories；所在路径 /bin/mkdir；执行权限 all\nmkdir -p 递归创建\nmkdir *1 *2 *3 同时创建多个目录\n-m 指定权限，不指定m就按默认umask\nmkdir -m 750 /test\n```\n##### `… … … rmdir … … … ∞`\n```bash\n# 英文原意 remove empty directories；所在路径 /bin/rmdir；执行权限 all\nrmdir /test 删除空目录\n```\n##### `… … … cd … … … ∞`\n```bash\n# 英文原意 change directory；所在路径 shell内置；执行权限 all\ncd .. 回到上一级目录\ncd 回到主目录\ncd ~ 回到主目录\n```\n##### `… … … pwd … … … ∞`\n```bash\n# 英文原意 print working directory；所在路径 /bin/pwd；执行权限 all\npwd 显示当前目录\n```\n##### `… … … cp … … … ∞`\n```bash\n# 英文原意 copy；所在路径 /bin/cp；执行权限 all\ncp [src1] [src2] [src3] [des] 把src123复制到des\ncp -rpcp -r 复制目录\ncp -p 保留文件属性\ncp /test /root/test1 复制test并改名为test1\n- a 该选项通常在拷贝目录时使用。它保留链接、文件属性，并递归地拷贝目录，其作用等于dpR选项的组合。(复制的时候要保留文件属性用-a，不然会导致服务无法应用等问题，例如原文件拥有者为Oracle，直接cp后文件拥有者变为root，会导致数据库服务器无法使用，可以使用chown修\n改文件拥有者，或者复制的时候直接用cp -a命令)\n- d 拷贝时保留链接。\n- f 删除已经存在的目标文件而不提示。\n- i 和f选项相反，在覆盖目标文件之前将给出提示要求用户确认。回答y时目标文件将被覆盖，是交互式拷贝。\n- p 此时cp除复制源文件的内容外，还将把其修改时间和访问权限也复制到新文件中。\n- r 若给出的源文件是一目录文件，此时cp将递归复制该目录下所有的子目录和文件。此时目标文件必须为一个目录名。\n- l 不作拷贝，只是链接文件。\n```\n##### `… … … mv … … … ∞`\n```bash\n# 英文原意 move；所在路径 /bin/mv；执行权限 all\nmv [源文件或目录1] [源文件或目录2] [目标目录] 剪切文件、改名\n```\n##### `… … … rm … … … ∞`\n```bash\n# 英文原意 remove；所在路径 /bin/rm；执行权限 all\nrm -r [文件或目录] 删除目录\nrm -f 强制执行\n```\n#### 文件处理命令\n##### `… … … touch … … … ∞`\n```bash\n# 所在路径 /bin/touch；执行权限 all\ntouch test1 test2 创建空文件test1和test2\ntouch \"test1 test2\" 创建一个叫\"test1 test2\"的空文件（不建议这么用）\n```\n##### `… … … cat … … … ∞`\n```bash\n# 所在路径 /bin/cat；执行权限 all\ncat -n 显示行号\n```\n##### `… … … nl … … … ∞`\n```bash\n从第一行开始显示文件内容，并显示行号\n```\n##### `… … … tac … … … ∞`\n```bash\n# 所在路径 /usr/bin/tac；执行权限 all\ntac 反向显示文件内容（上下颠倒）不支持-n参数\n与cat相反\n```\n##### `… … … more … … … ∞`\n```bash\n# 所在路径 /bin/more；执行权限 all\nmore 基础分页显示文件内容\n翻页：（空格）（f）\n翻行：（Enter）\n显示当前行号：（=）\n退出：（q）（Q）\n退出时清屏\n```\n##### `… … … less … … … ∞`\n```bash\n# 所在路径 /usr/bin/less；执行权限 all\nless 增强分页显示文件内容\nless +50 直接显示第50行\n翻页：（空格）（f）\n向上翻页：（pageup）\n向上下翻1行：（↑）（↓）\n翻行：（Enter）\n双向搜索：（/ 向下  ? 向上  n 跳转下一个匹配项  N 跳转上一个匹配项）\n跳文件首、末：（gg G）\n实时跟踪：（F）\n显示行号：（-N）\n退出：（q）（Q）\n退出时保留内容：（-X 选项）\n```\n##### `… … … head … … … ∞`\n```bash\n# 所在路径 /usr/bin/head；执行权限 all\nhead 默认显示文件前10行\nhead -n 20 显示文件前20行\n```\n##### `… … … tail … … … ∞`\n```bash\n# 所在路径 /usr/bin/tail；执行权限 alltail 默认显示后10行\ntail -n 指定行数\ntail -f 动态显示文件末尾内容\n```\n#### 链接命令\n##### `… … … ln … … … ∞`\n```bash\n# 英文原意 link；所在路径 /bin/ln；执行权限 all\nln -s [源文件] [目标文件] 创建软链接\nln -s /etc/issue /tmp/issue.soft 创建issue的软链接文件\nln /etc/issue /tmp/issue.hard 创建issue的硬链接文件\n# 软链接 == 快捷方式；文件权限全部为777（rwxrwxrwx）；可跨分区\n# 硬链接 == cp -p + 同步更新；i节点也相同；源文件丢失硬链接依然可以访问；硬链接不能跨分区；不可以针对目录使用\n# 1个文件一定有1个i节点，但是1个i节点不一定只对应1个文件，比如硬链接\n```\n#### 权限管理命令\n默认权限644，不具有可执行权限\n谁创建的文件谁就是文件的所有者；所属组就是文件创建者的缺省组\n##### `… … … umask … … … ∞`\n```bash\n# 英文原意 the user file-creation mask；所在路径 shell内置；执行权限 all\n# 缺省创建的文件不能有x权限\numask 权限掩码，实际值=777-显示值\numask -S 以rwx形式显示新建文件缺省权限\numask 023 修改新建文件默认权限为rwxrx-r--\n# 永久修改 /etc/login.defs UMASK\n```\n##### `… … … chmod … … … ∞`\n```bash\n# 英文原意 change the permissions mode of a file；所在路径 /bin/chmod； 执行权限 all\nchmod [{ugoa}{+-=}{rwx}] [文件或目录] 改变文件或目录的权限\n [mode=421] [文件或目录]chmod -R 递归修改\nchmod u+x test.txt 所属用户增加执行权限\nchmod g+w,o-r test.txt 所属组增加写权限，其他人减读权限\nchmod g=rwx test.txt 所属组改为rwx权限\nchmod 640 test.txt 修改所属用户为读写、所属组为读、其他无权限\nchmod -R 777 /test 递归修改目录及以下文件的全部权限\n# 目录的rx权限一定是并存的\n# 目录的w权限，对目录及以下内容有w权限；即使普通用户没有文件的w权限，但所在目录有权限，即可删除\nchmod +x /usr/bin/kubectl\n```\n##### `… … … chown … … … ∞`\n```bash\n# 英文原意 change file ownership；所在路径 /bin/chown；执行权限 root\nchown [用户] [文件或目录] 改变文件或目录的所有者\nuseradd jade 添加名为jade的用户\nchown jade test.txt 改变test.txt的所有者为jade\n# 在root下才能执行\n```\n##### `… … … chgrp … … … ∞`\n```bash\n# 英文原意 change file group ownership；所在路径 /bin/chgrp；执行权限 all\nchgrp [用户组] [文件或目录]\ngroupadd jadegroup 添加名为jadegroup的组\nchgrp jadegroup test.txt 改变test.txt文件的所属组为jadegroup\n```\n##### `… … … chcon … … … ∞`\n```bash\ngetenforce查看SELinux是打开模式情况下\nls -Zld /var/www/html/ 可以看到对应的标签\nchcon -R -t httpd_sys_content_t /webdev\nls -Zld /webdev\n```\n\n#### 文件搜索命令\n##### `… … … find … … … ∞`\n```bash\n详见四剑客之find节点\n```\n##### `… … … locate … … … ∞`\n```bash\n# 所在路径 /usr/bin/locate；执行权限 all\nlocate test.txt 在文件资料库中查找文件\n# 维护的资料库在/var/lib/mlocate/mlocate.db；系统会定时更新资料库；资料库不包括/tmp；可节省系统资源\nupdatedb 手动更新文件资料库\nlocate -i Test.txt 不区分大小写\n```\n##### `… … … which … … … ∞`\n```bash\n# 所在路径 /usr/bin/which；执行权限 all\nwhich 命令\nwhich ls 搜索命令所在目录及别名信息\n```\n##### `… … … whereis … … … ∞`\n```bash\n# 所在路径 /usr/bin/whereis；执行权限 all\nwhereis ls 搜索ls所在目录及帮助文档路径\n```\n##### `… … … grep … … … ∞`\n```bash\n详见四剑客之grep节点\n帮助命令\n```\n##### `… … … man … … … ∞`\n```bash\n# 英文原意 manual；所在路径 /usr/bin/man；执行权限 all\nman [命令或配置文件]\nman ls 查看ls命令的帮助信息\n# 第一行NAME是命令作用；:/-l定位到对应参数\nman services 查看配置文件的帮助；不能加绝对路径，直接加配置文件名\nman 5 passwd 查看配置文件passwd的帮助；1 命令的帮助 5 配置文件的帮助\nman date\n\n类似man命令\nwhatis ls 获得命令的简短帮助信息\napropos 查看配置文件的简短帮助信息\ninfo 等价man，支持跳转\n命令 --help 列出命令主要选项\n```\n##### `… … … help … … … ∞`\n```bash\n# 所在路径 shell内置命令；执行权限 all\nhelp 获得shell内置命令的帮助信息；找不到路径的命令就是shell内置命令\nhelp umask 查看umask命令的帮助信息\nhelp if\n```\n#### 用户管理命令\n##### `… … … useradd … … … ∞`\n```bash\n# 所在路径 /usr/sbin/useradd；执行权限 root\nuseradd jade 添加新用户\n```\n##### `… … … passwd … … … ∞`\n```bash\n# 所在路径 /usr/bin/passwd；执行权限 all\npasswd jade 设置用户名密码\npasswd 更改当前用户的密码\npasswd --stdin testuser1\n# root可以更改任何人的密码，普通用户只能改变自己的密码\n```\n##### `… … … who … … … ∞`\n```bash\n# 所在路径 /usr/bin/who；执行权限 all\nwho 查看登录用户信息\n# tty 表示 本地终端；pts 表示 远程终端\n```\n##### `… … … w … … … ∞`\n```bash\n# 所在路径 /usr/bin/w；执行权限 all\nw 查看登录用户详细信息\n# IDLE 空闲时间；JCPU 累计占用cpu时间；PCPU 当前执行操作占用的cpu时间；WHAT 当前正在执行的命令\n```\n##### `… … … compgen … … … ∞`\n```bash\n# 查看用户\ncompgen -u # bash内置命令，查看所有用户\n```\n\n#### 压缩解压命令\n压缩格式 .gz .zip(不需要装对应软件、自带) .rar\n##### `… … … gzip/gunzip … … … ∞`\n```bash\n# 英文原意 GNU zip/unzip；所在路径 /bin/gzip gunzip；执行权限 all\ngzip 压缩后缀.gz\ngunzip test.gz <==> gzip -d test.gz 解压缩.gz的压缩文件\n# gzip只能压缩文件，不能压缩目录；压缩完不保留源文件\n```\n##### `… … … tar … … … ∞`\n```bash\n# 所在路径 /bin/tar；执行权限 all\ntar [压缩后文件名] [目录]\n-c 打包\n-C 指定解包路径\n-x 解包\n-v 显示详细信息\n-f 指定文件名，此选项要在其他选项的最后边\n-z -j -J 压缩/解压缩，.gz .bz2 .xz格式\n-t 显示包中的文件清单\n-P 以绝对路径方式进行归档压缩\n\ntar -zcf test.tar.gz mulu 打包压缩\ntar -zxvf test.tar.gz 解压缩\ntar -cf 打包\ntar -xf  -C /tmp  解压到指定目录\n```\n| 压缩格式 | 扩展名 | 特点 |\n| :---: | :---: | :---: |\n| gzip | .gz | 速度快，压缩比例低 |\n| bzip2 | .bz2 | 速度中等，压缩比例中等 |\n| xz | .xz | 速度慢，压缩比例高 |\n\t\n##### `… … … zip/unzip … … … ∞`\n```bash\n# 所在路径 /usr/bin/zip unzip；执行权限 all\nzip [压缩后文件名] [文件/目录]-r 压缩目录\nzip test.zip test 压缩文件\nzip -r mulu.zip mulu 压缩目录\nunzip test.zip 解压缩，不区分文件或目录\n# 保留源文件；压缩比80%\n```\n##### `… … … bzip2 … … … ∞`\n```bash\n# 所在路径 /usr/bin/bzip2；执行权限 all\nbzip2 [文件]\n-k 产生压缩文件后保留源文件\nbzip2 -k mulu 生成后缀.bz2打包压缩文件\ntar -cjf mulu.tar.bz2 mulu 用tar压缩成bz2后缀文件\ntar -xjf mulu.tar.bz2 解压\n```\n#### 网络命令\n##### `… … … write … … … ∞`\n```bash\n# 所在路径 /usr/bin/write；执行权限 all\nwrite <用户名> 给用户发信息；ctrl+backspace删除；ctrl+d保存结束\n# 所有用户登录在当前服务器才能互发信息，在线用户\n```\n##### `… … … wall … … … ∞`\n```bash\n# 英文原意 write all；所在路径 /usr/bin/wall；执行权限 all\nwall [message] 发广播信息# 给当前在线的所有用户发信息\n```\n##### `… … … mail … … … ∞`\n```bash\n# 英文原意 write all；所在路径 /usr/bin/wall；执行权限 all\nwall [message] 发广播信息# 给当前在线的所有用户发信息\n```\n##### `… … … ping … … … ∞`\n```bash\n# 所在路径 /bin/ping；执行权限 all\nping IP 测试网络连通性\n-c 指定发送次数\n# packet loss 丢包率\n```\n##### `… … … telnet … … … ∞`\n```bash\ntelnet ip port\nctrl+]退出\n```\n##### `… … … ifconfig … … … ∞`\n```bash\n# 英文原意 interface configure；所在路径 /sbin/ifconfig；执行权限 root\nifconfig 网卡名称 IP信息\nifconfig 查看网卡信息；eth0 本地真实网卡信息；lo 本机通信测试用的\nifconfig eth0 11.0.1.6 设置网卡信息\n```\n##### `… … … ip … … … ∞`\n```bash\n# ip命令格式:\nip 选项 对象 命令\n# 参数说明如下:\n(1)选项(OPTIONS)OPTIONS是ip命令改变其输出内容的选项。所有的选项都是以-字符开头，分为长、短两种形式。常见的选项有:\n-V，-Version 显示ip的版本信息\n-s，-stats，-statistics 输出更为详尽的信息\n-f,-family 强制使用指定的协议族，包括inet、inet6或link\n-4 -family inet的简写，指定使用IPv4协议\n-6 -fammily inet6的简写，指定使用IPv6协议\n-0 -family link的简写\n-o，-oneline 对每行记录都使用单行输出，回行用字符代替\n-r，-resolve 显示主机时，使用主机域名\n(2)对象\nOBJECT是要用户获取信息的对象。常见的对象有:\nLink：网卡信息\naddr：address IP地址信息\nneigh：neighbourARP信息\nroute：路由信息\nnetns：命名空间，rule IP策略\nmaddr：maddress 多播地址信息\nmroute：多播路由信息\ntumnel IP隧道\n```\n\n\n\n\n##### `… … … last … … … ∞`\n```bash\n# 所在路径 /usr/bin/last；执行权限 all\nlast 列出目前与过去登入系统的用户信息\n```\n##### `… … … lastlog … … … ∞`\n```bash\n# 所在路径 /usr/bin/lastlog；执行权限 all\nlastlog 检查全部用户上次登录的时间\nlastlog -u 502 检查特定用户上次登录时间\n```\n##### `… … … traceroute … … … ∞`\n```bash\n# 所在路径 /bin/traceroute；执行权限 all\ntraceroute www.sinna.com.cn 显示数据包到主机间的路径\n```\n##### `… … … netstat … … … ∞`\n```bash\n# 所在路径 /bin/netstat；执行权限 all\nnetstat [选项] 显示网络相关信息\n-t TCP协议\n-u UDP协议\n-l 监听\n-r 路由\n-n 显示IP地址和端口号\nnetstat -tlun 查看本机监听的端口\nnetstat -an 查看本机所有的网络连接\nnetstat -rn 查看本机路由表\n# ss和netstat效率对比\ntime netstat -at\ntime ss\n```\n##### `… … … ss … … … ∞`\n```bash\n#获取socket统计信息，显示更多更详细的TCP连接状态的信息，且比netstat更快速高效\nss -antpl\n-n --numeric 不解析服务名称\n-r --resolve 解析主机名\n-l --listening 显示监听状态的套接字（sockets）\n-a --all 显示所有套接字\n-o --options 显示计时器信息\n-e --extended 显示详细的套接字（socket）的内存使用情况\n-p --processed 显示使用套接字的进程\n-i --info 显示tcp内部信息\n-s --summary 显示套接字（socket）使用概况\n-4 --IPv4 仅显示IPv4的套接字\n-6\n-0 --packet 显示PACKET套接字\n-t --tcp 仅显示TCP套接字\n-u --udp 仅显示UDP套接字\n-d --dccp 仅显示DCCP套接字\n-w --raw 仅显示RAW套接字\n-x --Unix 仅显示Unix套接字\n-f --family=FAMILY显示FAMILY类型的套接字，FAMILY可选Unix、inet、inet6、link、netlink\n-A --query=QUERY, --socket=QUERY\nQUERY:={all| inet| tcp| udp | raw | unix | packet | netlink } [QUERY]\n-D --diag=FILE将原始TCP套接字信息转储到文件\n-F --filter=FILE从文件中都去过滤信息\nFLITER:=[ stateTCP-STATE ] [ EXPRESSION ]\n```\n##### `… … … setup … … … ∞`\n```bash\n# 所在路径 /usr/bin/setup；执行权限 all\nsetup 配置网络 # redhat专有，图形化界面设置\nservice network restart # 设置后重启网络\n```\n##### `… … … mount … … … ∞`\n```bash\n# 所在路径 /bin/mount；执行权限 all\nmount [-t 文件系统] 设备文件名 挂载点\nmount -t iso9660 /dev/sr0或cdrom /mnt/cdrom/\numount /dev/sr0\numount -f 强制卸载\nlsof 查看打开设备的进程\n```\n#### 关机重启命令\n##### `… … … shudown … … … ∞`\n```bash\n# 所在路径 //；执行权限\nshutdown [选项] 时间\n-c 取消前一个关机命令\n-h 关机\n-r 重启\nshutdown -h now 现在关机\nshutdown -h 20:30 下午八点半关机\n# 其他关机命令\nhalt\npoweroff # 相当于直接断电\ninit 0\n# 其他重启命令\ninit 6\nreboot\n```\n系统运行级别\n0 关机\n1 单用户\n2 不完全多用户，不含NFS服务\n3 完全多用户\n4 未分配\n5 图形界面\n6 重启\n查看系统运行级别\ncat /etc/inittab\nrunlevel\n\nlogout or ctrl+d 退出登录\n \n### 四剑客之sed\n#### `… … … sed … … … ∞`\n```bash\n# 轻量级流编辑器-数据的增删改查替换sed\nsed [选项] '[动作]' 文件名\n选项：\n-n：只输出经过sed处理的行，不修改\n-e：允许对输入数据 应用多条sed命令\n-i：sed的修改结果直接修改到文件动作：\na \\：追加，在当前行后添加1行或多行；多行时除最后一行外，每行末需要用\\代表数据未完结\nc \\：行替换，用c后面的字符串替换原数据行；替换多行时除最后一行外，每行末需要用\\代表数据未完结\ni \\：插入，在当前行前添加1行或多行；多行时除最后一行外，每行末需要用\\代表数据未完结\nd：删除，删除指定的行\np：打印，输出指定的行\ns：字串替换，格式“行范围s/旧字串/新字串/g”\n\n# 查看文件的第2行\nsed -n '2p' testfile.txt\n\n# 删除第2行到第4行的数据，但不修改文件本身\nsed '2,4d' testfile.txt\n\n# 在第2行后追加hello\nsed '2a hello' testfile.txt\n\n# 在第二行前插入两行数据\nsed '2i hello \\world' testfile.txt\n\n# 数据替换\nsed '2c tihuan' testfile.txt\n\n# 字符串替换\n# 替换第3行的old为new并写入\nsed '3s/old/new/g' testfile.txt\n# 同时替换old1 old2为空\nsed -e 's/old1//g;s/old2//g' testfile.txt\n# 找到expr开头的行，左花括号后插入job字段\nsed -i '/expr/s/{/{job!~\\\\\"k8s-(.*)-prometheus\\\\\"/g' grafana.txt\n```\n\n### 四剑客之awk字符截取\n#### `… … … cut … … … ∞`\n```bash\ncut [选项] 文件名\n-f n：提取第n列\n-d 分隔符：按照指定分隔符分隔列\n# 仅限制表符、分隔符，空格不适用\n# 根据:分隔提取第1、3列\ncut -d \":\" -f 1,3 testfile.txt \n错误示例：df -h | cut -d \" \" -f 5  提取出来的是空格\n```\n#### `… … … printf … … … ∞`\n```bash\nprintf '输出类型输出格式' 输出内容\n输出类型：\n%ns：输出字符串（n指代输出几个字符）\n%ni：输出整数（n指代输出几个数字）\n%m.nf：输出浮点数（m、n是数字，指代输出的整数位数和小数位数，如%8.2f代表共输出8位，6位整数2位小数）\n输出格式：\n\\a：输出警告声音\n\\b：输出退格键\n\\f：清屏\n\\n：换行\n\\r：回车\n\\t：水平输出Tab键\n\\v：垂直输出Tab键\n\nprint：会在每个输出后自动加入1个换行符，linux默认没有print\nprintf：是标准格式输出命令，并不会自动加入换行符，需手工加入换行符\n```\n#### `… … … awk … … … ∞`\n```bash\nawk '条件1{动作1} 条件2{动作2}…' 文件名\n条件（Pattern）：一般用关系表达式作为条件，如>、>=、<=\n动作（Action）：格式化输出；流程控制语句\n\n# 处理文本，将文本按照指定的格式输出\n# 数据过滤 数据处理 数据统计\nNF 最后一列\nNR 行号 从1开始，新的文件延续上面的计数，新文件不从1开始\nFNR 读取文件的记录数（行号），从1开始，新的文件重新从1开始计数\nFS 输入字段分隔符，默认是空格\nOFS 输出字段分隔符 默认也是空格\nRS 输入行分隔符，默认为换行符\nORS 输出行分隔符，默认为换行符\n\nawk '{print $1,$NF}'\n\n# 索引1到5个字符\nawk '{print substr($0,1,5)}'\n\n# 跳过行首空格，输出第1个字符\nawk '{sub(/^[ ]*/,\"\");print substr($0,1,1)}'\n\n# 用printf打印表格\nawk -F: '{printf \"|%-15s| %-10s| %-15s|\\n\", $1,$2,$3}' /etc/passwd\n\n# 内置变量FS 以什么为分隔符\ncat /etc/passwd | grep \"/bin/bash\" | awk 'BEGIN {FS=\".\"} {printf $1 \"\\t\" $3 \"\\n\"}'\n\n# 统计第一列字符的最大个数\nawk -F: 'BEGIN{num=0}{if(length($1)>num){num=length($1)}}END{print num}' /etc/passwd\n\n# 输出第一列最后一列排列整齐\nawk -F: '{printf \"%-15s %s\\n\",$1,$NF}' /etc/passwd\n\n# 打印奇数行\nawk '{if(NR%2){print NR,$0}}' /etc/passwd\n\n# 打印偶数行\nawk '{if(NR%2==0){print NR,$0}}' /etc/passwd\n\n# 打印偶数行中包含bash的行\nawk '/bash/ {if(NR%2==0){print NR,$0}}' /etc/passwd\n\n# 在行首输出“奇/偶数行 行号”\nawk '{if(NR%2){printf \"奇数行: %d %s\\n\",NR,$0}else{printf \"偶数行: %d %s\\n\",NR,$0}}' /etc/passwd\n\n# 在第1、3行前输出行号\nawk '{if(NR==1){print \"1\",$0}else if (NR==3){print NR,$0} else{print $0}}' /etc/passwd\n\n# 统计/etc/nginx/nginx.conf中所有词的个数\negrep -o \"[a-zA-Z0-9]+\" /etc/nginx/nginx.conf | awk '{if(arr[$1]){arr[$1]++}else{arr[$1]=1}}END{for(i in arr){printf \"%-20s %d\\n\",i,arr[i]}}'egrep -o \"[a-zA-Z0-9]+\" /etc/nginx/nginx.conf | awk '{arr[$1]++}END{for(i in arr){printf \"%-20s %d\\n\",i,arr[i]}}'\n\n# 统计/etc/fstab中以#开头的行中 词的个数\negrep '^ *#' /etc/fstab | egrep -o \"[a-zA-Z0-9]+\" | awk '{arr[$1]++}END{for(i in arr){printf \"%-20s %d\\n\",i,arr[i]}}'\n\n# 统计/etc/passwd中每个解析器的用户数\nawk -F: '{arr[$NF]++}END{for(i in arr){print i,arr[i]}}' /etc/passwd\n\n# 使用stat打印数字权限\nstat 1.txt | egrep \"Uid\" | awk -F/ '{print $1}' | awk 'BEGIN{FS=\"\"}{print $6,$7,$8}'\n\n# 使用ll打印数字权限\nll 1.txt | awk '{print $1}' | awk 'BEGIN{FS=\"\"}{if($2==\"r\"){u+=4} if($3==\"w\"){u+=2} if($4==\"x\"){u+=1} if($5==\"r\"){g+=4} if($6==\"w\"){g+=2} if($7==\"x\"){g+=1} if($8==\"r\"){o+=4} if($9==\"w\"){o+=2} if($10==\"x\"){o+=1}} END{print u,g,o}'\n\n# while 每行打印3遍\nawk '{i=0;while(i<3){print $0;i++}}' /etc/passwd\n\n# 打印第10行的全部列-for\nawk -F: 'NR==10{for(i=1;i<=NF;i++){print $i}}' /etc/passwd\n\n# 打印第10行的全部列-while\nawk -F: 'NR==10{i=1;while(i<=NF){print $i;i++}}' /etc/passwd\n\n# 获取月是Jul 日>20的行\ncat secure* | grep Accept | awk -F\" \" '{if($1==\"Jul\" &amp;&amp; $2>20){print $0}}'\n\nawk '$2 ~ /ia/ {print $0}'\n\n# 获取k8s节点内存占用超过90的节点\nkubectl top node | awk '/[0-9]+/{if($NF>=90){print}}'\n\n# 获取节点总内存\nkubectl get nodes -o jsonpath='{.items[*].status.capacity.memory}' | awk '{sum+=$1} END {print sum/1024/1024 \" MB\"}'\n\n# 获取每台的可分配内存并以换行结尾\nkubectl get nodes -o jsonpath=\"{range .items[*]}{.metadata.name}{'\\t'}{.status.capacity.memory}{'\\t'}{.status.allocatable.memory}{'\\n'}{end}\" | awk '{print $1 \" \" $2/1024 \"MB \" $3/1024/1024 \"MB\"}'\n```\n \n\n### 四剑客之grep\n#### `… … … grep … … … ∞`\n```bash\n# 所在路径 /bin/grep；执行权限 all；针对文件内容，输出包含指定字符串的行\ngrep [选项] [查找条件] 目标文件\ngrep -i：忽略大小写\ngrep -v：排除指定字串\ngrep -v ^# test.sh：排除以#开头的行；^标识行首\ngrep --color=auto：搜索出的关键字用颜色显示\n# 常用选项：-i -v\n# 常用查找条件：\n^ 以什么开头\n$ 以什么结尾\n^$ 标识空行\n获取有效信息（过滤空行、注释）：grep -Ev '^$|^#' /etc/login.defs\ngrep -C 50 \"MQ开始推送云策\"\ngrep -C 50 \"860523323848888321\"\ngrep -C 50 \"14:12\"\n```\n\n### 四剑客之find\n#### `… … … find … … … ∞`\n```bash\n# 精确查找文件\n# 查找过程中如果遇到/proc目录下的报错，属于正常现象，因为/proc不占用磁盘空间，占用的是内存空间\nfind [查找目录] [条件]\n-type：按类型查找（f、d、l）\n-name：按文档名称查找\n-size：按文件大小查找（k、M、G）\n查找大于2M的：find /boot -size +2M\n查找小于1M的：find /boot -size -1024K（-1M是bug查不出来）\n-user：按文件所有者查找\n-perm：按文件权限查找\n\t查找包含SGID的：find /usr/ -perm -g=s\n\t查找就是SGID的：find /usr/ -perm g=s\n\t查找不包含的：find /usr/ -perm /g=s\n    查找当前目录下权限不是644的php文件：find . -type f -name \"*.php\" ! -perm 644\n-mtime：按修改时间查找\n\t查找近10天修改的文件：find /etc -mtime -10\n\t查找10天前：find /etc/ -mtime +10\n# 多条件查找\n连接符：\n-a <==> &&（默认-a，可省略不写）\n-o <==> ||\n\n# 处理查找到的内容\nfind [目录] [条件] -exec 处理命令 {} \\;\n{} 标识find查找到的每一个结果，\\; 标识操作结束\n#  拷贝前findfiles目录需要存在，否则会出现findfiles文件\nfind /boot/ -name \"vm*\" -exec cp -r {} /root/findfiles \\;\n```\n#### `… … … join … … … ∞`\n```bash\n# 获取ecm节点总内存、k8s分配内存、内存占比\njoin -1 1 -2 1 <(kubectl get nodes -o jsonpath=\"{range .items[*]}{.metadata.name}{'\\t'}{.status.capacity.memory}{'\\t'}{.status.allocatable.memory}{'\\n'}{end}\" | grep ecm |awk '{if(index($3,\"Ki\")>0){print $1 \" \" $2/1024 \"Mi \" $3/1024 \"Mi\"}else{print $1 \" \" $2/1024 \"Mi \" $3/1024/1024 \"Mi\"}}') <(kubectl top node | grep ecm | awk '{print $1,$4,$5}') | awk 'BEGIN{print \"节点\",\"总内存\",\"k8s分配内存\",\"已使用内存\",\"使用内存占比\"}{print}'\n\n# 以第一个命令的第一个串儿为key，以第二个命令的第一个串儿为key，两个命令需排过序\njoin -1 1 -2 1\n```\n### vim\n```bash\n# 建立、编辑、显示文本文件\n命令模式 -> esc进入命令模式\n插入模式 -> 命令按i a o进入插入\n编辑模式 -> 命令模式输:\n\n# 命令模式\nA 跳入行末进入编辑\nI 跳到行首进入编辑\no 光标所在下一行进入编辑\nO 光标所在上一行进入编辑\n\n0 跳到行首 \n$ 跳到行尾\ngg 跳到首行\nG 跳到尾行\nnG 跳到第n行\nu 撤销\nctrl r 恢复撤销\nd$ 删到行尾\nD 删到行尾\nn + x 删除n个字符\n\nndd 删除光标所在的向下n行\nd1G 删除光标所在到第一行\ndG 删除光标所在到最后一行\nd0 删除光标所在到该行最前面的一个字符\nx 相当于backspace\nX 相当于delete\nnx 连续向后删除n个字符\nyy 复制当前行\np 粘贴到光标所在行下\nP 粘贴到贯标所在行上\nnyy 复制当前行到向下n行\ndd 剪切当前行\nndd 剪切当前行以下n行\nr 替换当前字符\nR 光标所在处替换，直到esc退出\nZZ 保存修改并退出快捷键\n\n# 编辑模式\n:set nu 显示行号\n:n 跳到第n行\n:n1,n2d 删除指定范围的行\n:%s/old/new/g 全文替换指定字符串；结尾的g不询问直接替换，c询问\n:n1,n2s/old/new/g 在一定范围内替换指定字符串\n:n1,n2s/^/#/g 连续行注释；^标识行首\n:n1,n2s/^#//g 连续行替换注释为空\n:n1,n2s/^/\\/\\//g 连续航添加//注释；\\转义符\n:set ff?   查看当前文本格式\n:set ff=unix  设置为unix格式\n\n查找按/\nn 向下查找\nN 向上查找\n\n:w 保存修改\n:w new_filename 另存为指定文件\n:wq 保存修改并退出\n:q! 不保存退出\n:wq! 强制保存修改并退出（文件所有者及root可使用）\n\n:r 文件名 # 导入文件内容到光标所在行\n:! 命令 # 不退出vim执行命令\n:r !date # 导入命令执行结果到光标所在行\n:map ^P I#<ESC> 跳到行首并进入插入模式并插入\"#\"；^P用ctrl+v+p输入\n:map ^B 0x 跳到行首，删除行首第一个字符\n:map ^H helloworld 插入helloworld\n:ab mymail 281108530@qq.com 替换mymail为邮箱\n\n/$HOME/.vimrc 快捷键放到配置文件里，重启不失效\n```\n> 配置vim适应yaml语法\n```bash\n# 文件和位置是固定的，用于设置vim的格式\nvim ~/.vimrc\nset nu ai ts=2 et cuc\n```\n| set | Word | Comment |\n| :---: | :---: | :---: |\n| ai | autoindent | 自动缩进 |\n| ts | TabStop | Tab*1=Space*2 |\n| et | ExpandTab | 将tab键转换为相应个数的空格 |\n| cuc | CursorColumn | 光标列对齐 |\n| nu | number | 设置行号 |\n### shell命令\n#### `… … … date … … … ∞`\n```bash\n%I 小时，12小时制（01~12）\n%k 小时，24小时制（0~23）\n%l 小时，12小时制（1~12）\n%M 分钟（00~59）\n%p 显示出AM或PM\n%r 显示时间，12小时制（hh:mm:ss %p）\n%s 从1970年1月1日00:00:00到目前经历的秒数\n%S 显示秒（00~59）\n%T 显示时间，24小时制（hh:mm:ss）\n%X 显示时间的格式（%H:%M:%S）\n%Z 显示时区，日期域（CST）\n%a 星期的简称（Sun~Sat）\n%A 星期的全称（Sunday~Saturday）\n%h,%b 月的简称（Jan~Dec）\n%B 月的全称（January~December）\n%c 日期和时间（Tue Nov 20 14:12:58 2012）\n%d 一个月的第几天（01~31）\n%x,%D 日期（mm/dd/yy）\n%j 一年的第几天（001~366）\n%m 月份（01~12）\n%w 一个星期的第几天（0代表星期天）\n%W 一年的第几个星期（00~53，星期一为第一天）\n%y 年的最后两个数字（1999则是99）\n```\n#### `… … …  加减操作 … … … ∞`\n```bash\n# 显示当前年月日\ndate +%Y%m%d\n# 显示前一天的日期\ndate -d “+1 day” +%Y%m%d\n# 显示后一天的日期\ndate -d “-1 day” +%Y%m%d\n# 显示上一月的日期\ndate -d “-1 month” +%Y%m%d\n# 显示下一月的日期\ndate -d “+1 month” +%Y%m%d\n# 显示前一年的日期\ndate -d “-1 year” +%Y%m%d\n# 显示下一年的日期\ndate -d “+1 year” +%Y%m%d\n# 2秒后输出\ndate -d “2 second” +\"%Y-%m-%d %H:%M.%S\"\n# 时间戳转换时间date\ndate -d @时间戳\ndate -d \"1970-01-01 时间戳 days\"\n# 时间转时间戳\necho $(($(date --date=\"2022/12/09\" +%s)/86400+1))\n```\n#### `… … … curl … … … ∞`\n```bash\n#获取汽油价格json格式化\ncurl -shttps://api.help.bj.cn/apis/youjiajq\n#获取汽油价格 数组\ncurl -shttps://api.help.bj.cn/apis/youjia| jq .data[1][1]\n#查看IP\ncurl myip.ipip.net\n\ncurl -I -s --connect-timeout 5 -m 5 -w \"%{http_code}\" -o /dev/null -u ${user}:${pass}://${ip}/root/.kube\n```\n \n---\n\n## 软件包管理\n#### 软件包分类\n源码包（脚本安装包）\n优点：开源；可自由选择所需功能；软件编译安装，更加稳定效率更高；卸载方便\n缺点：安装过程步骤多、容易出现拼写错误；编译过程时间长，比二进制长；安装过程报错较难解决\n\n二进制包（RPM包、系统默认包）\n优点：安装简单；比源码包速度快\n缺点：不能看到源代码；功能选择不如源码包灵活；依赖性，需要依赖别的包\n#### RPM包管理 - rpm命令管理\nRPM包命名原则\nhttpd-2.2.15-15.el6.centos.1.i686.rpm\nhttpd  软件包名\n2.2.15  软件版本\n15  软件发布的次数\nel6.centos  适合的Linux平台\ni686  适合的硬件平台rpm  \nrpm包的扩展名\n\nRPM包依赖性\n树形依赖：a->b->c\n环形依赖：a->b->c->a\n模块依赖：查询网站 www.rpmfind.net\n\nRPM命令管理\n包全名：操作的包是未安装的软件包时，使用包全名，而且要注意路径\n包名：操作已安装的软件包时，使用包名，是搜索/var/lib/rpm/中的数据库\n##### `… … … rpm安装 … … … ∞`\n```bash\nrpm -ivh 包全名\n-i (install)  # 安装\n-v (verbose)  # 显示详细信息\n-h (hash)  # 显示进度\n--nodeps  # 不检测依赖性\n```\n##### `… … … rpm包升级 … … … ∞`\n```bash\nrpm -Uvh 包全名\n-u (upgrade)  # 升级\n```\n##### `… … … rpm包卸载 … … … ∞`\n```bash\nrpm -e 包名\n-e (erase)  # 卸载\n--nodeps  # 不检查依赖性\n```\n##### `… … … rpm查询 … … … ∞`\n```bash\nrpm -qa\n-q (query)  # 查询包是否安装\n-a (all)  # 查询所有已经安装的rpm包\n\n# 查询包详情，未安装的包用全名\nrpm -qi 包名\n-i (information)  # 查询软件信息\n-p (package)  # 查询未安装包信息\n\n# 查询包中文件安装位置，未安装的包用全名\nrpm -ql 包名\n-l (list)  # 列表\n-p (package)  # 查询未安装包信息，查询打算装的位置\n\n# 查询系统文件属于哪个软件包\nrpm -qf 系统文件名\n-f (file)\n\n# 查询软件包的依赖性\nrpm -qR 包名\n-R (requires)  # 查询软件包的依赖性\n-p (package)  # 查询未安装包信息\n```\n##### `… … … rpm包校验 … … … ∞`\n```bash\nrpm -V 已安装的包名\n-V (verify)  # 校验指定RPM包中的文件\n\n# 验证内容中的8个信息的具体内容，未改变的显示\".\"\nS # 文件大小是否改变\nM # 文件的类型或文件的权限（rwx）是否被改变\n5 # 文件MD5校验和是否改变（可以堪称文件内容是否改变）\nD # 设备的中，从代码是否改变\nL # 文件路径是否改变\nU # 文件的属主是否改变\nG # 文件的属组是否改变\nT # 文件的修改时间是否改变\n\n# 文件类型\nc # 配置文件（config file）\nd # 普通文档（documentation）\ng # “鬼”文件，很少见，意思该文件不应该被这个rpm包包含（ghost file）\nl # 授权文件（license file）\nr # 描述文件（read me）\n```\n##### `… … … rpm包中文件提取 … … … ∞`\n```bash\nrpm2cpio 包全名 | cpio -idv .文件绝对路径\n\nrpm2cpio  # 将rpm包转换为cpio格式\ncpio  # 是一个标准工具，用户创建软件档案文件和从档案文件中提取文件\n\ncpio 选项 < [文件|设备]\n-i  # copy-in模式，还原\n-d  # 还原时自动新建目录\n-v  # 显示还原过程\n```\n#### RPM包管理 - yum在线管理\nredhat需要付费才能使用yum，centos免费\n```bash\n## IP地址配置\n# redhat用setup\n1.启动网卡\nvim /etc/sysconfig/network-scripts/ifcfg-eth0\n改为ONBOOT=\"yes\"\n\n2.重启网络服务\nservice network restart\n\n## 网络yum源\nvim /etc/yum.repos.d/CentOS-Base.repo\n[base]  # 容器名称\nname  # 容器说明，可以随便填\nmirrorlist  # 镜像站点，可注释\nbaseurl  # yum源服务器的地址。默认时CentOS官方的yum源服务器，也可改为其他yum源地址\nenabled  # 此容器是否生效，=1 or 不写为生效 =0为不生效\ngpgcheck  # 1为RPM的数字证书生效 0为不生效\ngpgkey  # 数字证书的公钥文件保存位置，无需修改\n```\n##### `… … … yum 查询 … … … ∞`\n```bash\n# 查询所有可用软件包列表\nyum list\n\n# 搜索服务器上所有和关键字相关的包\nyum search 关键字\n```\n##### `… … … yum 安装 … … … ∞`\n```bash\nyum -y install 包名\ninstall  # 安装\n-y  # 自动回答yes\n```\n##### `… … … yum 升级 … … … ∞`\n```bash\nyum -y update 包名  # 不加包名是升级所有包，慎用\nupdate  # 升级\n-y  # 自动回答yes\n```\n##### `… … … yum 卸载 … … … ∞`\n```bash\nyum -y remove 包名  # 尽量不卸载\nremove  # 卸载\n-y  # 自动回答yes\n```\n##### `… … … yum 软件组 … … … ∞`\n```bash\n# 列出所有可用的软件组列表\nyum grouplist\n\n# 安装指定软件组，组名可以由grouplist查询出来\nyum groupinstall 软件组名  # 有空格用\"\"\n\n# 卸载指定软件组\nyum groupremove 软件组名\n\n## 光盘yum源搭建\n1.挂载光盘\nmount /dev/cdrom /mnt/cdrom/\n2.2.让网络yum源文件失效\ncd /etc/yum.repos.d/\nmv CentOS-Base.repo CentOS-Base.repo.bak\nmv CentOS-Debuginfo.repo CentOS-Base.repo.bak\nmv CentOS-Vault.repo CentOS-Vault.repo.bak\n3.修改光盘yum源文件\nvim CentOS-Media.repo\n[c6-media]name=CentOS-$releasever - Media\nbaseurl=file:///mnt/cdrom\n# 地址为自己的光盘挂载地址\n#        file:///media/cdrom/\n#        file:///media/cdrecorder/\n# 注释这两个不存在的地址\ngpgcheck=1\nenabled=1\n# 把enabled=0改为enabled=1，让这个yum源配置文件生效gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6\n```\n#### 源码包脚本安装包\n- 源码包和rpm包的区别\n安装前：源码包是开源的\n安装后：安装位置不通\n\n- 安装位置不同带来的影响：\nrmp包安装的服务可以使用系统服务管理命令(service)来管理，例如rpm包安装的apache的启动方法：\n/etc/rc.d/init.d/httpd start\nservice httpd start\n源码包安装的服务则不能被service管理，因为没有装到默认路径中，所以只能用绝对路径进行服务的管理\n/usr/local/apache2/bin/apachectl start\n\n- 源码包安装过程\n```bash\n1.安装准备\n# 安装C语言编译\nrpm -q gcc\n# 下载源码包\nhttp://mirror.bit.edu.cn/apache/httpd/\n2.安装注意事项\n# 源代码保存位置：/usr/local/src/\n# 软件安装位置：/usr/local/\n# 如何确定安装过程报错：安装过程停止、并出现error、warning或no的提示\n3.开始安装\n# 解压缩下载的源码包、进入解压缩目录\n# 查看说明文件里的安装步骤\ncat INSTALL 或者 cat README\n./configure --prefix=/usr/local/apache2  # 软件配置与检查\n定义需要的功能选项\n检测系统环境是否符合安装要求\n把定义好的功能选项和检测系统环境的信息都写入Makefile文件，用于后续的编辑\nmake  # 编译  \n编译报错的话，make clean可以清空编译\nmake instll  # 编译安装\n4.卸载\n# 不需要卸载命令，直接删除安装目录，不会遗留任何垃圾文件\nrm -rf 安装目录\n```\n脚本安装包并不是独立的软件包类型，常见安装的是源码包\n人为把安装过程写成了自动安装的脚本，只要执行脚本，定义简单的参数，就可以完成安装\n\n- 常见脚本安装包\nWebmin\n是一个基于Web的Linux系统管理界面，可通过图形化的方式设置用户账号、Apache、DNS、文件共享等服务\n```bash\n下载安装包、解压进入目录、执行./setup.sh\nctrl+backspace # 删除乱码\n```\n\n---\n\n## 用户用户组管理\n### 用户\n#### 用户配置文件\n##### `… … … /etc/passwd … … … ∞`\n```bash\n# 用户信息文件\n第1字段：用户名称\n第2字段：密码标志，密码占位符\n第3字段：UID（用户ID）0：超级用户1-499：系统用户（伪用户）500-65536：普通用户\n第4字段：GID（用户初始组ID）\n第5字段：用户说明初始组：一登录就有的组，默认和用户同名  附加组：可加入多个附加组，拥有这些组的权限\n第6字段：家目录普通用户：/home/用户名/超级用户：/root/\n第7字段：登录之后的Shell标准Shell是/bin/bash，还可以写如/sbin/nologin（不能登陆）\n```\n##### `… … … /etc/shadow … … … ∞`\n```bash\n# 影子文件\n权限000 仅root可查看\n存放加密后的密码\n第1字段：用户名\n第2字段：加密密码加密算法：SHA512散列加密算法\n        如果密码位是\"!!\"or\"*\"代表没有密码，不能登录\n第3字段：密码最后一次修改日期19700101作为标准时间，每过一天时间戳加1\n第4字段：两次密码的修改间隔时间（和第3字段比）\n第5字段：密码有效期（和第3字段比）\n第6字段：密码修改到期前的警告天数（和第5字段比）\n第7字段：密码过期后的宽限天数（和第5字段比）\n        0：过期后立即失效\n        -1：永不失效\n第8字段：账号失效时间时间戳表示、等级比第5字段高\n第9字段：保留\n```\n##### 用户管理相关文件\n```bash\n家目录 # 添加用户时自动生成\n普通用户：/home/用户名/ # 权限700\n超级用户：/root/ # 权限550\n```\n\n##### 用户邮箱\n/var/spool/mail/用户名/\n\n##### 用户模板目录\n/etc/skel/\n\n##### 用户默认值文件\n/etc/default/useradd\n```bash\nGROUP=100  # 用户默认组\nHOME=/home  # 用户家目录\nINACTIVE=-1  # 密码过期宽限天数（shadow文件第7字段）\nEXPIRE=  # 密码失效时间（shadow文件第8字段）\nSHELL=/bin/bash  # 默认shellSKEL=/etc/skel  # 模板目录\nCREATE_MAIL_SPOOK=yes  # 是否建立邮箱\n```\n\n##### `… … … /etc/login.defs … … … ∞`\n```bash\nPASS_MAX_DAYS 99999  # 密码有效期（shadow文件第5字段）\nPASS_MIN_DAYS 0  # 密码修改间隔（shadow文件第4字段）\nPASS_MIN_LEN 5  # 密码最小5位（PAM）\nPASS_WARN_AGE 7  # 密码到期警告（shadow文件第6字段）\nUID_MIN 500  # 最小和最大UID范围\nGID_MAX 60000\nENCRYPT_METHOD SHA512  # 加密模式\n```\n\n#### 命令\n##### `… … … useradd … … … ∞`\n```bash\n# useradd创建的所有新用户会遵循/etc/login.defs下的规定\nuseradd [选项] 用户名\n-u UID：手工指定用户的UID号\n-d 家目录：手工指定用户的家目录\n-c 用户说明：手工指定用户的说明\n-g 组名：手工指定用户的初始组\n-G 组名：指定用户的附加组\n-s shell：手工指定用户的登录shell，默认是/bin/bash\n```\n##### `… … … passwd … … … ∞`\n```bash\n# 超级用户可以更改所有用户的密码，普通用户只能修改自己的密码passwd [选项] 用户名\n-S  # 查询用户密码的密码状态，仅root可用\n-l  # 暂时锁定用户，仅root可用\n-u  # 解锁用户，仅root可用\n--stdin  # 可以通过管道符输出的数据作为用户的密码  \necho \"123\" | passwd --stdin testuser\n除root外，需满足密码复杂度，8位以上，含数字大小写字母\n```\n##### `… … … usermod … … … ∞`\n```bash\n# 修改用户信息\nusermod [选项] 用户名\n-u UID：修改用户的UID号\n-c 用户说明：修改用户的说明信息\n-G 组名：修改用户的附加组\n-L：临时锁定用户\n-U：解锁用户锁定\n-s：修改shell解释器\n```\n##### `… … … chage … … … ∞`\n```bash\n# 修改用户密码状态，用vim shadow也能改\nchage [选项] 用户名\n-l：列出用户的详细密码状态\n-d 日期：修改密码最后一次更改日期（shadow第3字段）\n-m 天数：两次密码修改间隔（shadow第4字段）\n-M 天数：密码有效期（shadow第5字段）\n-W 天数：密码过期前警告天数（shadow第6字段）\n-I 天数：密码过后宽限天数（shadow第7字段）\n-E 日期：账号失效时间（shadow第8字段）\n-E -1：取消刚刚设置的失效时间\n\n账号有效期：是指在一定日期之前，用户账户可以正常使用系统资源的时间范围。在有效期内，用户可以登录系统、使用系统资源与服务等。而一旦过了有效期，系统将会禁止该用户访问系统资源，强制其退出或限制其权限。\n\n常用：chage -d 0 testuser  # 把用户密码修改日期归0，用户一登陆就得修改密码\n```\n##### `… … … userdel … … … ∞`\n```bash\nuserdel [选项] 用户名\n-r：删除用户的同时删除用户家目录\n# 手动删除用户\nvim /etc/passwd\nvim /etc/shadow\nvim /etc/group\nvim /etc/gshadow\nrm -rf /var/spool/mail/lamp\nrm -rf /home/lamp/\n```\n##### `… … … id … … … ∞`\n```bash\n# 查看用户ID\nid 用户名\n```\n##### `… … … su … … … ∞`\n```bash\n# 切换用户身份su\nsu [选项] 用户名\n-：使用-代表连带用户的环境变量一起切换\n-c：仅执行一次命令，而不切换用户身份\n例：不切换成root但执行useradd命令添加testuser用户\nsu -root -c \"useradd testuser\"\nsu - sjwocloud -s /bin/bash\n```\n##### `… … … env … … … ∞`\n```bash\n查看当前用户的环境变量\n```\n### 用户组\n#### 用户组配置文件\n##### `… … … /etc/group … … … ∞`\n```bash\n# 组信息文件\n第1字段：组名\n第2字段：组密码标志\n第3字段：GID\n第4字段：组中附加用户\n```\n##### `… … … /etc/gshadow … … … ∞`\n```bash\n# 组密码文件\n第1字段：组名\n第2字段：组密码\n第3字段：组管理员用户名\n第4字段：组中附加用户\n```\n\n#### 命令\n##### `… … … groupadd … … … ∞`\n```bash\ngroupadd [选项] 组名\n-g GID：指定组ID\n```\n##### `… … … groupmod … … … ∞`\n```bash\ngroupmod [选项] 组名\n-g GID：修改组ID\n-n 新组名：修改组名\n```\n##### `… … … groupdel … … … ∞`\n```bash\n# 删除用户组\ngroupdel 组名\n```\n##### `… … … gpasswd … … … ∞`\n```bash\n# 修改用户属组，仅限附属\ngpasswd 选项 组名\n-a 用户名：把用户加入组\n-d 用户名：把用户从组中删除\n# 或直接修改组文件/etc/group\n```\n\n---\n\n## 权限管理\n#### 文件类型\n- 文件类型-rw-r--r--\nr 读 4；可以查看文件内容；可以列出目录中的内容\nw 写 2；可以修改文件内容；可以在目录中创建、删除文件\nx 执行 1；可以执行文件；可以进入目录- 普通文件l 软链接\n\n- 文件普通权限\nrw-        r--          r--\nu所有者 g所属组 o其他人（除所有者、所属组以外的用户）\n#### ACL权限\nACL解决身份不足的情况，不考虑ugo的权限\n\n##### `… … … dumpe2fs … … … ∞`\n```bash\n# 查看分区ACL权限是否开启\ndumpe2fs -h /dev/sda3\n# dumpe2fs命令是查询指定分区详细文件系统信息的命令\n-h：仅显示超级块中信息，而不显示磁盘块组的详细信息\n```\n##### `… … … 开启ACL权限 … … … ∞`\n```bash\n## 临时开启分区ACL权限\n# 重新挂载根分区，并挂载加入acl权限\nmount -o remount,acl /\n\n## 永久开启分区ACL权限\n# 加入acl\nvi /etc/fstab\nUUID=c2ca6…… / ext4 defaults,acl  1 1\n# 重新挂载文件系统或重启系统，使修改生效\nmount -o remount /\n```\n##### `… … … 查看ACL权限 … … … ∞`\n```bash\ngetfacl 文件名\n```\n##### `… … … 设定ACL权限 … … … ∞`\n```bash\nsetfacl 选项 文件名\n-m：设定ACL权限\n-x：删除指定的ACL权限\n-b：删除所有的ACL权限\n-d：设定默认ACL权限\n-k：删除默认ACL权限\n-R：递归设定ACL权限\n\n例：给用户testuser赋予r-x权限，使用\"u:用户名:权限\"格式\nsetfacl -m u:testuser:rx /testmulu/\n```\n##### `… … … mask … … … ∞`\n```bash\n# mask是用来指定最大有效权限的，默认情况是rwx\n# 用户拥有ACL权限，需要和mask的权限想与才是真正权限（权限相与：同为r才是r）\n# 修改mask值\nsetfacl -m m:rx /testmulu\n```\n##### `… … … 删除ACL权限 … … … ∞`\n```bash\nsetfacl 选项 文件名\n-x u:用户名 文件名  # 删除指定用户的acl权限\n-x g:组名 文件名  # 删除指定组的acl权限\n-b  # 删除文件的全部acl权限\n```\n##### `… … … 递归ACL权限 … … … ∞`\n```bash\n# 递归是父目录在设定ACL权限时，所有的子文件、子目录也会拥有相同的ACL权限\nsetfacl -m u:用户名:权限 -R 文件名\n```\n##### `… … … 默认ACL权限 … … … ∞`\n```bash\n# 默认ACL权限：给父目录设定了默认ACL权限，当中所有“新建”的子文件都会继承\nsetfacl -m d:u:用户名:权限 文件名\n```\n#### 文件特殊权限\n特殊权限 s\nS代表赋权错误，无任何作用\n##### `… … … SetUID … … … ∞`\n```bash\nSetUID功能：\n只有可执行的二进制程序才能设定SUID权限\n命令执行者要对该程序拥有x权限\n命令执行者在执行该程序时获得该程序文件属主的身份\nSetUID权限只在该程序执行过程中有效\npasswd拥有SetUID权限，所以普通用户可修改密码（/etc/shadow文件默认权限000）\n\n## 设定SetUID命令：\n4<==>SUID\nchmod 4755 文件名\nchmod u+s 文件名\n\n# 取消SetUID权限\nchmod 755 文件名\nchmod u-s 文件名\n\n# 危险的SetUID\n关键目录严格控制写权限，如/、/usr\n```\n##### `… … … SetGID … … … ∞`\n```bash\nSetGID针对文件的作用：\n只有可执行的二进制程序才能设置SGID权限\n命令执行者要对该程序拥有x权限\n命令执行者在执行程序的时候，组身份升级为该程序文件的属组\nSetGID权限同样只在该程序执行过程中有效\n\nSetGID针对目录的作用：\n普通用户必须对此目录拥有rx权限，才能进入此目录\n普通用户在此目录中的有效组会变成此目录的属组\n若普通用户对此目录拥有w权限，新建的文件默认属组时这个目录的 属组\n\n## 设定SetGID命令：\n2<==>SGID\nchmod 2755 文件名\nchmod g+s 文件名\n\n# 取消SetGID权限\nchmod 755 文件名\nchmod g-s 文件名\n```\n##### `… … … Sticky BIT … … … ∞`\n```bash\nSBIT粘着位作用\n粘着位目前只对目录有效\n普通用户对该目录拥有wx权限\n如果没有粘着位，因普通用户拥有w权限，所以可以删除此目录下所有文件，包括其他用户建立的文件\n一旦赋予了粘着位，除了root可以删除所有文件，普通用户就算有w，也只能删除自己建立的，无法删除其他用户建立的文件\n\n## 设置粘着位\n1<==>SBID\nchmod 1755 文件名\nchmod o+t 文件名\n\n# 取消粘着位\nchmod 755 文件名\nchmod o-t 文件名\n文件系统属性权限chattr\n```\n##### `… … … chattr … … … ∞`\n```bash\nchattr [+-=][选项] 文件或目录名\n+：增加权限\n-：删除权限\n=：等于某权限\ni：文件：不允许对文件进行改名修改删除      目录：只能修改目录下文件的数据，不允许新增删除文件\na：文件：只能新增数据（追加的方式），不能修改、删除数据       目录：只能新增（追加的方式）、修改文件，不能删除文件\n\n例：# 防止密码泄露 .pass.txt设置权限：不允许修改 不允许删除\nchattr +i .pass.txt\n```\n##### `… … … lsattr … … … ∞`\n```bash\nlsattr 选项 文件名\n-a：显示所有文件和目录\n-d：若目标是目录，仅列出目录本身的属性，为不是子文件的\n```\n#### sudo\n##### `… … … sudo … … … ∞`\n```bash\n## sudo作用\nroot把本来只能超级用户执行的命令赋予普通用户执行\nsudo的操作对象是系统命令\n\n## sudo使用\nvisudo # 实际修改的是/etc/sudoers文件\n# 用户名 被管理主机的地址=(可使用的身份)  授权命令(绝对路径)\n   root     ALL=(ALL)                                     ALL\n# %组名    被管理主机的地址=(可使用的身份)  授权命令(绝对路径)\n   %wheel  ALL=(ALL)                                     ALL\n\n例：授权testuser用户可以重启服务器\nvisudo\ntestuser ALL=/sbin/shutdown -r now\n\n## 普通用户执行sudo赋予的命令\nsu -testuser\nsudo -k  # 查看可用的sudo命令\nsudo /sbin/shutdown -r now  # 执行sudo赋予的命令\n\n# 切换root\nsudo -i\n```\n\n---\n\n## 文件系统管理\n- 分区规划\nMBR 主分区 4，实际3，最大2T  扩展分区 1  逻辑分区 n\nGPT 主分区 128个，最大18EB\n    - MBR分区类型\n主分区：最多能分4个\n扩展分区：只能有一个，主分区+扩展分区最多有4个；扩展分区不能存储数据和格式化，必须再划分成逻辑分区才能用逻辑分区：IDE硬盘最多支持59个逻辑分区，SCSI硬盘最多支持11个逻辑分区\n1. 分区设备文件名\n主分区1 2 3 /dev/sda1 2 3\n扩展分区 /dev/sda4\n逻辑分区1 2 3 /dev/sda5 6 7  # 逻辑分区固定从sda5开始\n2. 文件系统：空间存储数据的规则\nwindows：NTFS FAT\nlinux：xfs（7以上才有，适合存大文件） ext4\next2：ext的升级版本；1993年发布，支持最大16TB的分区和最大2TB的文件\next3：ext2的升级版本；最大区别是带日志功能以在系统突然停止时提高文件系统的可靠性，支持最大16TB的分区和最大2TB的文件\next4：ext3的升级版；大量改进性能、伸缩性、可靠性；向下兼容ext3、支持最大1EB文件系统和16TB文件、无限数量子目录、Extents连续数据块概念、多块分配、延迟分配、持久预分配、快速FSCK、日志校验、无日志模式、在线碎片整理、inode增强、默认启用barrier等；是CentOS6.3的默认文件系统\n\n    - GPT\n两个工具\nfdisk 所有操作保存在内存里，对磁盘不生效，最终保存才会生效，q退出\nparted 敲回车直接更改\n\n##### `… … … mkfs. blkid pv vg lv  … … … ∞`\n```bash\n## 识别硬盘-》分区规划-》格式化-》挂载\n逻辑分区规划：fdisk n +1G w\n\n格式化：赋予空间 文件系统\nmkfs.ext4 /dev/vdc1\nblkid 查看分区文件系统类型\n\n挂载：让目录成为设备的访问点\n\n## 逻辑卷创建流程：创建物理卷(pv)-》创建卷组(vg)-》创建逻辑卷(lv)\n```\n> 逻辑卷常用指令集\n| 功能 | 物理卷管理 | 卷组管理 | 逻辑卷管理 |\n| :---: | :---: | :---: | :---: |\n| Scan 扫描 | pvscan/pvs | vgscan/ygs | Ivscan/lvs |\n| Create 创建 | pvcreate | vgcreate | lvcreate |\n| Display 显示 | pvdisplay | vgdisplay | lvdisplay |\n| Remove 删除 | pvremove | vgremove | lvremove |\n| Extend 扩展 | / | vgextend | lvextend |\n\n```bash\n# 逻辑卷作用：\n1.整合分散空间\n2.在线动态扩容\n\n# 创建卷组\nvgcreate myvg /dev/vdc2 # 会判断分区是否为物理卷，如不是自动pvcreate，可省略pvcreate步骤\nlvcreate -L 1G -n mylv myvg # L指定最终大小，l指定PE个数\n\n扩容卷组\n情况一：卷组有足够空间\n1.扩展逻辑卷：\nlvextend -L 最终大小 逻辑卷的名 \n2.扩展文件系统（blkid查询类型，用对应类型的命令扩展）：\next4：resize2fs\nxfs：xfs_growfs\n\n情况二：卷组没有足够空间\n1.扩展卷组\nvgextend 卷组名  物理卷1  …\n2.扩展逻辑卷：\nlvextend -L 最终大小 逻辑卷的名 \n3.扩展文件系统（blkid查询类型，用对应类型的命令扩展）：\next4：resize2fs\nxfs：xfs_growfs\n\n# 删除逻辑卷（删除倒序删）\numount\nlvremove\nvgremove（需要vg里的lv都删除完）\npvremove /dev/vdc[2-3]\n\n## PE\n# 修改PE大小\nvgchange -s 1M myvg\nvgdisplay myvg # 查看pe大小\n# 创建时指定PE大小\nvgcreate -s 1M myvg /dev/vdc2\n# 创建lv时指定PE个数\nlvcreate -l 50 -n mylv myvg\n```\n##### `… … … swapon … … … ∞`\n```bash\n## 交换空间（虚拟内存）（swap分区）\n# swap应该分内存的2倍，但超过2G没有意义\n# 利用硬盘的空间，充当内存空间\n# 当物理内存占满了，可以将内存中的数据，暂时放入交换空间中，缓解真是物理内存的压力\n\n# 利用硬盘分区制作交换空间\n# 查看交换分区\nswapon -s \n# 格式化为交换分区\nmkswap /dev/vdc3\n# 永久生效，实现开机自动挂载\nvim /etc/fstab\n/dev/vdc3    swap     swap      defaults    0    0\n# 挂载交换分区\nswapon -a\nswapon -s\n# 停用交换分区\nswapoff /dev/vdc3\n```\n##### `… … … NFS … … … ∞`\n```bash\nNetwork  File System网络文件系统\n# 用途\n为客户机提供共享使用的文件夹\n# 所需软件包\nnfs-utils\n# 系统服务\nnfs-server\n# NFS配置\nvim /etc/exports\n目录 网段\n/public 192.25.0.0/24\n\n# 查看服务端共享的目录\nshowmount -e ${ip}\n```\n##### `… … … autofs … … … ∞`\n```bash\nyum install -y autofs\nsystemctl start autofs\nls /misc/cd\ncat /etc/auto.master  # 配置监控点\ncat /etc/auto.misc  # 配置监控点（触发点）子目录，相对路径，相对上一个文件\n```\n![](linuxNote1/autofs.png)\n##### `… … … lsblk … … … ∞`\n```bash\n#查看所有可用块设备信息\n```\n##### `… … … df … … … ∞`\n```bash\ndf [选项] [挂载点]\n-a：显示all文件系统信息，包括特殊文件系统，如/proc、/sysfs\n-h：使用习惯单位显示容量，如KB、MB或GB\n-T：显示文件系统类型\n-m：以MB为单位显示容量\n-k：以KB为单位显示容量（默认KB）\n# 是从文件系统考虑的，不光要考虑文件占用的空间，还要统计被命令或程序占用的空间（最常见的就是文件已经删除，但是程序并没有释放空间）\n# df看到的可用空间是真正的可用空间\n```\n##### `… … … du … … … ∞`\n```bash\n#查看文件、目录大小\ndu [选项] [目录或文件名]\n-a：显示每个子文件的磁盘占用量，默认只统计子目录的磁盘占用量\n-h：使用习惯单位显示磁盘占用率\n-s：统计总占用量，而不列出子目录和子文件的占用量(KB)\n[-H||--si K，M，G以1000为换算单位显示]\n[--exclude=<目录或文件> 略过指定的目录或文件]\n# 是面向文件的，只会计算文件或目录占用的空间\n```\n##### `… … … fsck … … … ∞`\n```bash\n# 文件系统修复命令\nfsck [选项] 分区设备文件名\n-a：不用显示用户提示，自动修复文件系统\n-y：自动修复，和-a作用一致，不过有些文件系统支支持-y\n```\n##### `… … … dumpe2fs … … … ∞`\n```bash\n# 显示磁盘状态\ndumpe2fs 分区设备文件名\n```\n##### `… … … mount … … … ∞`\n```bash\n临时挂载；一个设备能挂载多个挂载点；一个挂载点只能挂载一个设备\n\n# 查询系统中已经挂载的设备，-l会显示卷标名称\nmount [-l]\n\n# 依据配置文件/etc/fstab的内容，自动挂载；检查/etc/fstab文件语法正误\nmount -a\n\nmount [-t 文件系统] [-L 卷标名] [-o 特殊选项] 设备文件名 挂载点\n-t 文件系统：加入文件系统类型来指定挂载的类型（ext3、ext4、iso9660等）\n-L 卷标名：挂载指定卷标的分区，而不是安装设备文件名挂载\n-o 特殊选项：可以指定挂载的额外选项\n例：挂载光盘\nmount -t iso9660 /dev/cdrom /mnt/cdrom/\n挂载U盘 # Linux默认不支持NTFS文件系统\nmount -t vfat /dev/sdb1 /mnt/usb/\n\n# 卸载\numount 挂载点\n```\n##### `… … … /etc/fstab … … … ∞`\n```bash\n## 自动挂载（永久挂载）\n/etc/fstab文件（文件写错系统起不来）\n第1字段：分区设备文件名或UUID（硬盘通用唯一识别码）\n第2字段：挂载点\n第3字段：文件系统名称\n第4字段：挂载参数\n第5字段：指定分区是否被dump备份，0 不备份、1 每天备份、2 不定期备份\n第6字段：指定分区是否被fsck检测，0 不检测、其他数字代表优先级\n\n# /etc/fstab 文件的记录格式：\n设备路径（设备名称）   挂载点   文件系统类型   参数   备份标记   检测顺序\n```\n\n ##### `… … … fdisk … … … ∞`\n```bash\n# 查询新硬盘\nfdisk -l\n\n# 分区\nfdisk /dev/sdb\n所有操作保存在内存里，对磁盘不生效，最终保存才会生效，q退出\n\n# 重新读取分区表信息\npartprobe\n```\n ##### `… … … stat … … … ∞`\n```bash\n#查看文件信息\nstat [文件]\n```\n","tags":["linux"],"categories":["study","notes"]},{"title":"markdown常用语法备忘","url":"/2025/04/02/markdownCommGramNote/","content":"## 标题\n# 一级标题\n## 二级标题\n### 三级标题\n#### 四级标题\n##### 五级标题\n###### 六级标题\n#######没有七级，七级是正文  \n```text\n# 一级标题 缩略栏是居中的大标题\n## 二级标题 二级好看，用二级当一级\n### 三级标题\n#### 四级标题\n##### 五级标题\n###### 六级标题\n####### 没有七级，七级是正文 \n```\n\n---\n\n## 列表\n1. 有序列表一\n2. 有序列表二\n```text\n1. 有序列表一\n2. 有序列表二\n```\n- 无序列表\n- 无序列表\n+ test3\n+ test4\n* test5\n* test6\n```text\n- 无序列表\n- 无序列表\n+ test3\n+ test4\n* test5\n* test6\n```\n\n---\n\n## 分割线\n---\n```text\n---\n```\n\n---\n\n## 引用\n> 引用\n\n```text\n> 引用\n```\n\n---\n\n## 超链接\n[行内式链接](https:fay.net.cn)  \n[参数式链接]: https://fay.net.cn  \n![本地头像](./reimu.png)\n```text\n[行内式链接](https:fay.net.cn)  \n[参数式链接]: https://fay.net.cn  \n![本地头像](./reimu.png)\n```\n\n---\n\n## 表格\n| name | desc |\n|:---:|---:|\n| a | b<br>c |\n```text\n| name | desc |\n| :---: | ---: |\n| a | b<br>c |\n```\n\n---\n\n## 字体样式\n_斜体_  \n__粗体__  \n___粗斜体___  \n\\*反斜杠转义\n~~删除线~~\n<u>下划线</u>\n脚注[^1]\n[^1]: 脚注1内容\n```text\n_斜体_  \n__粗体__  \n___粗斜体___  \n\\*反斜杠转义\n~~删除线~~\n<u>下划线</u>\n脚注[^1]\n[^1]: 脚注1内容\n```\n\n---\n\n## 文字高亮\n`警告警告！！！`\n```text\n`警告警告！！！`\n```\n\n---\n\n## 代码高亮块\n```c++\nclass Solution {\npublic:\n    vectio<int> res,left,right;\n}\n```\n\n```text\n首行使用三个反引号加语言：```c++\n输入代码块内容：\nclass Solution {\npublic:\n    vectio<int> res,left,right;\n}\n结尾用三个反引号：```\n```","tags":["markdown"],"categories":["study","notes"]},{"title":"博客搭建hexo+github+个人域名","url":"/2025/03/27/blogBuilding-hexo/","content":"\n## 安装nodejs\n- __下载__\n[nodejs官网]: https://nodejs.org/en/download/\n根据电脑系统、架构下载对应版本\n- __安装__\n解压后安装，除安装地址外、其他选项默认即可\n检查是否安装成功：\n【win+r】输入【cmd】回车（打开命令行）\n![](blogBuilding-hexo/win_r-cmd.png)\n```bash\n# 如无信息可到cd到对应安装目录执行\nnode -v\n```\n如下输出版本号即安装成功\n![](blogBuilding-hexo/nodejs_version.png)\n- __配置环境__\n1. 到nodejs安装目录下，和node.exe同级，新建两个文件夹【node_global】和【node_cache】\n2. 以管理员身份运行cmd\n```bash\nnpm config set prefix \"刚刚创建的node_global路径\"\nnpm config set cache \"刚刚创建的node_cache路径\"\n```\n3. 配置系统环境变量\n【win+r】输入【sysdm.cpl】回车（打开系统属性）\n【系统属性】-【高级】-【环境变量】-【系统变量】-【Path】-【新建】\n```yaml\n变量名：NODE_PATH\n变量值：D:\\develop\\nodejs\\node_global\\node_modules\n```\n配置后【node_global】下会自动生成【node_modules】，如未出现，手动创建\n4. 配置用户环境变量\n【win+r】输入【sysdm.cpl】回车（打开系统属性）\n【系统属性】-【高级】-【环境变量】-【用户变量】-【Path】-【编辑】\n将原本的默认【C:\\Users\\哔\\AppData\\Roaming\\npm】修改为【node_global】的绝对路径\n5. 配置系统环境变量\n【系统变量】-【Path】-【编辑】\n【新建】-输入【%NODE_PATH%】-确认\n6. 测试\n以管理员身份运行cmd\n```bash\n# 检查是否正常输出刚才配置的路径\nnpm config get prefix\nnpm config get cache\n# 全局安装一个最常用的express模块测试\nnpm install express -g # -g代表全局安装\n```\n## 安装git\n- __下载安装__\n[git国内官网]: https://git-scm.com/\n根据电脑系统、架构下载对应版本，安装\n- __检查__\n```bash\ngit --version\n# 输出对应版本号则为安装成功\n# 在桌面或任意文件夹内右键会多两个选项：【Git GUI Here】【Git Bash Here】\n```\n## 安装hexo\n- __下载安装__\n创建文件夹，日后博客相关文件都会保存在此，例【d:\\develop\\hexo】，然后进入hexo目录，【右键】-【Git Bash Here】\n```bash\nnpm install hexo-cli -g\nnpm install hexo-deployer-git --save\n# 初始化hexo\nhexo init\n```\n== 后边的命令默认在hexo文件夹下执行 ==\n- __更换喜欢的主题__\n[hexo主题官网点击此处：Themes | Hexo](https://hexo.io/themes/)\n找到喜欢的主题，git clone到theme下\n修改外层【_config.yml】中的theme值为刚刚克隆的主题文件夹名，我这里用的主题是[hexo-theme-reimu](https://github.com/D-Sketon/hexo-theme-reimu)  \n```yaml\ntheme: reimu\n```\n- __本地运行__\n```bash\n# 启动\nhexo clean & hexo g & hexo server\n# 访问4000端口，发现已生成博客\nhttp://localhost:4000\n```\n## 将本地博客部署到GitHubPages\n1. 注册登录github账号，根据官网指引绑定ssh秘钥，在github中添加公钥\n2. github创建仓库，仓库名格式一定为\"用户名.github.io\"，后期访问需要通过这个域名访问，设置公开仓库\n![](blogBuilding-hexo/github_repo_create.png)\n3. 配置github仓库地址到config里\n复制ssh的git地址\n![](blogBuilding-hexo/git_clone.png)\n修改外层【_config.yml】里的deploy下的字段\n![](blogBuilding-hexo/config_deploy.png)\n4. 部署到github\n```bash\nnpm install hexo-deployer-git --save\nhexo g -d\n```\n5. 访问博客地址\n```yaml\nhttps://自己的用户名.github.io\n```\n比如我的是(https://jade-xyy.github.io)\n## 写文章\nhexo下的【source\\_posts】文件夹是用来保存文章的\n```bash\n# 生成新文章\nhexo new post \"文章标题\"\n# 找到对应文章的md文件，用markdown语法编辑文章后发布，重新访问即可看到\nhexo g # 生成网页\nhexo s # 本地预览\nhexo d # 推送到服务器\n```\n## 绑定个人的私有域名\n- __首先需要购入一个私有域名__\n我是在阿里云购买的域名\n- __配置dns解析__\n配置5条记录\n```yml\n1条【CNAME】的，主机记录 www ，记录值填上边的github访问地址（自己的用户名.github.io）\n4条【A】的，主机记录 @ ，记录值为以下\n185.199.108.153\n185.199.109.153\n185.199.110.153\n185.199.111.153\n```\n- __创建域名跳转文件__\n在仓库根目录下，创建CNAME文件，内容为购买的域名，例如我自己的\n![](blogBuilding-hexo/github_cname.png)\n到github仓库的【Settings】-【Pages】中，配置域名\n![](blogBuilding-hexo/github_setting.png)\n另外还得在 /source 下创建CNAME文件，防止hexo clean时，public下的CNAME被覆盖消失\n![](blogBuilding-hexo/source_cname.png)\n__访问个人域名，全部完成！！！__","tags":["blog"],"categories":["study","manual"]},{"title":"Hello World","url":"/2025/03/24/hello-world/","content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n"}]